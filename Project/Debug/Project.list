
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b68  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020b4  08013d18  08013d18  00023d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dcc  08015dcc  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08015dcc  08015dcc  00025dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dd4  08015dd4  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dd4  08015dd4  00025dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dd8  08015dd8  00025dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015ddc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030350  2**0
                  CONTENTS
 10 .bss          00006868  20000350  20000350  00030350  2**2
                  ALLOC
 11 ._user_heap_stack 00002400  20006bb8  20006bb8  00030350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ace1  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006423  00000000  00000000  0005b061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  00061488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002258  00000000  00000000  000639a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a390  00000000  00000000  00065c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002df17  00000000  00000000  0006ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6dfe  00000000  00000000  0009dea7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00194ca5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b144  00000000  00000000  00194cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000350 	.word	0x20000350
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013d00 	.word	0x08013d00

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000354 	.word	0x20000354
 80001ec:	08013d00 	.word	0x08013d00

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <distance>:
	float X_up;
	int flag_up = 0, flag_down = 0, flag_start = 0, d = 0, score = 0, i = 0, sp;
	char X[10], Y[10], Z[10];

	int t0 = 0, t1 = 0, t2 = 0;
int distance (float x){
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	ed87 0a01 	vstr	s0, [r7, #4]
	int s;

	switch(i){
 8001022:	4b7b      	ldr	r3, [pc, #492]	; (8001210 <distance+0x1f8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b05      	cmp	r3, #5
 8001028:	dc02      	bgt.n	8001030 <distance+0x18>
 800102a:	2b00      	cmp	r3, #0
 800102c:	da04      	bge.n	8001038 <distance+0x20>
 800102e:	e009      	b.n	8001044 <distance+0x2c>
 8001030:	3b06      	subs	r3, #6
 8001032:	2b04      	cmp	r3, #4
 8001034:	d806      	bhi.n	8001044 <distance+0x2c>
 8001036:	e002      	b.n	800103e <distance+0x26>
		case 0:
		case 1:
		case 2:
		case 3:
		case 4:
		case 5: s = 1; break;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e005      	b.n	800104a <distance+0x32>
		case 6:
		case 7:
		case 8:
		case 9:
		case 10: s = 2; break;
 800103e:	2302      	movs	r3, #2
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e002      	b.n	800104a <distance+0x32>
		case 11:
		case 12:
		case 13:
		case 14:
		default:s = 3; break;
 8001044:	2303      	movs	r3, #3
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	bf00      	nop
	}

	x = x / s;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	ee07 3a90 	vmov	s15, r3
 8001050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001054:	edd7 6a01 	vldr	s13, [r7, #4]
 8001058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800105c:	edc7 7a01 	vstr	s15, [r7, #4]

	if (x <= 30) {return 20;}	//10
 8001060:	edd7 7a01 	vldr	s15, [r7, #4]
 8001064:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d801      	bhi.n	8001076 <distance+0x5e>
 8001072:	2314      	movs	r3, #20
 8001074:	e0c6      	b.n	8001204 <distance+0x1ec>
	else if (x <= 60) {return 22;}	//11
 8001076:	edd7 7a01 	vldr	s15, [r7, #4]
 800107a:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001214 <distance+0x1fc>
 800107e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001086:	d801      	bhi.n	800108c <distance+0x74>
 8001088:	2316      	movs	r3, #22
 800108a:	e0bb      	b.n	8001204 <distance+0x1ec>
	else if (x <= 90) {return 24;}	//12
 800108c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001090:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001218 <distance+0x200>
 8001094:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	d801      	bhi.n	80010a2 <distance+0x8a>
 800109e:	2318      	movs	r3, #24
 80010a0:	e0b0      	b.n	8001204 <distance+0x1ec>
	else if (x <= 120) {return 26;}	//13
 80010a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a6:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800121c <distance+0x204>
 80010aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b2:	d801      	bhi.n	80010b8 <distance+0xa0>
 80010b4:	231a      	movs	r3, #26
 80010b6:	e0a5      	b.n	8001204 <distance+0x1ec>
	else if (x <= 150) {return 28;}	//14
 80010b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010bc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001220 <distance+0x208>
 80010c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c8:	d801      	bhi.n	80010ce <distance+0xb6>
 80010ca:	231c      	movs	r3, #28
 80010cc:	e09a      	b.n	8001204 <distance+0x1ec>
	else if (x <= 180) {return 30;}	//15
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001224 <distance+0x20c>
 80010d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	d801      	bhi.n	80010e4 <distance+0xcc>
 80010e0:	231e      	movs	r3, #30
 80010e2:	e08f      	b.n	8001204 <distance+0x1ec>
	else if (x <= 210) {return 32;}	//16
 80010e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010e8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001228 <distance+0x210>
 80010ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f4:	d801      	bhi.n	80010fa <distance+0xe2>
 80010f6:	2320      	movs	r3, #32
 80010f8:	e084      	b.n	8001204 <distance+0x1ec>
	else if (x <= 240) {return 34;}	//17
 80010fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80010fe:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800122c <distance+0x214>
 8001102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110a:	d801      	bhi.n	8001110 <distance+0xf8>
 800110c:	2322      	movs	r3, #34	; 0x22
 800110e:	e079      	b.n	8001204 <distance+0x1ec>
	else if (x <= 270) {return 36;}	//18
 8001110:	edd7 7a01 	vldr	s15, [r7, #4]
 8001114:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8001230 <distance+0x218>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	d801      	bhi.n	8001126 <distance+0x10e>
 8001122:	2324      	movs	r3, #36	; 0x24
 8001124:	e06e      	b.n	8001204 <distance+0x1ec>
	else if (x <= 300) {return 40;}	//20
 8001126:	edd7 7a01 	vldr	s15, [r7, #4]
 800112a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8001234 <distance+0x21c>
 800112e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001136:	d801      	bhi.n	800113c <distance+0x124>
 8001138:	2328      	movs	r3, #40	; 0x28
 800113a:	e063      	b.n	8001204 <distance+0x1ec>
	else if (x <= 330) {return 44;}	//22
 800113c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001140:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8001238 <distance+0x220>
 8001144:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d801      	bhi.n	8001152 <distance+0x13a>
 800114e:	232c      	movs	r3, #44	; 0x2c
 8001150:	e058      	b.n	8001204 <distance+0x1ec>
	else if (x <= 360) {return 48;}	//24
 8001152:	edd7 7a01 	vldr	s15, [r7, #4]
 8001156:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800123c <distance+0x224>
 800115a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800115e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001162:	d801      	bhi.n	8001168 <distance+0x150>
 8001164:	2330      	movs	r3, #48	; 0x30
 8001166:	e04d      	b.n	8001204 <distance+0x1ec>
    else if (x <= 390) {return 52;}	//26
 8001168:	edd7 7a01 	vldr	s15, [r7, #4]
 800116c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001240 <distance+0x228>
 8001170:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001178:	d801      	bhi.n	800117e <distance+0x166>
 800117a:	2334      	movs	r3, #52	; 0x34
 800117c:	e042      	b.n	8001204 <distance+0x1ec>
    else if (x <= 420) {return 56;}	//28
 800117e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001182:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001244 <distance+0x22c>
 8001186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	d801      	bhi.n	8001194 <distance+0x17c>
 8001190:	2338      	movs	r3, #56	; 0x38
 8001192:	e037      	b.n	8001204 <distance+0x1ec>
    else if (x <= 450) {return 60;}	//30
 8001194:	edd7 7a01 	vldr	s15, [r7, #4]
 8001198:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001248 <distance+0x230>
 800119c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d801      	bhi.n	80011aa <distance+0x192>
 80011a6:	233c      	movs	r3, #60	; 0x3c
 80011a8:	e02c      	b.n	8001204 <distance+0x1ec>
    else if (x <= 480) {return 64;}	//32
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800124c <distance+0x234>
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ba:	d801      	bhi.n	80011c0 <distance+0x1a8>
 80011bc:	2340      	movs	r3, #64	; 0x40
 80011be:	e021      	b.n	8001204 <distance+0x1ec>
    else if (x <= 510) {return 68;}	//34
 80011c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001250 <distance+0x238>
 80011c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d0:	d801      	bhi.n	80011d6 <distance+0x1be>
 80011d2:	2344      	movs	r3, #68	; 0x44
 80011d4:	e016      	b.n	8001204 <distance+0x1ec>
    else if (x <= 540) {return 72;}	//36
 80011d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80011da:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001254 <distance+0x23c>
 80011de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e6:	d801      	bhi.n	80011ec <distance+0x1d4>
 80011e8:	2348      	movs	r3, #72	; 0x48
 80011ea:	e00b      	b.n	8001204 <distance+0x1ec>
    else if (x <= 570) {return 76;}	//38
 80011ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80011f0:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001258 <distance+0x240>
 80011f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d801      	bhi.n	8001202 <distance+0x1ea>
 80011fe:	234c      	movs	r3, #76	; 0x4c
 8001200:	e000      	b.n	8001204 <distance+0x1ec>
    else {return 80;}	//40
 8001202:	2350      	movs	r3, #80	; 0x50
}
 8001204:	4618      	mov	r0, r3
 8001206:	3714      	adds	r7, #20
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	20000390 	.word	0x20000390
 8001214:	42700000 	.word	0x42700000
 8001218:	42b40000 	.word	0x42b40000
 800121c:	42f00000 	.word	0x42f00000
 8001220:	43160000 	.word	0x43160000
 8001224:	43340000 	.word	0x43340000
 8001228:	43520000 	.word	0x43520000
 800122c:	43700000 	.word	0x43700000
 8001230:	43870000 	.word	0x43870000
 8001234:	43960000 	.word	0x43960000
 8001238:	43a50000 	.word	0x43a50000
 800123c:	43b40000 	.word	0x43b40000
 8001240:	43c30000 	.word	0x43c30000
 8001244:	43d20000 	.word	0x43d20000
 8001248:	43e10000 	.word	0x43e10000
 800124c:	43f00000 	.word	0x43f00000
 8001250:	43ff0000 	.word	0x43ff0000
 8001254:	44070000 	.word	0x44070000
 8001258:	440e8000 	.word	0x440e8000

0800125c <speed>:

int speed(float x){
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	ed87 0a01 	vstr	s0, [r7, #4]

	if (x <= 30) {return 100;}	//10
 8001266:	edd7 7a01 	vldr	s15, [r7, #4]
 800126a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800126e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001276:	d801      	bhi.n	800127c <speed+0x20>
 8001278:	2364      	movs	r3, #100	; 0x64
 800127a:	e037      	b.n	80012ec <speed+0x90>
	else if (x <= 120) {return 90;}	//13
 800127c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001280:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80012f8 <speed+0x9c>
 8001284:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128c:	d801      	bhi.n	8001292 <speed+0x36>
 800128e:	235a      	movs	r3, #90	; 0x5a
 8001290:	e02c      	b.n	80012ec <speed+0x90>
	else if (x <= 210) {return 80;}	//16
 8001292:	edd7 7a01 	vldr	s15, [r7, #4]
 8001296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012fc <speed+0xa0>
 800129a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d801      	bhi.n	80012a8 <speed+0x4c>
 80012a4:	2350      	movs	r3, #80	; 0x50
 80012a6:	e021      	b.n	80012ec <speed+0x90>
	else if (x <= 300) {return 70;}	//20
 80012a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001300 <speed+0xa4>
 80012b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b8:	d801      	bhi.n	80012be <speed+0x62>
 80012ba:	2346      	movs	r3, #70	; 0x46
 80012bc:	e016      	b.n	80012ec <speed+0x90>
    else if (x <= 390) {return 60;}	//26
 80012be:	edd7 7a01 	vldr	s15, [r7, #4]
 80012c2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001304 <speed+0xa8>
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	d801      	bhi.n	80012d4 <speed+0x78>
 80012d0:	233c      	movs	r3, #60	; 0x3c
 80012d2:	e00b      	b.n	80012ec <speed+0x90>
    else if (x <= 480) {return 50;}	//32
 80012d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8001308 <speed+0xac>
 80012dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e4:	d801      	bhi.n	80012ea <speed+0x8e>
 80012e6:	2332      	movs	r3, #50	; 0x32
 80012e8:	e000      	b.n	80012ec <speed+0x90>
    else {return 40;}	//40
 80012ea:	2328      	movs	r3, #40	; 0x28
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	42f00000 	.word	0x42f00000
 80012fc:	43520000 	.word	0x43520000
 8001300:	43960000 	.word	0x43960000
 8001304:	43c30000 	.word	0x43c30000
 8001308:	43f00000 	.word	0x43f00000

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f002 fbe0 	bl	8003ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f856 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  BSP_SDRAM_Init();
 8001318:	f002 fa12 	bl	8003740 <BSP_SDRAM_Init>
  MX_GPIO_Init();
 800131c:	f000 f8be 	bl	800149c <MX_GPIO_Init>
  BSP_GYRO_Init();
 8001320:	f001 fb48 	bl	80029b4 <BSP_GYRO_Init>
  MX_USB_DEVICE_Init();
 8001324:	f00d fb30 	bl	800e988 <MX_USB_DEVICE_Init>
          /* USER CODE BEGIN 2 */
  BSP_LCD_Init();//init LCD
 8001328:	f001 fbaa 	bl	8002a80 <BSP_LCD_Init>
          //set the layer buffer address into SDRAM
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 800132c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001330:	2001      	movs	r0, #1
 8001332:	f001 fc27 	bl	8002b84 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8001336:	2001      	movs	r0, #1
 8001338:	f001 fc88 	bl	8002c4c <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 800133c:	f002 f802 	bl	8003344 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue color
 8001340:	4815      	ldr	r0, [pc, #84]	; (8001398 <main+0x8c>)
 8001342:	f001 fcf5 	bl	8002d30 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8001346:	4814      	ldr	r0, [pc, #80]	; (8001398 <main+0x8c>)
 8001348:	f001 fca8 	bl	8002c9c <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f001 fc8c 	bl	8002c6c <BSP_LCD_SetTextColor>

  /* USER CODE BEGIN 2 */
  CDC_Transmit_HS((uint8_t*)"Chieu cao bong:\n", 17);
 8001354:	2111      	movs	r1, #17
 8001356:	4811      	ldr	r0, [pc, #68]	; (800139c <main+0x90>)
 8001358:	f00d fbd4 	bl	800eb04 <CDC_Transmit_HS>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800135c:	f008 fdf8 	bl	8009f50 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task0 */
  Task0Handle = osThreadNew(StartTask0, NULL, &Task0_attributes);
 8001360:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <main+0x94>)
 8001362:	2100      	movs	r1, #0
 8001364:	480f      	ldr	r0, [pc, #60]	; (80013a4 <main+0x98>)
 8001366:	f008 fe3d 	bl	8009fe4 <osThreadNew>
 800136a:	4603      	mov	r3, r0
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <main+0x9c>)
 800136e:	6013      	str	r3, [r2, #0]

  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8001370:	4a0e      	ldr	r2, [pc, #56]	; (80013ac <main+0xa0>)
 8001372:	2100      	movs	r1, #0
 8001374:	480e      	ldr	r0, [pc, #56]	; (80013b0 <main+0xa4>)
 8001376:	f008 fe35 	bl	8009fe4 <osThreadNew>
 800137a:	4603      	mov	r3, r0
 800137c:	4a0d      	ldr	r2, [pc, #52]	; (80013b4 <main+0xa8>)
 800137e:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <main+0xac>)
 8001382:	2100      	movs	r1, #0
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <main+0xb0>)
 8001386:	f008 fe2d 	bl	8009fe4 <osThreadNew>
 800138a:	4603      	mov	r3, r0
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <main+0xb4>)
 800138e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001390:	f008 fe02 	bl	8009f98 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001394:	e7fe      	b.n	8001394 <main+0x88>
 8001396:	bf00      	nop
 8001398:	ff0000ff 	.word	0xff0000ff
 800139c:	08013d30 	.word	0x08013d30
 80013a0:	08013de4 	.word	0x08013de4
 80013a4:	08001509 	.word	0x08001509
 80013a8:	2000036c 	.word	0x2000036c
 80013ac:	08013e08 	.word	0x08013e08
 80013b0:	08001755 	.word	0x08001755
 80013b4:	20000370 	.word	0x20000370
 80013b8:	08013e2c 	.word	0x08013e2c
 80013bc:	080017a9 	.word	0x080017a9
 80013c0:	20000374 	.word	0x20000374

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	; 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	; 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f00e f82c 	bl	800f430 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <SystemClock_Config+0xd0>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <SystemClock_Config+0xd0>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	; 0x40
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <SystemClock_Config+0xd0>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4b23      	ldr	r3, [pc, #140]	; (8001498 <SystemClock_Config+0xd4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a22      	ldr	r2, [pc, #136]	; (8001498 <SystemClock_Config+0xd4>)
 800140e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b20      	ldr	r3, [pc, #128]	; (8001498 <SystemClock_Config+0xd4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001432:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001434:	2308      	movs	r3, #8
 8001436:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001438:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001442:	2307      	movs	r3, #7
 8001444:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001446:	f107 0320 	add.w	r3, r7, #32
 800144a:	4618      	mov	r0, r3
 800144c:	f004 fffa 	bl	8006444 <HAL_RCC_OscConfig>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001456:	f000 fa97 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145a:	230f      	movs	r3, #15
 800145c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145e:	2302      	movs	r3, #2
 8001460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001466:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800146a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	2105      	movs	r1, #5
 8001478:	4618      	mov	r0, r3
 800147a:	f005 fa5b 	bl	8006934 <HAL_RCC_ClockConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001484:	f000 fa80 	bl	8001988 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001488:	f005 fb3a 	bl	8006b00 <HAL_RCC_EnableCSS>
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_GPIO_Init+0x68>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a16      	ldr	r2, [pc, #88]	; (8001504 <MX_GPIO_Init+0x68>)
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_GPIO_Init+0x68>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	4b10      	ldr	r3, [pc, #64]	; (8001504 <MX_GPIO_Init+0x68>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a0f      	ldr	r2, [pc, #60]	; (8001504 <MX_GPIO_Init+0x68>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_GPIO_Init+0x68>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	607b      	str	r3, [r7, #4]
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_GPIO_Init+0x68>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a08      	ldr	r2, [pc, #32]	; (8001504 <MX_GPIO_Init+0x68>)
 80014e4:	f043 0301 	orr.w	r3, r3, #1
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_GPIO_Init+0x68>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	607b      	str	r3, [r7, #4]
 80014f4:	687b      	ldr	r3, [r7, #4]

}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <StartTask0>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask0 */
void StartTask0(void *argument)
{
 8001508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(d >= 20 && flag_down == 0){
 8001512:	4b85      	ldr	r3, [pc, #532]	; (8001728 <StartTask0+0x220>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b13      	cmp	r3, #19
 8001518:	dd11      	ble.n	800153e <StartTask0+0x36>
 800151a:	4b84      	ldr	r3, [pc, #528]	; (800172c <StartTask0+0x224>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <StartTask0+0x36>
		  i++;
 8001522:	4b83      	ldr	r3, [pc, #524]	; (8001730 <StartTask0+0x228>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	4a81      	ldr	r2, [pc, #516]	; (8001730 <StartTask0+0x228>)
 800152a:	6013      	str	r3, [r2, #0]
		  if(i == d){flag_down = 1;}
 800152c:	4b80      	ldr	r3, [pc, #512]	; (8001730 <StartTask0+0x228>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b7d      	ldr	r3, [pc, #500]	; (8001728 <StartTask0+0x220>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d102      	bne.n	800153e <StartTask0+0x36>
 8001538:	4b7c      	ldr	r3, [pc, #496]	; (800172c <StartTask0+0x224>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]
	  }

	  if(flag_down == 1){
 800153e:	4b7b      	ldr	r3, [pc, #492]	; (800172c <StartTask0+0x224>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d117      	bne.n	8001576 <StartTask0+0x6e>
		  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8001546:	487b      	ldr	r0, [pc, #492]	; (8001734 <StartTask0+0x22c>)
 8001548:	f001 fbf2 	bl	8002d30 <BSP_LCD_Clear>
		  BSP_LCD_FillCircle(120, 150, i + 20);
 800154c:	4b78      	ldr	r3, [pc, #480]	; (8001730 <StartTask0+0x228>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	3314      	adds	r3, #20
 8001554:	b29b      	uxth	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	2196      	movs	r1, #150	; 0x96
 800155a:	2078      	movs	r0, #120	; 0x78
 800155c:	f001 fe52 	bl	8003204 <BSP_LCD_FillCircle>
		  d--;
 8001560:	4b71      	ldr	r3, [pc, #452]	; (8001728 <StartTask0+0x220>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3b01      	subs	r3, #1
 8001566:	4a70      	ldr	r2, [pc, #448]	; (8001728 <StartTask0+0x220>)
 8001568:	6013      	str	r3, [r2, #0]
		  i--;
 800156a:	4b71      	ldr	r3, [pc, #452]	; (8001730 <StartTask0+0x228>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a6f      	ldr	r2, [pc, #444]	; (8001730 <StartTask0+0x228>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	e009      	b.n	800158a <StartTask0+0x82>
	  }
	  else{
		  BSP_LCD_FillCircle(120, 150, i + 20);
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <StartTask0+0x228>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	b29b      	uxth	r3, r3
 800157c:	3314      	adds	r3, #20
 800157e:	b29b      	uxth	r3, r3
 8001580:	461a      	mov	r2, r3
 8001582:	2196      	movs	r1, #150	; 0x96
 8001584:	2078      	movs	r0, #120	; 0x78
 8001586:	f001 fe3d 	bl	8003204 <BSP_LCD_FillCircle>
	  }

	  sprintf(X,"Score: %d", score);
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <StartTask0+0x230>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	496a      	ldr	r1, [pc, #424]	; (800173c <StartTask0+0x234>)
 8001592:	486b      	ldr	r0, [pc, #428]	; (8001740 <StartTask0+0x238>)
 8001594:	f00e fdd4 	bl	8010140 <siprintf>
	  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 8001598:	4969      	ldr	r1, [pc, #420]	; (8001740 <StartTask0+0x238>)
 800159a:	2000      	movs	r0, #0
 800159c:	f001 fcf2 	bl	8002f84 <BSP_LCD_DisplayStringAtLine>

	  if (flag_down == 0){
 80015a0:	4b62      	ldr	r3, [pc, #392]	; (800172c <StartTask0+0x224>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f040 80ba 	bne.w	800171e <StartTask0+0x216>
		  if (i <= (d - d*0.375)) {osDelay(sp * 0.375);}
 80015aa:	4b61      	ldr	r3, [pc, #388]	; (8001730 <StartTask0+0x228>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffc8 	bl	8000544 <__aeabi_i2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <StartTask0+0x220>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffc1 	bl	8000544 <__aeabi_i2d>
 80015c2:	4680      	mov	r8, r0
 80015c4:	4689      	mov	r9, r1
 80015c6:	4b58      	ldr	r3, [pc, #352]	; (8001728 <StartTask0+0x220>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffba 	bl	8000544 <__aeabi_i2d>
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <StartTask0+0x23c>)
 80015d6:	f7ff f81f 	bl	8000618 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4640      	mov	r0, r8
 80015e0:	4649      	mov	r1, r9
 80015e2:	f7fe fe61 	bl	80002a8 <__aeabi_dsub>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4620      	mov	r0, r4
 80015ec:	4629      	mov	r1, r5
 80015ee:	f7ff fa8f 	bl	8000b10 <__aeabi_dcmple>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d014      	beq.n	8001622 <StartTask0+0x11a>
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <StartTask0+0x240>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe ffa1 	bl	8000544 <__aeabi_i2d>
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	4b4f      	ldr	r3, [pc, #316]	; (8001744 <StartTask0+0x23c>)
 8001608:	f7ff f806 	bl	8000618 <__aeabi_dmul>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fad8 	bl	8000bc8 <__aeabi_d2uiz>
 8001618:	4603      	mov	r3, r0
 800161a:	4618      	mov	r0, r3
 800161c:	f008 fd74 	bl	800a108 <osDelay>
 8001620:	e777      	b.n	8001512 <StartTask0+0xa>
		  else if (i <= (d - d*0.75)) {osDelay(sp * 0.75);}
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <StartTask0+0x228>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8c 	bl	8000544 <__aeabi_i2d>
 800162c:	4604      	mov	r4, r0
 800162e:	460d      	mov	r5, r1
 8001630:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <StartTask0+0x220>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ff85 	bl	8000544 <__aeabi_i2d>
 800163a:	4680      	mov	r8, r0
 800163c:	4689      	mov	r9, r1
 800163e:	4b3a      	ldr	r3, [pc, #232]	; (8001728 <StartTask0+0x220>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7fe ff7e 	bl	8000544 <__aeabi_i2d>
 8001648:	f04f 0200 	mov.w	r2, #0
 800164c:	4b3f      	ldr	r3, [pc, #252]	; (800174c <StartTask0+0x244>)
 800164e:	f7fe ffe3 	bl	8000618 <__aeabi_dmul>
 8001652:	4602      	mov	r2, r0
 8001654:	460b      	mov	r3, r1
 8001656:	4640      	mov	r0, r8
 8001658:	4649      	mov	r1, r9
 800165a:	f7fe fe25 	bl	80002a8 <__aeabi_dsub>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	4620      	mov	r0, r4
 8001664:	4629      	mov	r1, r5
 8001666:	f7ff fa53 	bl	8000b10 <__aeabi_dcmple>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d014      	beq.n	800169a <StartTask0+0x192>
 8001670:	4b35      	ldr	r3, [pc, #212]	; (8001748 <StartTask0+0x240>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff65 	bl	8000544 <__aeabi_i2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <StartTask0+0x244>)
 8001680:	f7fe ffca 	bl	8000618 <__aeabi_dmul>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa9c 	bl	8000bc8 <__aeabi_d2uiz>
 8001690:	4603      	mov	r3, r0
 8001692:	4618      	mov	r0, r3
 8001694:	f008 fd38 	bl	800a108 <osDelay>
 8001698:	e73b      	b.n	8001512 <StartTask0+0xa>
		  else if (i <= (d - d*0.875)) {osDelay(sp * 0.875);}
 800169a:	4b25      	ldr	r3, [pc, #148]	; (8001730 <StartTask0+0x228>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff50 	bl	8000544 <__aeabi_i2d>
 80016a4:	4604      	mov	r4, r0
 80016a6:	460d      	mov	r5, r1
 80016a8:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <StartTask0+0x220>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff49 	bl	8000544 <__aeabi_i2d>
 80016b2:	4680      	mov	r8, r0
 80016b4:	4689      	mov	r9, r1
 80016b6:	4b1c      	ldr	r3, [pc, #112]	; (8001728 <StartTask0+0x220>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff42 	bl	8000544 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <StartTask0+0x248>)
 80016c6:	f7fe ffa7 	bl	8000618 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4640      	mov	r0, r8
 80016d0:	4649      	mov	r1, r9
 80016d2:	f7fe fde9 	bl	80002a8 <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff fa17 	bl	8000b10 <__aeabi_dcmple>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d014      	beq.n	8001712 <StartTask0+0x20a>
 80016e8:	4b17      	ldr	r3, [pc, #92]	; (8001748 <StartTask0+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ff29 	bl	8000544 <__aeabi_i2d>
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <StartTask0+0x248>)
 80016f8:	f7fe ff8e 	bl	8000618 <__aeabi_dmul>
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa60 	bl	8000bc8 <__aeabi_d2uiz>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f008 fcfc 	bl	800a108 <osDelay>
 8001710:	e6ff      	b.n	8001512 <StartTask0+0xa>
		  else {osDelay(sp);}
 8001712:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <StartTask0+0x240>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f008 fcf6 	bl	800a108 <osDelay>
 800171c:	e6f9      	b.n	8001512 <StartTask0+0xa>
	  }
	  else{
		  osDelay(100);
 800171e:	2064      	movs	r0, #100	; 0x64
 8001720:	f008 fcf2 	bl	800a108 <osDelay>
	  if(d >= 20 && flag_down == 0){
 8001724:	e6f5      	b.n	8001512 <StartTask0+0xa>
 8001726:	bf00      	nop
 8001728:	20000388 	.word	0x20000388
 800172c:	20000380 	.word	0x20000380
 8001730:	20000390 	.word	0x20000390
 8001734:	ff0000ff 	.word	0xff0000ff
 8001738:	2000038c 	.word	0x2000038c
 800173c:	08013d44 	.word	0x08013d44
 8001740:	20000398 	.word	0x20000398
 8001744:	3fd80000 	.word	0x3fd80000
 8001748:	20000394 	.word	0x20000394
 800174c:	3fe80000 	.word	0x3fe80000
 8001750:	3fec0000 	.word	0x3fec0000

08001754 <StartTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
	char U[2];
	int u;
  /* Infinite loop */
  for(;;)
  {
	  u = i / 2;
 800175c:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <StartTask1+0x44>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	0fda      	lsrs	r2, r3, #31
 8001762:	4413      	add	r3, r2
 8001764:	105b      	asrs	r3, r3, #1
 8001766:	60fb      	str	r3, [r7, #12]
	  sprintf(U, "%d", u);
 8001768:	f107 0308 	add.w	r3, r7, #8
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	490b      	ldr	r1, [pc, #44]	; (800179c <StartTask1+0x48>)
 8001770:	4618      	mov	r0, r3
 8001772:	f00e fce5 	bl	8010140 <siprintf>

	  CDC_Transmit_HS((uint8_t*)U, 2);
 8001776:	f107 0308 	add.w	r3, r7, #8
 800177a:	2102      	movs	r1, #2
 800177c:	4618      	mov	r0, r3
 800177e:	f00d f9c1 	bl	800eb04 <CDC_Transmit_HS>
	  HAL_Delay(20);
 8001782:	2014      	movs	r0, #20
 8001784:	f002 f9e8 	bl	8003b58 <HAL_Delay>
	  CDC_Transmit_HS((uint8_t*)" cm\n", 5);
 8001788:	2105      	movs	r1, #5
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <StartTask1+0x4c>)
 800178c:	f00d f9ba 	bl	800eb04 <CDC_Transmit_HS>
	  osDelay(200);
 8001790:	20c8      	movs	r0, #200	; 0xc8
 8001792:	f008 fcb9 	bl	800a108 <osDelay>
	  u = i / 2;
 8001796:	e7e1      	b.n	800175c <StartTask1+0x8>
 8001798:	20000390 	.word	0x20000390
 800179c:	08013d50 	.word	0x08013d50
 80017a0:	08013d54 	.word	0x08013d54
 80017a4:	00000000 	.word	0x00000000

080017a8 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	float DATA[3] = {0};
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  for(;;)
  {
	  L3GD20_ReadXYZAngRate(DATA);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4618      	mov	r0, r3
 80017c2:	f000 fda9 	bl	8002318 <L3GD20_ReadXYZAngRate>

	  DATA[0] = DATA[0] - X_drift;
 80017c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ca:	eeb1 7a03 	vmov.f32	s14, #19	; 0x40980000  4.750
 80017ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017d2:	edc7 7a03 	vstr	s15, [r7, #12]
	  DATA[1] = DATA[1] - Y_drift;
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe fec5 	bl	8000568 <__aeabi_f2d>
 80017de:	a35d      	add	r3, pc, #372	; (adr r3, 8001954 <StartTask2+0x1ac>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f7fe fd60 	bl	80002a8 <__aeabi_dsub>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	f7ff fa0a 	bl	8000c08 <__aeabi_d2f>
 80017f4:	4603      	mov	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]
	  DATA[2] = DATA[2] - Z_drift;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe feb4 	bl	8000568 <__aeabi_f2d>
 8001800:	a356      	add	r3, pc, #344	; (adr r3, 800195c <StartTask2+0x1b4>)
 8001802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001806:	f7fe fd4f 	bl	80002a8 <__aeabi_dsub>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4610      	mov	r0, r2
 8001810:	4619      	mov	r1, r3
 8001812:	f7ff f9f9 	bl	8000c08 <__aeabi_d2f>
 8001816:	4603      	mov	r3, r0
 8001818:	617b      	str	r3, [r7, #20]

	  if (d < 15){
 800181a:	4b41      	ldr	r3, [pc, #260]	; (8001920 <StartTask2+0x178>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b0e      	cmp	r3, #14
 8001820:	dc79      	bgt.n	8001916 <StartTask2+0x16e>
		  if (DATA[0] > 20){
 8001822:	edd7 7a03 	vldr	s15, [r7, #12]
 8001826:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800182a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800182e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001832:	dd0f      	ble.n	8001854 <StartTask2+0xac>
			  if (DATA[0] > X_up) X_up = DATA[0];
 8001834:	ed97 7a03 	vldr	s14, [r7, #12]
 8001838:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <StartTask2+0x17c>)
 800183a:	edd3 7a00 	vldr	s15, [r3]
 800183e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	dd02      	ble.n	800184e <StartTask2+0xa6>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a36      	ldr	r2, [pc, #216]	; (8001924 <StartTask2+0x17c>)
 800184c:	6013      	str	r3, [r2, #0]
			  flag_up = 1;
 800184e:	4b36      	ldr	r3, [pc, #216]	; (8001928 <StartTask2+0x180>)
 8001850:	2201      	movs	r2, #1
 8001852:	601a      	str	r2, [r3, #0]
		  }

		  if (-20 <= DATA[0] && DATA[0] <= 20 && flag_up == 1){
 8001854:	edd7 7a03 	vldr	s15, [r7, #12]
 8001858:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800185c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	db32      	blt.n	80018cc <StartTask2+0x124>
 8001866:	edd7 7a03 	vldr	s15, [r7, #12]
 800186a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800186e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	d829      	bhi.n	80018cc <StartTask2+0x124>
 8001878:	4b2b      	ldr	r3, [pc, #172]	; (8001928 <StartTask2+0x180>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d125      	bne.n	80018cc <StartTask2+0x124>
			  d = distance(X_up);
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <StartTask2+0x17c>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	eeb0 0a67 	vmov.f32	s0, s15
 800188a:	f7ff fbc5 	bl	8001018 <distance>
 800188e:	4603      	mov	r3, r0
 8001890:	4a23      	ldr	r2, [pc, #140]	; (8001920 <StartTask2+0x178>)
 8001892:	6013      	str	r3, [r2, #0]
			  sp = speed(X_up);
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <StartTask2+0x17c>)
 8001896:	edd3 7a00 	vldr	s15, [r3]
 800189a:	eeb0 0a67 	vmov.f32	s0, s15
 800189e:	f7ff fcdd 	bl	800125c <speed>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4a21      	ldr	r2, [pc, #132]	; (800192c <StartTask2+0x184>)
 80018a6:	6013      	str	r3, [r2, #0]
			  if(flag_start == 1){score++;}
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <StartTask2+0x188>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d104      	bne.n	80018ba <StartTask2+0x112>
 80018b0:	4b20      	ldr	r3, [pc, #128]	; (8001934 <StartTask2+0x18c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	3301      	adds	r3, #1
 80018b6:	4a1f      	ldr	r2, [pc, #124]	; (8001934 <StartTask2+0x18c>)
 80018b8:	6013      	str	r3, [r2, #0]

			  flag_up = 0;
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <StartTask2+0x180>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
			  flag_down = 0;
 80018c0:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <StartTask2+0x190>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	601a      	str	r2, [r3, #0]
			  flag_start = 1;
 80018c6:	4b1a      	ldr	r3, [pc, #104]	; (8001930 <StartTask2+0x188>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	601a      	str	r2, [r3, #0]
		  }

		  if(d < 0){
 80018cc:	4b14      	ldr	r3, [pc, #80]	; (8001920 <StartTask2+0x178>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	da20      	bge.n	8001916 <StartTask2+0x16e>
			  BSP_LCD_Clear(LCD_COLOR_BLUE);
 80018d4:	4819      	ldr	r0, [pc, #100]	; (800193c <StartTask2+0x194>)
 80018d6:	f001 fa2b 	bl	8002d30 <BSP_LCD_Clear>
			  sprintf(X,"Score: %d", score);
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <StartTask2+0x18c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4917      	ldr	r1, [pc, #92]	; (8001940 <StartTask2+0x198>)
 80018e2:	4818      	ldr	r0, [pc, #96]	; (8001944 <StartTask2+0x19c>)
 80018e4:	f00e fc2c 	bl	8010140 <siprintf>
			  BSP_LCD_DisplayStringAtLine(0, (uint8_t *)X);
 80018e8:	4916      	ldr	r1, [pc, #88]	; (8001944 <StartTask2+0x19c>)
 80018ea:	2000      	movs	r0, #0
 80018ec:	f001 fb4a 	bl	8002f84 <BSP_LCD_DisplayStringAtLine>
			  BSP_LCD_DisplayStringAt(0, 120, (uint8_t *)"GAME OVER!", CENTER_MODE);
 80018f0:	2301      	movs	r3, #1
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <StartTask2+0x1a0>)
 80018f4:	2178      	movs	r1, #120	; 0x78
 80018f6:	2000      	movs	r0, #0
 80018f8:	f001 fa86 	bl	8002e08 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 160, (uint8_t *)"Press reset", CENTER_MODE);
 80018fc:	2301      	movs	r3, #1
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <StartTask2+0x1a4>)
 8001900:	21a0      	movs	r1, #160	; 0xa0
 8001902:	2000      	movs	r0, #0
 8001904:	f001 fa80 	bl	8002e08 <BSP_LCD_DisplayStringAt>
			  BSP_LCD_DisplayStringAt(0, 180, (uint8_t *)"button to play", RIGHT_MODE);
 8001908:	2302      	movs	r3, #2
 800190a:	4a11      	ldr	r2, [pc, #68]	; (8001950 <StartTask2+0x1a8>)
 800190c:	21b4      	movs	r1, #180	; 0xb4
 800190e:	2000      	movs	r0, #0
 8001910:	f001 fa7a 	bl	8002e08 <BSP_LCD_DisplayStringAt>
			  while(1);
 8001914:	e7fe      	b.n	8001914 <StartTask2+0x16c>
		  }
	  }
	  	osDelay(100);
 8001916:	2064      	movs	r0, #100	; 0x64
 8001918:	f008 fbf6 	bl	800a108 <osDelay>
	  L3GD20_ReadXYZAngRate(DATA);
 800191c:	e74e      	b.n	80017bc <StartTask2+0x14>
 800191e:	bf00      	nop
 8001920:	20000388 	.word	0x20000388
 8001924:	20000378 	.word	0x20000378
 8001928:	2000037c 	.word	0x2000037c
 800192c:	20000394 	.word	0x20000394
 8001930:	20000384 	.word	0x20000384
 8001934:	2000038c 	.word	0x2000038c
 8001938:	20000380 	.word	0x20000380
 800193c:	ff0000ff 	.word	0xff0000ff
 8001940:	08013d44 	.word	0x08013d44
 8001944:	20000398 	.word	0x20000398
 8001948:	08013d5c 	.word	0x08013d5c
 800194c:	08013d68 	.word	0x08013d68
 8001950:	08013d74 	.word	0x08013d74
 8001954:	cccccccd 	.word	0xcccccccd
 8001958:	4006cccc 	.word	0x4006cccc
 800195c:	66666666 	.word	0x66666666
 8001960:	3ff26666 	.word	0x3ff26666

08001964 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001976:	f002 f8cf 	bl	8003b18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40001000 	.word	0x40001000

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_MspInit+0x54>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_MspInit+0x54>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0f      	ldr	r3, [pc, #60]	; (80019e8 <HAL_MspInit+0x54>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <HAL_MspInit+0x54>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <HAL_MspInit+0x54>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_MspInit+0x54>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019d2:	2200      	movs	r2, #0
 80019d4:	210f      	movs	r1, #15
 80019d6:	f06f 0001 	mvn.w	r0, #1
 80019da:	f002 f999 	bl	8003d10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08e      	sub	sp, #56	; 0x38
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019fc:	2300      	movs	r3, #0
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_InitTick+0xe4>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_InitTick+0xe4>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_InitTick+0xe4>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a18:	f107 0210 	add.w	r2, r7, #16
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 f99e 	bl	8006d64 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a28:	6a3b      	ldr	r3, [r7, #32]
 8001a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d103      	bne.n	8001a3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a32:	f005 f983 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 8001a36:	6378      	str	r0, [r7, #52]	; 0x34
 8001a38:	e004      	b.n	8001a44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a3a:	f005 f97f 	bl	8006d3c <HAL_RCC_GetPCLK1Freq>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <HAL_InitTick+0xe8>)
 8001a48:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <HAL_InitTick+0xf0>)
 8001a56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a58:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a66:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a78:	4817      	ldr	r0, [pc, #92]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a7a:	f006 fa0f 	bl	8007e9c <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001a84:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a8c:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <HAL_InitTick+0xec>)
 8001a8e:	f006 fa5f 	bl	8007f50 <HAL_TIM_Base_Start_IT>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d111      	bne.n	8001ac4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa0:	2036      	movs	r0, #54	; 0x36
 8001aa2:	f002 f951 	bl	8003d48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d808      	bhi.n	8001abe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001aac:	2200      	movs	r2, #0
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	2036      	movs	r0, #54	; 0x36
 8001ab2:	f002 f92d 	bl	8003d10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <HAL_InitTick+0xf4>)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6013      	str	r3, [r2, #0]
 8001abc:	e002      	b.n	8001ac4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3738      	adds	r7, #56	; 0x38
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	431bde83 	.word	0x431bde83
 8001ad8:	200003a4 	.word	0x200003a4
 8001adc:	40001000 	.word	0x40001000
 8001ae0:	20000080 	.word	0x20000080

08001ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ae8:	f005 f96e 	bl	8006dc8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x8>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b18:	4802      	ldr	r0, [pc, #8]	; (8001b24 <TIM6_DAC_IRQHandler+0x10>)
 8001b1a:	f006 fa89 	bl	8008030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200003a4 	.word	0x200003a4

08001b28 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <OTG_HS_IRQHandler+0x10>)
 8001b2e:	f003 fb5c 	bl	80051ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000647c 	.word	0x2000647c

08001b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
	return 1;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_kill>:

int _kill(int pid, int sig)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b56:	f00d fc33 	bl	800f3c0 <__errno>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2216      	movs	r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_exit>:

void _exit (int status)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b74:	f04f 31ff 	mov.w	r1, #4294967295
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ffe7 	bl	8001b4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b7e:	e7fe      	b.n	8001b7e <_exit+0x12>

08001b80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00a      	b.n	8001ba8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b92:	f3af 8000 	nop.w
 8001b96:	4601      	mov	r1, r0
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	60ba      	str	r2, [r7, #8]
 8001b9e:	b2ca      	uxtb	r2, r1
 8001ba0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	617b      	str	r3, [r7, #20]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dbf0      	blt.n	8001b92 <_read+0x12>
	}

return len;
 8001bb0:	687b      	ldr	r3, [r7, #4]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3718      	adds	r7, #24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	60f8      	str	r0, [r7, #12]
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	e009      	b.n	8001be0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60ba      	str	r2, [r7, #8]
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	dbf1      	blt.n	8001bcc <_write+0x12>
	}
	return len;
 8001be8:	687b      	ldr	r3, [r7, #4]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <_close>:

int _close(int file)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
	return -1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
 8001c12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c1a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <_isatty>:

int _isatty(int file)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	return 1;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3714      	adds	r7, #20
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c64:	4a14      	ldr	r2, [pc, #80]	; (8001cb8 <_sbrk+0x5c>)
 8001c66:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <_sbrk+0x60>)
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c70:	4b13      	ldr	r3, [pc, #76]	; (8001cc0 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c78:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <_sbrk+0x64>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	; (8001cc4 <_sbrk+0x68>)
 8001c7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <_sbrk+0x64>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d207      	bcs.n	8001c9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c8c:	f00d fb98 	bl	800f3c0 <__errno>
 8001c90:	4603      	mov	r3, r0
 8001c92:	220c      	movs	r2, #12
 8001c94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	e009      	b.n	8001cb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <_sbrk+0x64>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ca2:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <_sbrk+0x64>)
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4413      	add	r3, r2
 8001caa:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <_sbrk+0x64>)
 8001cac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cae:	68fb      	ldr	r3, [r7, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20030000 	.word	0x20030000
 8001cbc:	00000400 	.word	0x00000400
 8001cc0:	200003ec 	.word	0x200003ec
 8001cc4:	20006bb8 	.word	0x20006bb8

08001cc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <SystemInit+0x20>)
 8001cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <SystemInit+0x20>)
 8001cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cf0:	480d      	ldr	r0, [pc, #52]	; (8001d28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cf2:	490e      	ldr	r1, [pc, #56]	; (8001d2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	; (8001d30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d08:	4c0b      	ldr	r4, [pc, #44]	; (8001d38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d16:	f7ff ffd7 	bl	8001cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f00d fb57 	bl	800f3cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff faf5 	bl	800130c <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d24:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d2c:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8001d30:	08015ddc 	.word	0x08015ddc
  ldr r2, =_sbss
 8001d34:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8001d38:	20006bb8 	.word	0x20006bb8

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>

08001d3e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d42:	f000 fc85 	bl	8002650 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001d46:	20ca      	movs	r0, #202	; 0xca
 8001d48:	f000 f95d 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001d4c:	20c3      	movs	r0, #195	; 0xc3
 8001d4e:	f000 f967 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001d52:	2008      	movs	r0, #8
 8001d54:	f000 f964 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001d58:	2050      	movs	r0, #80	; 0x50
 8001d5a:	f000 f961 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001d5e:	20cf      	movs	r0, #207	; 0xcf
 8001d60:	f000 f951 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f000 f95b 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001d6a:	20c1      	movs	r0, #193	; 0xc1
 8001d6c:	f000 f958 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001d70:	2030      	movs	r0, #48	; 0x30
 8001d72:	f000 f955 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001d76:	20ed      	movs	r0, #237	; 0xed
 8001d78:	f000 f945 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001d7c:	2064      	movs	r0, #100	; 0x64
 8001d7e:	f000 f94f 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001d82:	2003      	movs	r0, #3
 8001d84:	f000 f94c 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001d88:	2012      	movs	r0, #18
 8001d8a:	f000 f949 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001d8e:	2081      	movs	r0, #129	; 0x81
 8001d90:	f000 f946 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001d94:	20e8      	movs	r0, #232	; 0xe8
 8001d96:	f000 f936 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001d9a:	2085      	movs	r0, #133	; 0x85
 8001d9c:	f000 f940 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001da0:	2000      	movs	r0, #0
 8001da2:	f000 f93d 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001da6:	2078      	movs	r0, #120	; 0x78
 8001da8:	f000 f93a 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001dac:	20cb      	movs	r0, #203	; 0xcb
 8001dae:	f000 f92a 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001db2:	2039      	movs	r0, #57	; 0x39
 8001db4:	f000 f934 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001db8:	202c      	movs	r0, #44	; 0x2c
 8001dba:	f000 f931 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001dbe:	2000      	movs	r0, #0
 8001dc0:	f000 f92e 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001dc4:	2034      	movs	r0, #52	; 0x34
 8001dc6:	f000 f92b 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001dca:	2002      	movs	r0, #2
 8001dcc:	f000 f928 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001dd0:	20f7      	movs	r0, #247	; 0xf7
 8001dd2:	f000 f918 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001dd6:	2020      	movs	r0, #32
 8001dd8:	f000 f922 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001ddc:	20ea      	movs	r0, #234	; 0xea
 8001dde:	f000 f912 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001de2:	2000      	movs	r0, #0
 8001de4:	f000 f91c 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f000 f919 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001dee:	20b1      	movs	r0, #177	; 0xb1
 8001df0:	f000 f909 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001df4:	2000      	movs	r0, #0
 8001df6:	f000 f913 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001dfa:	201b      	movs	r0, #27
 8001dfc:	f000 f910 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e00:	20b6      	movs	r0, #182	; 0xb6
 8001e02:	f000 f900 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e06:	200a      	movs	r0, #10
 8001e08:	f000 f90a 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001e0c:	20a2      	movs	r0, #162	; 0xa2
 8001e0e:	f000 f907 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001e12:	20c0      	movs	r0, #192	; 0xc0
 8001e14:	f000 f8f7 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e18:	2010      	movs	r0, #16
 8001e1a:	f000 f901 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001e1e:	20c1      	movs	r0, #193	; 0xc1
 8001e20:	f000 f8f1 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001e24:	2010      	movs	r0, #16
 8001e26:	f000 f8fb 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001e2a:	20c5      	movs	r0, #197	; 0xc5
 8001e2c:	f000 f8eb 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001e30:	2045      	movs	r0, #69	; 0x45
 8001e32:	f000 f8f5 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001e36:	2015      	movs	r0, #21
 8001e38:	f000 f8f2 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001e3c:	20c7      	movs	r0, #199	; 0xc7
 8001e3e:	f000 f8e2 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001e42:	2090      	movs	r0, #144	; 0x90
 8001e44:	f000 f8ec 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001e48:	2036      	movs	r0, #54	; 0x36
 8001e4a:	f000 f8dc 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001e4e:	20c8      	movs	r0, #200	; 0xc8
 8001e50:	f000 f8e6 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001e54:	20f2      	movs	r0, #242	; 0xf2
 8001e56:	f000 f8d6 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f8e0 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001e60:	20b0      	movs	r0, #176	; 0xb0
 8001e62:	f000 f8d0 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 8001e66:	20c2      	movs	r0, #194	; 0xc2
 8001e68:	f000 f8da 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001e6c:	20b6      	movs	r0, #182	; 0xb6
 8001e6e:	f000 f8ca 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001e72:	200a      	movs	r0, #10
 8001e74:	f000 f8d4 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001e78:	20a7      	movs	r0, #167	; 0xa7
 8001e7a:	f000 f8d1 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001e7e:	2027      	movs	r0, #39	; 0x27
 8001e80:	f000 f8ce 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001e84:	2004      	movs	r0, #4
 8001e86:	f000 f8cb 	bl	8002020 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001e8a:	202a      	movs	r0, #42	; 0x2a
 8001e8c:	f000 f8bb 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001e90:	2000      	movs	r0, #0
 8001e92:	f000 f8c5 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e96:	2000      	movs	r0, #0
 8001e98:	f000 f8c2 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f000 f8bf 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001ea2:	20ef      	movs	r0, #239	; 0xef
 8001ea4:	f000 f8bc 	bl	8002020 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001ea8:	202b      	movs	r0, #43	; 0x2b
 8001eaa:	f000 f8ac 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f000 f8b6 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f000 f8b3 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001eba:	2001      	movs	r0, #1
 8001ebc:	f000 f8b0 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001ec0:	203f      	movs	r0, #63	; 0x3f
 8001ec2:	f000 f8ad 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001ec6:	20f6      	movs	r0, #246	; 0xf6
 8001ec8:	f000 f89d 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ecc:	2001      	movs	r0, #1
 8001ece:	f000 f8a7 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001ed2:	2000      	movs	r0, #0
 8001ed4:	f000 f8a4 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001ed8:	2006      	movs	r0, #6
 8001eda:	f000 f8a1 	bl	8002020 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001ede:	202c      	movs	r0, #44	; 0x2c
 8001ee0:	f000 f891 	bl	8002006 <ili9341_WriteReg>
  LCD_Delay(200);
 8001ee4:	20c8      	movs	r0, #200	; 0xc8
 8001ee6:	f000 fca1 	bl	800282c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001eea:	2026      	movs	r0, #38	; 0x26
 8001eec:	f000 f88b 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f000 f895 	bl	8002020 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001ef6:	20e0      	movs	r0, #224	; 0xe0
 8001ef8:	f000 f885 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001efc:	200f      	movs	r0, #15
 8001efe:	f000 f88f 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001f02:	2029      	movs	r0, #41	; 0x29
 8001f04:	f000 f88c 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001f08:	2024      	movs	r0, #36	; 0x24
 8001f0a:	f000 f889 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f0e:	200c      	movs	r0, #12
 8001f10:	f000 f886 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001f14:	200e      	movs	r0, #14
 8001f16:	f000 f883 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f1a:	2009      	movs	r0, #9
 8001f1c:	f000 f880 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001f20:	204e      	movs	r0, #78	; 0x4e
 8001f22:	f000 f87d 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 f87a 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001f2c:	203c      	movs	r0, #60	; 0x3c
 8001f2e:	f000 f877 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001f32:	2009      	movs	r0, #9
 8001f34:	f000 f874 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001f38:	2013      	movs	r0, #19
 8001f3a:	f000 f871 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f3e:	2005      	movs	r0, #5
 8001f40:	f000 f86e 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001f44:	2017      	movs	r0, #23
 8001f46:	f000 f86b 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f4a:	2011      	movs	r0, #17
 8001f4c:	f000 f868 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f50:	2000      	movs	r0, #0
 8001f52:	f000 f865 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001f56:	20e1      	movs	r0, #225	; 0xe1
 8001f58:	f000 f855 	bl	8002006 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f000 f85f 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001f62:	2016      	movs	r0, #22
 8001f64:	f000 f85c 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f68:	201b      	movs	r0, #27
 8001f6a:	f000 f859 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001f6e:	2004      	movs	r0, #4
 8001f70:	f000 f856 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001f74:	2011      	movs	r0, #17
 8001f76:	f000 f853 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001f7a:	2007      	movs	r0, #7
 8001f7c:	f000 f850 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001f80:	2031      	movs	r0, #49	; 0x31
 8001f82:	f000 f84d 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001f86:	2033      	movs	r0, #51	; 0x33
 8001f88:	f000 f84a 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001f8c:	2042      	movs	r0, #66	; 0x42
 8001f8e:	f000 f847 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001f92:	2005      	movs	r0, #5
 8001f94:	f000 f844 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001f98:	200c      	movs	r0, #12
 8001f9a:	f000 f841 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001f9e:	200a      	movs	r0, #10
 8001fa0:	f000 f83e 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001fa4:	2028      	movs	r0, #40	; 0x28
 8001fa6:	f000 f83b 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001faa:	202f      	movs	r0, #47	; 0x2f
 8001fac:	f000 f838 	bl	8002020 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001fb0:	200f      	movs	r0, #15
 8001fb2:	f000 f835 	bl	8002020 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001fb6:	2011      	movs	r0, #17
 8001fb8:	f000 f825 	bl	8002006 <ili9341_WriteReg>
  LCD_Delay(200);
 8001fbc:	20c8      	movs	r0, #200	; 0xc8
 8001fbe:	f000 fc35 	bl	800282c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fc2:	2029      	movs	r0, #41	; 0x29
 8001fc4:	f000 f81f 	bl	8002006 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001fc8:	202c      	movs	r0, #44	; 0x2c
 8001fca:	f000 f81c 	bl	8002006 <ili9341_WriteReg>
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001fd6:	f000 fb3b 	bl	8002650 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001fda:	2103      	movs	r1, #3
 8001fdc:	20d3      	movs	r0, #211	; 0xd3
 8001fde:	f000 f82c 	bl	800203a <ili9341_ReadData>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	b29b      	uxth	r3, r3
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001fee:	2029      	movs	r0, #41	; 0x29
 8001ff0:	f000 f809 	bl	8002006 <ili9341_WriteReg>
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001ffc:	2028      	movs	r0, #40	; 0x28
 8001ffe:	f000 f802 	bl	8002006 <ili9341_WriteReg>
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}

08002006 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	4603      	mov	r3, r0
 800200e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 fbb6 	bl	8002784 <LCD_IO_WriteReg>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800202a:	88fb      	ldrh	r3, [r7, #6]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fb87 	bl	8002740 <LCD_IO_WriteData>
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b082      	sub	sp, #8
 800203e:	af00      	add	r7, sp, #0
 8002040:	4603      	mov	r3, r0
 8002042:	460a      	mov	r2, r1
 8002044:	80fb      	strh	r3, [r7, #6]
 8002046:	4613      	mov	r3, r2
 8002048:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800204a:	797a      	ldrb	r2, [r7, #5]
 800204c:	88fb      	ldrh	r3, [r7, #6]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f000 fbb9 	bl	80027c8 <LCD_IO_ReadData>
 8002056:	4603      	mov	r3, r0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002064:	23f0      	movs	r3, #240	; 0xf0
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002074:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8002078:	4618      	mov	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8002082:	b580      	push	{r7, lr}
 8002084:	b084      	sub	sp, #16
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800208c:	2300      	movs	r3, #0
 800208e:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8002090:	f000 fbd8 	bl	8002844 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002094:	88fb      	ldrh	r3, [r7, #6]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800209a:	f107 030f 	add.w	r3, r7, #15
 800209e:	2201      	movs	r2, #1
 80020a0:	2120      	movs	r1, #32
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 fc1a 	bl	80028dc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	0a1b      	lsrs	r3, r3, #8
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80020b2:	f107 030f 	add.w	r3, r7, #15
 80020b6:	2201      	movs	r2, #1
 80020b8:	2123      	movs	r1, #35	; 0x23
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 fc0e 	bl	80028dc <GYRO_IO_Write>
}
 80020c0:	bf00      	nop
 80020c2:	3710      	adds	r7, #16
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80020dc:	f000 fbb2 	bl	8002844 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 80020e0:	1dfb      	adds	r3, r7, #7
 80020e2:	2201      	movs	r2, #1
 80020e4:	210f      	movs	r1, #15
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fc2a 	bl	8002940 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 80020ec:	79fb      	ldrb	r3, [r7, #7]
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80020fc:	1dfb      	adds	r3, r7, #7
 80020fe:	2201      	movs	r2, #1
 8002100:	2124      	movs	r1, #36	; 0x24
 8002102:	4618      	mov	r0, r3
 8002104:	f000 fc1c 	bl	8002940 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800210e:	b2db      	uxtb	r3, r3
 8002110:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002112:	1dfb      	adds	r3, r7, #7
 8002114:	2201      	movs	r2, #1
 8002116:	2124      	movs	r1, #36	; 0x24
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fbdf 	bl	80028dc <GYRO_IO_Write>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8002126:	b580      	push	{r7, lr}
 8002128:	b084      	sub	sp, #16
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8002134:	88fb      	ldrh	r3, [r7, #6]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800213a:	f107 030f 	add.w	r3, r7, #15
 800213e:	2201      	movs	r2, #1
 8002140:	2120      	movs	r1, #32
 8002142:	4618      	mov	r0, r3
 8002144:	f000 fbca 	bl	80028dc <GYRO_IO_Write>
}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800215a:	2300      	movs	r3, #0
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	2300      	movs	r3, #0
 8002160:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8002162:	f107 030f 	add.w	r3, r7, #15
 8002166:	2201      	movs	r2, #1
 8002168:	2130      	movs	r1, #48	; 0x30
 800216a:	4618      	mov	r0, r3
 800216c:	f000 fbe8 	bl	8002940 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8002170:	f107 030e 	add.w	r3, r7, #14
 8002174:	2201      	movs	r2, #1
 8002176:	2122      	movs	r1, #34	; 0x22
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fbe1 	bl	8002940 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
 8002180:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002184:	b2db      	uxtb	r3, r3
 8002186:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	121b      	asrs	r3, r3, #8
 800218e:	b25a      	sxtb	r2, r3
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	b25b      	sxtb	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	b25b      	sxtb	r3, r3
 8002198:	b2db      	uxtb	r3, r3
 800219a:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	f023 0320 	bic.w	r3, r3, #32
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80021a6:	88fb      	ldrh	r3, [r7, #6]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	7bbb      	ldrb	r3, [r7, #14]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80021b2:	f107 030f 	add.w	r3, r7, #15
 80021b6:	2201      	movs	r2, #1
 80021b8:	2130      	movs	r1, #48	; 0x30
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 fb8e 	bl	80028dc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80021c0:	f107 030e 	add.w	r3, r7, #14
 80021c4:	2201      	movs	r2, #1
 80021c6:	2122      	movs	r1, #34	; 0x22
 80021c8:	4618      	mov	r0, r3
 80021ca:	f000 fb87 	bl	80028dc <GYRO_IO_Write>
}
 80021ce:	bf00      	nop
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b084      	sub	sp, #16
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80021e0:	f107 030f 	add.w	r3, r7, #15
 80021e4:	2201      	movs	r2, #1
 80021e6:	2122      	movs	r1, #34	; 0x22
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fba9 	bl	8002940 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 80021fe:	7bfb      	ldrb	r3, [r7, #15]
 8002200:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002204:	b2db      	uxtb	r3, r3
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e00c      	b.n	8002224 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800220a:	79fb      	ldrb	r3, [r7, #7]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d109      	bne.n	8002224 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	f023 0308 	bic.w	r3, r3, #8
 8002216:	b2db      	uxtb	r3, r3
 8002218:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	b2db      	uxtb	r3, r3
 8002222:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002224:	f107 030f 	add.w	r3, r7, #15
 8002228:	2201      	movs	r2, #1
 800222a:	2122      	movs	r1, #34	; 0x22
 800222c:	4618      	mov	r0, r3
 800222e:	f000 fb55 	bl	80028dc <GYRO_IO_Write>
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	4603      	mov	r3, r0
 8002242:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8002244:	f107 030f 	add.w	r3, r7, #15
 8002248:	2201      	movs	r2, #1
 800224a:	2122      	movs	r1, #34	; 0x22
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fb77 	bl	8002940 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d107      	bne.n	8002268 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225e:	b2db      	uxtb	r3, r3
 8002260:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
 8002264:	73fb      	strb	r3, [r7, #15]
 8002266:	e009      	b.n	800227c <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d106      	bne.n	800227c <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	f023 0308 	bic.w	r3, r3, #8
 8002274:	b2db      	uxtb	r3, r3
 8002276:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800227c:	f107 030f 	add.w	r3, r7, #15
 8002280:	2201      	movs	r2, #1
 8002282:	2122      	movs	r1, #34	; 0x22
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fb29 	bl	80028dc <GYRO_IO_Write>
}
 800228a:	bf00      	nop
 800228c:	3710      	adds	r7, #16
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800229c:	f107 030f 	add.w	r3, r7, #15
 80022a0:	2201      	movs	r2, #1
 80022a2:	2121      	movs	r1, #33	; 0x21
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fb4b 	bl	8002940 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80022be:	f107 030f 	add.w	r3, r7, #15
 80022c2:	2201      	movs	r2, #1
 80022c4:	2121      	movs	r1, #33	; 0x21
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fb08 	bl	80028dc <GYRO_IO_Write>
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80022de:	f107 030f 	add.w	r3, r7, #15
 80022e2:	2201      	movs	r2, #1
 80022e4:	2124      	movs	r1, #36	; 0x24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 fb2a 	bl	8002940 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	f023 0310 	bic.w	r3, r3, #16
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8002300:	f107 030f 	add.w	r3, r7, #15
 8002304:	2201      	movs	r2, #1
 8002306:	2124      	movs	r1, #36	; 0x24
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fae7 	bl	80028dc <GYRO_IO_Write>
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
	...

08002318 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	b08b      	sub	sp, #44	; 0x2c
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8002320:	2300      	movs	r3, #0
 8002322:	61bb      	str	r3, [r7, #24]
 8002324:	2300      	movs	r3, #0
 8002326:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 8002328:	f107 0310 	add.w	r3, r7, #16
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8002332:	2300      	movs	r3, #0
 8002334:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 800233c:	2300      	movs	r3, #0
 800233e:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8002340:	f107 030f 	add.w	r3, r7, #15
 8002344:	2201      	movs	r2, #1
 8002346:	2123      	movs	r1, #35	; 0x23
 8002348:	4618      	mov	r0, r3
 800234a:	f000 faf9 	bl	8002940 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 800234e:	f107 0318 	add.w	r3, r7, #24
 8002352:	2206      	movs	r2, #6
 8002354:	2128      	movs	r1, #40	; 0x28
 8002356:	4618      	mov	r0, r3
 8002358:	f000 faf2 	bl	8002940 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	2b00      	cmp	r3, #0
 8002364:	d123      	bne.n	80023ae <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 8002366:	2300      	movs	r3, #0
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	e01c      	b.n	80023a6 <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	3301      	adds	r3, #1
 8002372:	3328      	adds	r3, #40	; 0x28
 8002374:	443b      	add	r3, r7
 8002376:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800237a:	b29b      	uxth	r3, r3
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	b29a      	uxth	r2, r3
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	3328      	adds	r3, #40	; 0x28
 8002386:	443b      	add	r3, r7
 8002388:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800238c:	b29b      	uxth	r3, r3
 800238e:	4413      	add	r3, r2
 8002390:	b29b      	uxth	r3, r3
 8002392:	b21a      	sxth	r2, r3
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	3328      	adds	r3, #40	; 0x28
 800239a:	443b      	add	r3, r7
 800239c:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	3301      	adds	r3, #1
 80023a4:	623b      	str	r3, [r7, #32]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	dddf      	ble.n	800236c <L3GD20_ReadXYZAngRate+0x54>
 80023ac:	e022      	b.n	80023f4 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	623b      	str	r3, [r7, #32]
 80023b2:	e01c      	b.n	80023ee <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	3328      	adds	r3, #40	; 0x28
 80023ba:	443b      	add	r3, r7
 80023bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b29a      	uxth	r2, r3
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	3301      	adds	r3, #1
 80023cc:	3328      	adds	r3, #40	; 0x28
 80023ce:	443b      	add	r3, r7
 80023d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	4413      	add	r3, r2
 80023d8:	b29b      	uxth	r3, r3
 80023da:	b21a      	sxth	r2, r3
 80023dc:	6a3b      	ldr	r3, [r7, #32]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	3328      	adds	r3, #40	; 0x28
 80023e2:	443b      	add	r3, r7
 80023e4:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	3301      	adds	r3, #1
 80023ec:	623b      	str	r3, [r7, #32]
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	dddf      	ble.n	80023b4 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80023fa:	2b20      	cmp	r3, #32
 80023fc:	d00c      	beq.n	8002418 <L3GD20_ReadXYZAngRate+0x100>
 80023fe:	2b20      	cmp	r3, #32
 8002400:	dc0d      	bgt.n	800241e <L3GD20_ReadXYZAngRate+0x106>
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <L3GD20_ReadXYZAngRate+0xf4>
 8002406:	2b10      	cmp	r3, #16
 8002408:	d003      	beq.n	8002412 <L3GD20_ReadXYZAngRate+0xfa>
 800240a:	e008      	b.n	800241e <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 800240c:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <L3GD20_ReadXYZAngRate+0x170>)
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002410:	e005      	b.n	800241e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8002412:	4b1e      	ldr	r3, [pc, #120]	; (800248c <L3GD20_ReadXYZAngRate+0x174>)
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8002416:	e002      	b.n	800241e <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <L3GD20_ReadXYZAngRate+0x178>)
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800241c:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800241e:	2300      	movs	r3, #0
 8002420:	623b      	str	r3, [r7, #32]
 8002422:	e025      	b.n	8002470 <L3GD20_ReadXYZAngRate+0x158>
  {
    pfData[i]=(float)(RawData[i] * sensitivity * 0.001);
 8002424:	6a3b      	ldr	r3, [r7, #32]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	3328      	adds	r3, #40	; 0x28
 800242a:	443b      	add	r3, r7
 800242c:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002438:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800243c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002440:	ee17 0a90 	vmov	r0, s15
 8002444:	f7fe f890 	bl	8000568 <__aeabi_f2d>
 8002448:	a30d      	add	r3, pc, #52	; (adr r3, 8002480 <L3GD20_ReadXYZAngRate+0x168>)
 800244a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244e:	f7fe f8e3 	bl	8000618 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4610      	mov	r0, r2
 8002458:	4619      	mov	r1, r3
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	18d4      	adds	r4, r2, r3
 8002462:	f7fe fbd1 	bl	8000c08 <__aeabi_d2f>
 8002466:	4603      	mov	r3, r0
 8002468:	6023      	str	r3, [r4, #0]
  for(i=0; i<3; i++)
 800246a:	6a3b      	ldr	r3, [r7, #32]
 800246c:	3301      	adds	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	6a3b      	ldr	r3, [r7, #32]
 8002472:	2b02      	cmp	r3, #2
 8002474:	ddd6      	ble.n	8002424 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	372c      	adds	r7, #44	; 0x2c
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}
 8002480:	d2f1a9fc 	.word	0xd2f1a9fc
 8002484:	3f50624d 	.word	0x3f50624d
 8002488:	410c0000 	.word	0x410c0000
 800248c:	418c0000 	.word	0x418c0000
 8002490:	428c0000 	.word	0x428c0000

08002494 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002498:	4819      	ldr	r0, [pc, #100]	; (8002500 <SPIx_Init+0x6c>)
 800249a:	f005 fbc0 	bl	8007c1e <HAL_SPI_GetState>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d12b      	bne.n	80024fc <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 80024a4:	4b16      	ldr	r3, [pc, #88]	; (8002500 <SPIx_Init+0x6c>)
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <SPIx_Init+0x70>)
 80024a8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <SPIx_Init+0x6c>)
 80024ac:	2218      	movs	r2, #24
 80024ae:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <SPIx_Init+0x6c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <SPIx_Init+0x6c>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80024bc:	4b10      	ldr	r3, [pc, #64]	; (8002500 <SPIx_Init+0x6c>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80024c2:	4b0f      	ldr	r3, [pc, #60]	; (8002500 <SPIx_Init+0x6c>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80024c8:	4b0d      	ldr	r3, [pc, #52]	; (8002500 <SPIx_Init+0x6c>)
 80024ca:	2207      	movs	r2, #7
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 80024ce:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <SPIx_Init+0x6c>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <SPIx_Init+0x6c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 80024da:	4b09      	ldr	r3, [pc, #36]	; (8002500 <SPIx_Init+0x6c>)
 80024dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024e0:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 80024e2:	4b07      	ldr	r3, [pc, #28]	; (8002500 <SPIx_Init+0x6c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <SPIx_Init+0x6c>)
 80024ea:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024ee:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <SPIx_Init+0x6c>)
 80024f2:	f000 f873 	bl	80025dc <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 80024f6:	4802      	ldr	r0, [pc, #8]	; (8002500 <SPIx_Init+0x6c>)
 80024f8:	f004 fedd 	bl	80072b6 <HAL_SPI_Init>
  } 
}
 80024fc:	bf00      	nop
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200003f0 	.word	0x200003f0
 8002504:	40015000 	.word	0x40015000

08002508 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	4603      	mov	r3, r0
 8002510:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	b29a      	uxth	r2, r3
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <SPIx_Read+0x38>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f107 0108 	add.w	r1, r7, #8
 8002522:	4808      	ldr	r0, [pc, #32]	; (8002544 <SPIx_Read+0x3c>)
 8002524:	f005 f8c8 	bl	80076b8 <HAL_SPI_Receive>
 8002528:	4603      	mov	r3, r0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002532:	f000 f847 	bl	80025c4 <SPIx_Error>
  }
  
  return readvalue;
 8002536:	68bb      	ldr	r3, [r7, #8]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000070 	.word	0x20000070
 8002544:	200003f0 	.word	0x200003f0

08002548 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	4603      	mov	r3, r0
 8002550:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <SPIx_Write+0x34>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	1db9      	adds	r1, r7, #6
 800255c:	2201      	movs	r2, #1
 800255e:	4808      	ldr	r0, [pc, #32]	; (8002580 <SPIx_Write+0x38>)
 8002560:	f004 ff6e 	bl	8007440 <HAL_SPI_Transmit>
 8002564:	4603      	mov	r3, r0
 8002566:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 800256e:	f000 f829 	bl	80025c4 <SPIx_Error>
  }
}
 8002572:	bf00      	nop
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000070 	.word	0x20000070
 8002580:	200003f0 	.word	0x200003f0

08002584 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8002592:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <SPIx_WriteRead+0x38>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f107 020f 	add.w	r2, r7, #15
 800259a:	1df9      	adds	r1, r7, #7
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	2301      	movs	r3, #1
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <SPIx_WriteRead+0x3c>)
 80025a2:	f005 f99a 	bl	80078da <HAL_SPI_TransmitReceive>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 80025ac:	f000 f80a 	bl	80025c4 <SPIx_Error>
  }
  
  return receivedbyte;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	20000070 	.word	0x20000070
 80025c0:	200003f0 	.word	0x200003f0

080025c4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 80025c8:	4803      	ldr	r0, [pc, #12]	; (80025d8 <SPIx_Error+0x14>)
 80025ca:	f004 fefd 	bl	80073c8 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 80025ce:	f7ff ff61 	bl	8002494 <SPIx_Init>
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200003f0 	.word	0x200003f0

080025dc <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <SPIx_MspInit+0x6c>)
 80025ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ec:	4a16      	ldr	r2, [pc, #88]	; (8002648 <SPIx_MspInit+0x6c>)
 80025ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f2:	6453      	str	r3, [r2, #68]	; 0x44
 80025f4:	4b14      	ldr	r3, [pc, #80]	; (8002648 <SPIx_MspInit+0x6c>)
 80025f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fc:	613b      	str	r3, [r7, #16]
 80025fe:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <SPIx_MspInit+0x6c>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	4a0f      	ldr	r2, [pc, #60]	; (8002648 <SPIx_MspInit+0x6c>)
 800260a:	f043 0320 	orr.w	r3, r3, #32
 800260e:	6313      	str	r3, [r2, #48]	; 0x30
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <SPIx_MspInit+0x6c>)
 8002612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	60fb      	str	r3, [r7, #12]
 800261a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 800261c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002620:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002626:	2302      	movs	r3, #2
 8002628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 800262a:	2301      	movs	r3, #1
 800262c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 800262e:	2305      	movs	r3, #5
 8002630:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4804      	ldr	r0, [pc, #16]	; (800264c <SPIx_MspInit+0x70>)
 800263a:	f001 ffe7 	bl	800460c <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40021400 	.word	0x40021400

08002650 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002656:	4b36      	ldr	r3, [pc, #216]	; (8002730 <LCD_IO_Init+0xe0>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d164      	bne.n	8002728 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 800265e:	4b34      	ldr	r3, [pc, #208]	; (8002730 <LCD_IO_Init+0xe0>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
 8002668:	4b32      	ldr	r3, [pc, #200]	; (8002734 <LCD_IO_Init+0xe4>)
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	4a31      	ldr	r2, [pc, #196]	; (8002734 <LCD_IO_Init+0xe4>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6313      	str	r3, [r2, #48]	; 0x30
 8002674:	4b2f      	ldr	r3, [pc, #188]	; (8002734 <LCD_IO_Init+0xe4>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	60bb      	str	r3, [r7, #8]
 800267e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002684:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800268e:	2302      	movs	r3, #2
 8002690:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002692:	f107 030c 	add.w	r3, r7, #12
 8002696:	4619      	mov	r1, r3
 8002698:	4827      	ldr	r0, [pc, #156]	; (8002738 <LCD_IO_Init+0xe8>)
 800269a:	f001 ffb7 	bl	800460c <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	607b      	str	r3, [r7, #4]
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <LCD_IO_Init+0xe4>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	4a23      	ldr	r2, [pc, #140]	; (8002734 <LCD_IO_Init+0xe4>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	6313      	str	r3, [r2, #48]	; 0x30
 80026ae:	4b21      	ldr	r3, [pc, #132]	; (8002734 <LCD_IO_Init+0xe4>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 80026ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026be:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80026c8:	2302      	movs	r3, #2
 80026ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 80026cc:	f107 030c 	add.w	r3, r7, #12
 80026d0:	4619      	mov	r1, r3
 80026d2:	4819      	ldr	r0, [pc, #100]	; (8002738 <LCD_IO_Init+0xe8>)
 80026d4:	f001 ff9a 	bl	800460c <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80026d8:	2300      	movs	r3, #0
 80026da:	603b      	str	r3, [r7, #0]
 80026dc:	4b15      	ldr	r3, [pc, #84]	; (8002734 <LCD_IO_Init+0xe4>)
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	4a14      	ldr	r2, [pc, #80]	; (8002734 <LCD_IO_Init+0xe4>)
 80026e2:	f043 0304 	orr.w	r3, r3, #4
 80026e6:	6313      	str	r3, [r2, #48]	; 0x30
 80026e8:	4b12      	ldr	r3, [pc, #72]	; (8002734 <LCD_IO_Init+0xe4>)
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	603b      	str	r3, [r7, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80026f4:	2304      	movs	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80026f8:	2301      	movs	r3, #1
 80026fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002700:	2302      	movs	r3, #2
 8002702:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002704:	f107 030c 	add.w	r3, r7, #12
 8002708:	4619      	mov	r1, r3
 800270a:	480c      	ldr	r0, [pc, #48]	; (800273c <LCD_IO_Init+0xec>)
 800270c:	f001 ff7e 	bl	800460c <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002710:	2200      	movs	r2, #0
 8002712:	2104      	movs	r1, #4
 8002714:	4809      	ldr	r0, [pc, #36]	; (800273c <LCD_IO_Init+0xec>)
 8002716:	f002 f925 	bl	8004964 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 800271a:	2201      	movs	r2, #1
 800271c:	2104      	movs	r1, #4
 800271e:	4807      	ldr	r0, [pc, #28]	; (800273c <LCD_IO_Init+0xec>)
 8002720:	f002 f920 	bl	8004964 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002724:	f7ff feb6 	bl	8002494 <SPIx_Init>
  }
}
 8002728:	bf00      	nop
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000448 	.word	0x20000448
 8002734:	40023800 	.word	0x40023800
 8002738:	40020c00 	.word	0x40020c00
 800273c:	40020800 	.word	0x40020800

08002740 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 800274a:	2201      	movs	r2, #1
 800274c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002750:	480a      	ldr	r0, [pc, #40]	; (800277c <LCD_IO_WriteData+0x3c>)
 8002752:	f002 f907 	bl	8004964 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002756:	2200      	movs	r2, #0
 8002758:	2104      	movs	r1, #4
 800275a:	4809      	ldr	r0, [pc, #36]	; (8002780 <LCD_IO_WriteData+0x40>)
 800275c:	f002 f902 	bl	8004964 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002760:	88fb      	ldrh	r3, [r7, #6]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff fef0 	bl	8002548 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002768:	2201      	movs	r2, #1
 800276a:	2104      	movs	r1, #4
 800276c:	4804      	ldr	r0, [pc, #16]	; (8002780 <LCD_IO_WriteData+0x40>)
 800276e:	f002 f8f9 	bl	8004964 <HAL_GPIO_WritePin>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40020800 	.word	0x40020800

08002784 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800278e:	2200      	movs	r2, #0
 8002790:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002794:	480a      	ldr	r0, [pc, #40]	; (80027c0 <LCD_IO_WriteReg+0x3c>)
 8002796:	f002 f8e5 	bl	8004964 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800279a:	2200      	movs	r2, #0
 800279c:	2104      	movs	r1, #4
 800279e:	4809      	ldr	r0, [pc, #36]	; (80027c4 <LCD_IO_WriteReg+0x40>)
 80027a0:	f002 f8e0 	bl	8004964 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fecd 	bl	8002548 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 80027ae:	2201      	movs	r2, #1
 80027b0:	2104      	movs	r1, #4
 80027b2:	4804      	ldr	r0, [pc, #16]	; (80027c4 <LCD_IO_WriteReg+0x40>)
 80027b4:	f002 f8d6 	bl	8004964 <HAL_GPIO_WritePin>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	40020800 	.word	0x40020800

080027c8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	460a      	mov	r2, r1
 80027d2:	80fb      	strh	r3, [r7, #6]
 80027d4:	4613      	mov	r3, r2
 80027d6:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 80027dc:	2200      	movs	r2, #0
 80027de:	2104      	movs	r1, #4
 80027e0:	4810      	ldr	r0, [pc, #64]	; (8002824 <LCD_IO_ReadData+0x5c>)
 80027e2:	f002 f8bf 	bl	8004964 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 80027e6:	2200      	movs	r2, #0
 80027e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027ec:	480e      	ldr	r0, [pc, #56]	; (8002828 <LCD_IO_ReadData+0x60>)
 80027ee:	f002 f8b9 	bl	8004964 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7ff fea7 	bl	8002548 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 80027fa:	797b      	ldrb	r3, [r7, #5]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fe83 	bl	8002508 <SPIx_Read>
 8002802:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002804:	2201      	movs	r2, #1
 8002806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <LCD_IO_ReadData+0x60>)
 800280c:	f002 f8aa 	bl	8004964 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002810:	2201      	movs	r2, #1
 8002812:	2104      	movs	r1, #4
 8002814:	4803      	ldr	r0, [pc, #12]	; (8002824 <LCD_IO_ReadData+0x5c>)
 8002816:	f002 f8a5 	bl	8004964 <HAL_GPIO_WritePin>
  
  return readvalue;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40020800 	.word	0x40020800
 8002828:	40020c00 	.word	0x40020c00

0800282c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f001 f98f 	bl	8003b58 <HAL_Delay>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800284a:	2300      	movs	r3, #0
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	4b20      	ldr	r3, [pc, #128]	; (80028d0 <GYRO_IO_Init+0x8c>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	4a1f      	ldr	r2, [pc, #124]	; (80028d0 <GYRO_IO_Init+0x8c>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6313      	str	r3, [r2, #48]	; 0x30
 800285a:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <GYRO_IO_Init+0x8c>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	60bb      	str	r3, [r7, #8]
 8002864:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8002866:	2302      	movs	r3, #2
 8002868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800286a:	2301      	movs	r3, #1
 800286c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8002872:	2301      	movs	r3, #1
 8002874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	4815      	ldr	r0, [pc, #84]	; (80028d4 <GYRO_IO_Init+0x90>)
 800287e:	f001 fec5 	bl	800460c <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 8002882:	2201      	movs	r2, #1
 8002884:	2102      	movs	r1, #2
 8002886:	4813      	ldr	r0, [pc, #76]	; (80028d4 <GYRO_IO_Init+0x90>)
 8002888:	f002 f86c 	bl	8004964 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <GYRO_IO_Init+0x8c>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	4a0e      	ldr	r2, [pc, #56]	; (80028d0 <GYRO_IO_Init+0x8c>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6313      	str	r3, [r2, #48]	; 0x30
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <GYRO_IO_Init+0x8c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	607b      	str	r3, [r7, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80028a8:	2306      	movs	r3, #6
 80028aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80028b0:	2302      	movs	r3, #2
 80028b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80028b8:	f107 030c 	add.w	r3, r7, #12
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <GYRO_IO_Init+0x94>)
 80028c0:	f001 fea4 	bl	800460c <HAL_GPIO_Init>

  SPIx_Init();
 80028c4:	f7ff fde6 	bl	8002494 <SPIx_Init>
}
 80028c8:	bf00      	nop
 80028ca:	3720      	adds	r7, #32
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40020800 	.word	0x40020800
 80028d8:	40020000 	.word	0x40020000

080028dc <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	70fb      	strb	r3, [r7, #3]
 80028e8:	4613      	mov	r3, r2
 80028ea:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 80028ec:	883b      	ldrh	r3, [r7, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d903      	bls.n	80028fa <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f8:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80028fa:	2200      	movs	r2, #0
 80028fc:	2102      	movs	r1, #2
 80028fe:	480f      	ldr	r0, [pc, #60]	; (800293c <GYRO_IO_Write+0x60>)
 8002900:	f002 f830 	bl	8004964 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002904:	78fb      	ldrb	r3, [r7, #3]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff fe3c 	bl	8002584 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800290c:	e00a      	b.n	8002924 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fe36 	bl	8002584 <SPIx_WriteRead>
    NumByteToWrite--;
 8002918:	883b      	ldrh	r3, [r7, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	3301      	adds	r3, #1
 8002922:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002924:	883b      	ldrh	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f1      	bne.n	800290e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800292a:	2201      	movs	r2, #1
 800292c:	2102      	movs	r1, #2
 800292e:	4803      	ldr	r0, [pc, #12]	; (800293c <GYRO_IO_Write+0x60>)
 8002930:	f002 f818 	bl	8004964 <HAL_GPIO_WritePin>
}
 8002934:	bf00      	nop
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	40020800 	.word	0x40020800

08002940 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	70fb      	strb	r3, [r7, #3]
 800294c:	4613      	mov	r3, r2
 800294e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002950:	883b      	ldrh	r3, [r7, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d904      	bls.n	8002960 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002956:	78fb      	ldrb	r3, [r7, #3]
 8002958:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800295c:	70fb      	strb	r3, [r7, #3]
 800295e:	e003      	b.n	8002968 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8002960:	78fb      	ldrb	r3, [r7, #3]
 8002962:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002966:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002968:	2200      	movs	r2, #0
 800296a:	2102      	movs	r1, #2
 800296c:	4810      	ldr	r0, [pc, #64]	; (80029b0 <GYRO_IO_Read+0x70>)
 800296e:	f001 fff9 	bl	8004964 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fe05 	bl	8002584 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 800297a:	e00c      	b.n	8002996 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 800297c:	2000      	movs	r0, #0
 800297e:	f7ff fe01 	bl	8002584 <SPIx_WriteRead>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 800298a:	883b      	ldrh	r3, [r7, #0]
 800298c:	3b01      	subs	r3, #1
 800298e:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3301      	adds	r3, #1
 8002994:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002996:	883b      	ldrh	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ef      	bne.n	800297c <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800299c:	2201      	movs	r2, #1
 800299e:	2102      	movs	r1, #2
 80029a0:	4803      	ldr	r0, [pc, #12]	; (80029b0 <GYRO_IO_Read+0x70>)
 80029a2:	f001 ffdf 	bl	8004964 <HAL_GPIO_WritePin>
}  
 80029a6:	bf00      	nop
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40020800 	.word	0x40020800

080029b4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80029be:	2300      	movs	r3, #0
 80029c0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 80029c2:	2300      	movs	r3, #0
 80029c4:	703b      	strb	r3, [r7, #0]
 80029c6:	2300      	movs	r3, #0
 80029c8:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80029ca:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <BSP_GYRO_Init+0xc4>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	4798      	blx	r3
 80029d0:	4603      	mov	r3, r0
 80029d2:	2bd4      	cmp	r3, #212	; 0xd4
 80029d4:	d005      	beq.n	80029e2 <BSP_GYRO_Init+0x2e>
 80029d6:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <BSP_GYRO_Init+0xc4>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4798      	blx	r3
 80029dc:	4603      	mov	r3, r0
 80029de:	2bd5      	cmp	r3, #213	; 0xd5
 80029e0:	d145      	bne.n	8002a6e <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <BSP_GYRO_Init+0xc8>)
 80029e4:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <BSP_GYRO_Init+0xc4>)
 80029e6:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 80029e8:	2308      	movs	r3, #8
 80029ea:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 80029ec:	2300      	movs	r3, #0
 80029ee:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 80029f0:	2307      	movs	r3, #7
 80029f2:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 80029f4:	2330      	movs	r3, #48	; 0x30
 80029f6:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80029f8:	2300      	movs	r3, #0
 80029fa:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 80029fc:	2300      	movs	r3, #0
 80029fe:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002a00:	2310      	movs	r3, #16
 8002a02:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a04:	793a      	ldrb	r2, [r7, #4]
 8002a06:	797b      	ldrb	r3, [r7, #5]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a0c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002a12:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002a14:	4313      	orrs	r3, r2
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a1a:	7a3a      	ldrb	r2, [r7, #8]
 8002a1c:	7a7b      	ldrb	r3, [r7, #9]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002a22:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002a24:	4313      	orrs	r3, r2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	89bb      	ldrh	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002a34:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <BSP_GYRO_Init+0xc8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	89ba      	ldrh	r2, [r7, #12]
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002a40:	2300      	movs	r3, #0
 8002a42:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002a48:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 8002a4a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <BSP_GYRO_Init+0xc8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a58:	89ba      	ldrh	r2, [r7, #12]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <BSP_GYRO_Init+0xc8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a66:	2010      	movs	r0, #16
 8002a68:	4798      	blx	r3

    ret = GYRO_OK;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2000003c 	.word	0x2000003c
 8002a7c:	2000044c 	.word	0x2000044c

08002a80 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002a84:	4b2d      	ldr	r3, [pc, #180]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a86:	4a2e      	ldr	r2, [pc, #184]	; (8002b40 <BSP_LCD_Init+0xc0>)
 8002a88:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002a8a:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a8c:	2209      	movs	r2, #9
 8002a8e:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002a90:	4b2a      	ldr	r3, [pc, #168]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a92:	2201      	movs	r2, #1
 8002a94:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002a96:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a98:	221d      	movs	r2, #29
 8002a9a:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002a9c:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002aa4:	f240 120d 	movw	r2, #269	; 0x10d
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002aac:	f240 1243 	movw	r2, #323	; 0x143
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ab4:	f240 1217 	movw	r2, #279	; 0x117
 8002ab8:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002aba:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002abc:	f240 1247 	movw	r2, #327	; 0x147
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002ac2:	4b1e      	ldr	r3, [pc, #120]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002adc:	2208      	movs	r2, #8
 8002ade:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002ae2:	22c0      	movs	r2, #192	; 0xc0
 8002ae4:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002ae8:	2204      	movs	r2, #4
 8002aea:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002aec:	4b15      	ldr	r3, [pc, #84]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002aee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002af2:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002af4:	4813      	ldr	r0, [pc, #76]	; (8002b44 <BSP_LCD_Init+0xc4>)
 8002af6:	f004 f983 	bl	8006e00 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002b00:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002b12:	f000 fc27 	bl	8003364 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002b16:	4809      	ldr	r0, [pc, #36]	; (8002b3c <BSP_LCD_Init+0xbc>)
 8002b18:	f001 ff3e 	bl	8004998 <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	; (8002b48 <BSP_LCD_Init+0xc8>)
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <BSP_LCD_Init+0xcc>)
 8002b20:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002b22:	4b09      	ldr	r3, [pc, #36]	; (8002b48 <BSP_LCD_Init+0xc8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002b2a:	f000 fe09 	bl	8003740 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b2e:	4808      	ldr	r0, [pc, #32]	; (8002b50 <BSP_LCD_Init+0xd0>)
 8002b30:	f000 f8ce 	bl	8002cd0 <BSP_LCD_SetFont>

  return LCD_OK;
 8002b34:	2300      	movs	r3, #0
}  
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000450 	.word	0x20000450
 8002b40:	40016800 	.word	0x40016800
 8002b44:	20000538 	.word	0x20000538
 8002b48:	20000584 	.word	0x20000584
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	20000074 	.word	0x20000074

08002b54 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <BSP_LCD_GetXSize+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5e:	4798      	blx	r3
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	20000584 	.word	0x20000584

08002b6c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002b70:	4b03      	ldr	r3, [pc, #12]	; (8002b80 <BSP_LCD_GetYSize+0x14>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b76:	4798      	blx	r3
 8002b78:	4603      	mov	r3, r0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000584 	.word	0x20000584

08002b84 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b090      	sub	sp, #64	; 0x40
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002b90:	2300      	movs	r3, #0
 8002b92:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002b94:	f7ff ffde 	bl	8002b54 <BSP_LCD_GetXSize>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002ba0:	f7ff ffe4 	bl	8002b6c <BSP_LCD_GetYSize>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002bb0:	23ff      	movs	r3, #255	; 0xff
 8002bb2:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002bca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002bd0:	2307      	movs	r3, #7
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002bd4:	f7ff ffbe 	bl	8002b54 <BSP_LCD_GetXSize>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002bdc:	f7ff ffc6 	bl	8002b6c <BSP_LCD_GetYSize>
 8002be0:	4603      	mov	r3, r0
 8002be2:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002be4:	88fa      	ldrh	r2, [r7, #6]
 8002be6:	f107 030c 	add.w	r3, r7, #12
 8002bea:	4619      	mov	r1, r3
 8002bec:	4814      	ldr	r0, [pc, #80]	; (8002c40 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002bee:	f001 ffad 	bl	8004b4c <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002bf2:	88fa      	ldrh	r2, [r7, #6]
 8002bf4:	4913      	ldr	r1, [pc, #76]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3304      	adds	r3, #4
 8002c02:	f04f 32ff 	mov.w	r2, #4294967295
 8002c06:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3308      	adds	r3, #8
 8002c18:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002c1a:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002c1c:	88fa      	ldrh	r2, [r7, #6]
 8002c1e:	4909      	ldr	r1, [pc, #36]	; (8002c44 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002c2e:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002c30:	4803      	ldr	r0, [pc, #12]	; (8002c40 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002c32:	f001 ffc9 	bl	8004bc8 <HAL_LTDC_EnableDither>
}
 8002c36:	bf00      	nop
 8002c38:	3740      	adds	r7, #64	; 0x40
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000450 	.word	0x20000450
 8002c44:	2000056c 	.word	0x2000056c
 8002c48:	20000074 	.word	0x20000074

08002c4c <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <BSP_LCD_SelectLayer+0x1c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000568 	.word	0x20000568

08002c6c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <BSP_LCD_SetTextColor+0x28>)
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	4907      	ldr	r1, [pc, #28]	; (8002c98 <BSP_LCD_SetTextColor+0x2c>)
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	601a      	str	r2, [r3, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	20000568 	.word	0x20000568
 8002c98:	2000056c 	.word	0x2000056c

08002c9c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <BSP_LCD_SetBackColor+0x2c>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4908      	ldr	r1, [pc, #32]	; (8002ccc <BSP_LCD_SetBackColor+0x30>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	601a      	str	r2, [r3, #0]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000568 	.word	0x20000568
 8002ccc:	2000056c 	.word	0x2000056c

08002cd0 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002cd8:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <BSP_LCD_SetFont+0x2c>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	4908      	ldr	r1, [pc, #32]	; (8002d00 <BSP_LCD_SetFont+0x30>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	005b      	lsls	r3, r3, #1
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	3308      	adds	r3, #8
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	20000568 	.word	0x20000568
 8002d00:	2000056c 	.word	0x2000056c

08002d04 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002d08:	4b07      	ldr	r3, [pc, #28]	; (8002d28 <BSP_LCD_GetFont+0x24>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	4907      	ldr	r1, [pc, #28]	; (8002d2c <BSP_LCD_GetFont+0x28>)
 8002d0e:	4613      	mov	r3, r2
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3308      	adds	r3, #8
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000568 	.word	0x20000568
 8002d2c:	2000056c 	.word	0x2000056c

08002d30 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af02      	add	r7, sp, #8
 8002d36:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <BSP_LCD_Clear+0x48>)
 8002d3a:	681c      	ldr	r4, [r3, #0]
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <BSP_LCD_Clear+0x48>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <BSP_LCD_Clear+0x4c>)
 8002d42:	2134      	movs	r1, #52	; 0x34
 8002d44:	fb01 f303 	mul.w	r3, r1, r3
 8002d48:	4413      	add	r3, r2
 8002d4a:	335c      	adds	r3, #92	; 0x5c
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	461e      	mov	r6, r3
 8002d50:	f7ff ff00 	bl	8002b54 <BSP_LCD_GetXSize>
 8002d54:	4605      	mov	r5, r0
 8002d56:	f7ff ff09 	bl	8002b6c <BSP_LCD_GetYSize>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2300      	movs	r3, #0
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	4613      	mov	r3, r2
 8002d66:	462a      	mov	r2, r5
 8002d68:	4631      	mov	r1, r6
 8002d6a:	4620      	mov	r0, r4
 8002d6c:	f000 fcb0 	bl	80036d0 <FillBuffer>
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d78:	20000568 	.word	0x20000568
 8002d7c:	20000450 	.word	0x20000450

08002d80 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	80fb      	strh	r3, [r7, #6]
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	80bb      	strh	r3, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d92:	4b1b      	ldr	r3, [pc, #108]	; (8002e00 <BSP_LCD_DisplayChar+0x80>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	491b      	ldr	r1, [pc, #108]	; (8002e04 <BSP_LCD_DisplayChar+0x84>)
 8002d98:	4613      	mov	r3, r2
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	4413      	add	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	3308      	adds	r3, #8
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6819      	ldr	r1, [r3, #0]
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <BSP_LCD_DisplayChar+0x80>)
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4c14      	ldr	r4, [pc, #80]	; (8002e04 <BSP_LCD_DisplayChar+0x84>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4423      	add	r3, r4
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dc4:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <BSP_LCD_DisplayChar+0x80>)
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4c0d      	ldr	r4, [pc, #52]	; (8002e04 <BSP_LCD_DisplayChar+0x84>)
 8002dce:	4613      	mov	r3, r2
 8002dd0:	005b      	lsls	r3, r3, #1
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4423      	add	r3, r4
 8002dd8:	3308      	adds	r3, #8
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	889b      	ldrh	r3, [r3, #4]
 8002dde:	3307      	adds	r3, #7
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	da00      	bge.n	8002de6 <BSP_LCD_DisplayChar+0x66>
 8002de4:	3307      	adds	r3, #7
 8002de6:	10db      	asrs	r3, r3, #3
 8002de8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002dec:	18ca      	adds	r2, r1, r3
 8002dee:	88b9      	ldrh	r1, [r7, #4]
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f000 fbb2 	bl	800355c <DrawChar>
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	20000568 	.word	0x20000568
 8002e04:	2000056c 	.word	0x2000056c

08002e08 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8002e08:	b5b0      	push	{r4, r5, r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60ba      	str	r2, [r7, #8]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4603      	mov	r3, r0
 8002e14:	81fb      	strh	r3, [r7, #14]
 8002e16:	460b      	mov	r3, r1
 8002e18:	81bb      	strh	r3, [r7, #12]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	83fb      	strh	r3, [r7, #30]
 8002e22:	2300      	movs	r3, #0
 8002e24:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e32:	e002      	b.n	8002e3a <BSP_LCD_DisplayStringAt+0x32>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	3301      	adds	r3, #1
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	617a      	str	r2, [r7, #20]
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f6      	bne.n	8002e34 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002e46:	f7ff fe85 	bl	8002b54 <BSP_LCD_GetXSize>
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	4b4b      	ldr	r3, [pc, #300]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	484b      	ldr	r0, [pc, #300]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4403      	add	r3, r0
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	889b      	ldrh	r3, [r3, #4]
 8002e62:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e66:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d01c      	beq.n	8002ea8 <BSP_LCD_DisplayStringAt+0xa0>
 8002e6e:	2b03      	cmp	r3, #3
 8002e70:	dc33      	bgt.n	8002eda <BSP_LCD_DisplayStringAt+0xd2>
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d002      	beq.n	8002e7c <BSP_LCD_DisplayStringAt+0x74>
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d019      	beq.n	8002eae <BSP_LCD_DisplayStringAt+0xa6>
 8002e7a:	e02e      	b.n	8002eda <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	1ad1      	subs	r1, r2, r3
 8002e82:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	483e      	ldr	r0, [pc, #248]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002e88:	4613      	mov	r3, r2
 8002e8a:	005b      	lsls	r3, r3, #1
 8002e8c:	4413      	add	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4403      	add	r3, r0
 8002e92:	3308      	adds	r3, #8
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	889b      	ldrh	r3, [r3, #4]
 8002e98:	fb01 f303 	mul.w	r3, r1, r3
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	89fb      	ldrh	r3, [r7, #14]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	83fb      	strh	r3, [r7, #30]
      break;
 8002ea6:	e01b      	b.n	8002ee0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8002ea8:	89fb      	ldrh	r3, [r7, #14]
 8002eaa:	83fb      	strh	r3, [r7, #30]
      break;
 8002eac:	e018      	b.n	8002ee0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	b299      	uxth	r1, r3
 8002eb6:	4b31      	ldr	r3, [pc, #196]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4831      	ldr	r0, [pc, #196]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4403      	add	r3, r0
 8002ec6:	3308      	adds	r3, #8
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	889b      	ldrh	r3, [r3, #4]
 8002ecc:	fb11 f303 	smulbb	r3, r1, r3
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	89fb      	ldrh	r3, [r7, #14]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ed8:	e002      	b.n	8002ee0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  default:
    {
      refcolumn = X;
 8002eda:	89fb      	ldrh	r3, [r7, #14]
 8002edc:	83fb      	strh	r3, [r7, #30]
      break;
 8002ede:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002ee0:	e01a      	b.n	8002f18 <BSP_LCD_DisplayStringAt+0x110>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	781a      	ldrb	r2, [r3, #0]
 8002ee6:	89b9      	ldrh	r1, [r7, #12]
 8002ee8:	8bfb      	ldrh	r3, [r7, #30]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff ff48 	bl	8002d80 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002ef0:	4b22      	ldr	r3, [pc, #136]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4922      	ldr	r1, [pc, #136]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	3308      	adds	r3, #8
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	889a      	ldrh	r2, [r3, #4]
 8002f06:	8bfb      	ldrh	r3, [r7, #30]
 8002f08:	4413      	add	r3, r2
 8002f0a:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
    i++;
 8002f12:	8bbb      	ldrh	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2dc      	uxtb	r4, r3
 8002f26:	f7ff fe15 	bl	8002b54 <BSP_LCD_GetXSize>
 8002f2a:	8bb9      	ldrh	r1, [r7, #28]
 8002f2c:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4d13      	ldr	r5, [pc, #76]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002f32:	4613      	mov	r3, r2
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	442b      	add	r3, r5
 8002f3c:	3308      	adds	r3, #8
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	889b      	ldrh	r3, [r3, #4]
 8002f42:	fb01 f303 	mul.w	r3, r1, r3
 8002f46:	1ac3      	subs	r3, r0, r3
 8002f48:	b299      	uxth	r1, r3
 8002f4a:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <BSP_LCD_DisplayStringAt+0x174>)
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	480c      	ldr	r0, [pc, #48]	; (8002f80 <BSP_LCD_DisplayStringAt+0x178>)
 8002f50:	4613      	mov	r3, r2
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4403      	add	r3, r0
 8002f5a:	3308      	adds	r3, #8
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	889b      	ldrh	r3, [r3, #4]
 8002f60:	4299      	cmp	r1, r3
 8002f62:	bf2c      	ite	cs
 8002f64:	2301      	movcs	r3, #1
 8002f66:	2300      	movcc	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	4023      	ands	r3, r4
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1b7      	bne.n	8002ee2 <BSP_LCD_DisplayStringAt+0xda>
  }  
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7c:	20000568 	.word	0x20000568
 8002f80:	2000056c 	.word	0x2000056c

08002f84 <BSP_LCD_DisplayStringAtLine>:
  * @brief  Displays a maximum of 20 char on the LCD.
  * @param  Line: the Line where to display the character shape
  * @param  ptr: pointer to string to display on LCD
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	6039      	str	r1, [r7, #0]
 8002f8e:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f90:	f7ff feb8 	bl	8002d04 <BSP_LCD_GetFont>
 8002f94:	4603      	mov	r3, r0
 8002f96:	88db      	ldrh	r3, [r3, #6]
 8002f98:	88fa      	ldrh	r2, [r7, #6]
 8002f9a:	fb12 f303 	smulbb	r3, r2, r3
 8002f9e:	b299      	uxth	r1, r3
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7ff ff2f 	bl	8002e08 <BSP_LCD_DisplayStringAt>
}
 8002faa:	bf00      	nop
 8002fac:	3708      	adds	r7, #8
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <BSP_LCD_DrawHLine>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Length: line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fb4:	b5b0      	push	{r4, r5, r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	4603      	mov	r3, r0
 8002fbc:	80fb      	strh	r3, [r7, #6]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	80bb      	strh	r3, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	807b      	strh	r3, [r7, #2]
  uint32_t xaddress = 0;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fca:	4b16      	ldr	r3, [pc, #88]	; (8003024 <BSP_LCD_DrawHLine+0x70>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a16      	ldr	r2, [pc, #88]	; (8003028 <BSP_LCD_DrawHLine+0x74>)
 8002fd0:	2134      	movs	r1, #52	; 0x34
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	335c      	adds	r3, #92	; 0x5c
 8002fda:	681c      	ldr	r4, [r3, #0]
 8002fdc:	f7ff fdba 	bl	8002b54 <BSP_LCD_GetXSize>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	88bb      	ldrh	r3, [r7, #4]
 8002fe4:	fb03 f202 	mul.w	r2, r3, r2
 8002fe8:	88fb      	ldrh	r3, [r7, #6]
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4423      	add	r3, r4
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Write line */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <BSP_LCD_DrawHLine+0x70>)
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	68f9      	ldr	r1, [r7, #12]
 8002ff8:	887c      	ldrh	r4, [r7, #2]
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <BSP_LCD_DrawHLine+0x70>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4d0b      	ldr	r5, [pc, #44]	; (800302c <BSP_LCD_DrawHLine+0x78>)
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	442b      	add	r3, r5
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2301      	movs	r3, #1
 8003014:	4622      	mov	r2, r4
 8003016:	f000 fb5b 	bl	80036d0 <FillBuffer>
}
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bdb0      	pop	{r4, r5, r7, pc}
 8003022:	bf00      	nop
 8003024:	20000568 	.word	0x20000568
 8003028:	20000450 	.word	0x20000450
 800302c:	2000056c 	.word	0x2000056c

08003030 <BSP_LCD_DrawCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b087      	sub	sp, #28
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	80fb      	strh	r3, [r7, #6]
 800303a:	460b      	mov	r3, r1
 800303c:	80bb      	strh	r3, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	807b      	strh	r3, [r7, #2]
  int32_t  d;/* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003042:	887b      	ldrh	r3, [r7, #2]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	f1c3 0303 	rsb	r3, r3, #3
 800304a:	617b      	str	r3, [r7, #20]
  curx = 0;
 800304c:	2300      	movs	r3, #0
 800304e:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	60fb      	str	r3, [r7, #12]
  
  while (curx <= cury)
 8003054:	e0c7      	b.n	80031e6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	b29a      	uxth	r2, r3
 800305a:	88fb      	ldrh	r3, [r7, #6]
 800305c:	4413      	add	r3, r2
 800305e:	b298      	uxth	r0, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	b29b      	uxth	r3, r3
 8003064:	88ba      	ldrh	r2, [r7, #4]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	4b64      	ldr	r3, [pc, #400]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4c64      	ldr	r4, [pc, #400]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4423      	add	r3, r4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	f000 fa47 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	b29b      	uxth	r3, r3
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	b298      	uxth	r0, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	b29b      	uxth	r3, r3
 8003090:	88ba      	ldrh	r2, [r7, #4]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b299      	uxth	r1, r3
 8003096:	4b59      	ldr	r3, [pc, #356]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4c59      	ldr	r4, [pc, #356]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4423      	add	r3, r4
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f000 fa31 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	88fb      	ldrh	r3, [r7, #6]
 80030b4:	4413      	add	r3, r2
 80030b6:	b298      	uxth	r0, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	88ba      	ldrh	r2, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	b299      	uxth	r1, r3
 80030c2:	4b4e      	ldr	r3, [pc, #312]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	4c4e      	ldr	r4, [pc, #312]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80030c8:	4613      	mov	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4423      	add	r3, r4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	461a      	mov	r2, r3
 80030d6:	f000 fa1b 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	88fa      	ldrh	r2, [r7, #6]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	b298      	uxth	r0, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	88ba      	ldrh	r2, [r7, #4]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b299      	uxth	r1, r3
 80030ee:	4b43      	ldr	r3, [pc, #268]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4c43      	ldr	r4, [pc, #268]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4423      	add	r3, r4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	461a      	mov	r2, r3
 8003102:	f000 fa05 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	b29a      	uxth	r2, r3
 800310a:	88fb      	ldrh	r3, [r7, #6]
 800310c:	4413      	add	r3, r2
 800310e:	b298      	uxth	r0, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88bb      	ldrh	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	b299      	uxth	r1, r3
 800311a:	4b38      	ldr	r3, [pc, #224]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4c38      	ldr	r4, [pc, #224]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003120:	4613      	mov	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4423      	add	r3, r4
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 f9ef 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	b29b      	uxth	r3, r3
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	b298      	uxth	r0, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	b29a      	uxth	r2, r3
 8003140:	88bb      	ldrh	r3, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	b299      	uxth	r1, r3
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	4c2d      	ldr	r4, [pc, #180]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4423      	add	r3, r4
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	461a      	mov	r2, r3
 800315a:	f000 f9d9 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b29a      	uxth	r2, r3
 8003162:	88fb      	ldrh	r3, [r7, #6]
 8003164:	4413      	add	r3, r2
 8003166:	b298      	uxth	r0, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	b29a      	uxth	r2, r3
 800316c:	88bb      	ldrh	r3, [r7, #4]
 800316e:	4413      	add	r3, r2
 8003170:	b299      	uxth	r1, r3
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4c22      	ldr	r4, [pc, #136]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4423      	add	r3, r4
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	461a      	mov	r2, r3
 8003186:	f000 f9c3 	bl	8003510 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	b29b      	uxth	r3, r3
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	b298      	uxth	r0, r3
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	b29a      	uxth	r2, r3
 8003198:	88bb      	ldrh	r3, [r7, #4]
 800319a:	4413      	add	r3, r2
 800319c:	b299      	uxth	r1, r3
 800319e:	4b17      	ldr	r3, [pc, #92]	; (80031fc <BSP_LCD_DrawCircle+0x1cc>)
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	4c17      	ldr	r4, [pc, #92]	; (8003200 <BSP_LCD_DrawCircle+0x1d0>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4423      	add	r3, r4
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f000 f9ad 	bl	8003510 <BSP_LCD_DrawPixel>

    if (d < 0)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da06      	bge.n	80031ca <BSP_LCD_DrawCircle+0x19a>
    { 
      d += (curx << 2) + 6;
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	009a      	lsls	r2, r3, #2
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4413      	add	r3, r2
 80031c4:	3306      	adds	r3, #6
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e00a      	b.n	80031e0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	009a      	lsls	r2, r3, #2
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4413      	add	r3, r2
 80031d6:	330a      	adds	r3, #10
 80031d8:	617b      	str	r3, [r7, #20]
      cury--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3b01      	subs	r3, #1
 80031de:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	3301      	adds	r3, #1
 80031e4:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	f67f af33 	bls.w	8003056 <BSP_LCD_DrawCircle+0x26>
  } 
}
 80031f0:	bf00      	nop
 80031f2:	bf00      	nop
 80031f4:	371c      	adds	r7, #28
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd90      	pop	{r4, r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000568 	.word	0x20000568
 8003200:	2000056c 	.word	0x2000056c

08003204 <BSP_LCD_FillCircle>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  Radius: the circle radius
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	80fb      	strh	r3, [r7, #6]
 800320e:	460b      	mov	r3, r1
 8003210:	80bb      	strh	r3, [r7, #4]
 8003212:	4613      	mov	r3, r2
 8003214:	807b      	strh	r3, [r7, #2]
  int32_t  d;    /* Decision Variable */ 
  uint32_t  curx;/* Current X Value */
  uint32_t  cury;/* Current Y Value */ 
  
  d = 3 - (Radius << 1);
 8003216:	887b      	ldrh	r3, [r7, #2]
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	f1c3 0303 	rsb	r3, r3, #3
 800321e:	617b      	str	r3, [r7, #20]

  curx = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
  cury = Radius;
 8003224:	887b      	ldrh	r3, [r7, #2]
 8003226:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003228:	4b44      	ldr	r3, [pc, #272]	; (800333c <BSP_LCD_FillCircle+0x138>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4944      	ldr	r1, [pc, #272]	; (8003340 <BSP_LCD_FillCircle+0x13c>)
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fd16 	bl	8002c6c <BSP_LCD_SetTextColor>

  while (curx <= cury)
 8003240:	e061      	b.n	8003306 <BSP_LCD_FillCircle+0x102>
  {
    if(cury > 0) 
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d021      	beq.n	800328c <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	b29b      	uxth	r3, r3
 800324c:	88fa      	ldrh	r2, [r7, #6]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	b298      	uxth	r0, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	b29a      	uxth	r2, r3
 8003256:	88bb      	ldrh	r3, [r7, #4]
 8003258:	4413      	add	r3, r2
 800325a:	b299      	uxth	r1, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	b29b      	uxth	r3, r3
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	b29b      	uxth	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	f7ff fea5 	bl	8002fb4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	b29b      	uxth	r3, r3
 800326e:	88fa      	ldrh	r2, [r7, #6]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	b298      	uxth	r0, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	b29b      	uxth	r3, r3
 8003278:	88ba      	ldrh	r2, [r7, #4]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	b299      	uxth	r1, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	b29b      	uxth	r3, r3
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	b29b      	uxth	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	f7ff fe94 	bl	8002fb4 <BSP_LCD_DrawHLine>
    }

    if(curx > 0) 
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d021      	beq.n	80032d6 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	b29b      	uxth	r3, r3
 8003296:	88fa      	ldrh	r2, [r7, #6]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	b298      	uxth	r0, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	b29b      	uxth	r3, r3
 80032a0:	88ba      	ldrh	r2, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	b299      	uxth	r1, r3
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	005b      	lsls	r3, r3, #1
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7ff fe80 	bl	8002fb4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	88fa      	ldrh	r2, [r7, #6]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	b298      	uxth	r0, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	88bb      	ldrh	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	b299      	uxth	r1, r3
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	b29b      	uxth	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	f7ff fe6f 	bl	8002fb4 <BSP_LCD_DrawHLine>
    }
    if (d < 0)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	da06      	bge.n	80032ea <BSP_LCD_FillCircle+0xe6>
    { 
      d += (curx << 2) + 6;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	009a      	lsls	r2, r3, #2
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4413      	add	r3, r2
 80032e4:	3306      	adds	r3, #6
 80032e6:	617b      	str	r3, [r7, #20]
 80032e8:	e00a      	b.n	8003300 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      d += ((curx - cury) << 2) + 10;
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4413      	add	r3, r2
 80032f6:	330a      	adds	r3, #10
 80032f8:	617b      	str	r3, [r7, #20]
      cury--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
    }
    curx++;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	3301      	adds	r3, #1
 8003304:	613b      	str	r3, [r7, #16]
  while (curx <= cury)
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	429a      	cmp	r2, r3
 800330c:	d999      	bls.n	8003242 <BSP_LCD_FillCircle+0x3e>
  }

  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <BSP_LCD_FillCircle+0x138>)
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	490b      	ldr	r1, [pc, #44]	; (8003340 <BSP_LCD_FillCircle+0x13c>)
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	440b      	add	r3, r1
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fca3 	bl	8002c6c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	88b9      	ldrh	r1, [r7, #4]
 800332a:	88fb      	ldrh	r3, [r7, #6]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fe7f 	bl	8003030 <BSP_LCD_DrawCircle>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000568 	.word	0x20000568
 8003340:	2000056c 	.word	0x2000056c

08003344 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8003348:	4b05      	ldr	r3, [pc, #20]	; (8003360 <BSP_LCD_DisplayOn+0x1c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d003      	beq.n	800335a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8003352:	4b03      	ldr	r3, [pc, #12]	; (8003360 <BSP_LCD_DisplayOn+0x1c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4798      	blx	r3
  }
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000584 	.word	0x20000584

08003364 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b08e      	sub	sp, #56	; 0x38
 8003368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
 800336e:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003372:	4a60      	ldr	r2, [pc, #384]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003374:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003378:	6453      	str	r3, [r2, #68]	; 0x44
 800337a:	4b5e      	ldr	r3, [pc, #376]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 800337c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8003386:	2300      	movs	r3, #0
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	4b5a      	ldr	r3, [pc, #360]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	4a59      	ldr	r2, [pc, #356]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003390:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003394:	6313      	str	r3, [r2, #48]	; 0x30
 8003396:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800339e:	61fb      	str	r3, [r7, #28]
 80033a0:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	4b53      	ldr	r3, [pc, #332]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033ac:	f043 0301 	orr.w	r3, r3, #1
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	61bb      	str	r3, [r7, #24]
 80033bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	4b4c      	ldr	r3, [pc, #304]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	4a4b      	ldr	r2, [pc, #300]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	6313      	str	r3, [r2, #48]	; 0x30
 80033ce:	4b49      	ldr	r3, [pc, #292]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b45      	ldr	r3, [pc, #276]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a44      	ldr	r2, [pc, #272]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033e4:	f043 0304 	orr.w	r3, r3, #4
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b42      	ldr	r3, [pc, #264]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b3e      	ldr	r3, [pc, #248]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	4a3d      	ldr	r2, [pc, #244]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003400:	f043 0308 	orr.w	r3, r3, #8
 8003404:	6313      	str	r3, [r2, #48]	; 0x30
 8003406:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f003 0308 	and.w	r3, r3, #8
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	4b37      	ldr	r3, [pc, #220]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a36      	ldr	r2, [pc, #216]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 800341c:	f043 0320 	orr.w	r3, r3, #32
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b34      	ldr	r3, [pc, #208]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	607b      	str	r3, [r7, #4]
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003436:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343c:	6313      	str	r3, [r2, #48]	; 0x30
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <BSP_LCD_MspInit+0x190>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800344a:	f641 0358 	movw	r3, #6232	; 0x1858
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003458:	2302      	movs	r3, #2
 800345a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800345c:	230e      	movs	r3, #14
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8003460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003464:	4619      	mov	r1, r3
 8003466:	4824      	ldr	r0, [pc, #144]	; (80034f8 <BSP_LCD_MspInit+0x194>)
 8003468:	f001 f8d0 	bl	800460c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800346c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003470:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003476:	4619      	mov	r1, r3
 8003478:	4820      	ldr	r0, [pc, #128]	; (80034fc <BSP_LCD_MspInit+0x198>)
 800347a:	f001 f8c7 	bl	800460c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800347e:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8003484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003488:	4619      	mov	r1, r3
 800348a:	481d      	ldr	r0, [pc, #116]	; (8003500 <BSP_LCD_MspInit+0x19c>)
 800348c:	f001 f8be 	bl	800460c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8003490:	2348      	movs	r3, #72	; 0x48
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003498:	4619      	mov	r1, r3
 800349a:	481a      	ldr	r0, [pc, #104]	; (8003504 <BSP_LCD_MspInit+0x1a0>)
 800349c:	f001 f8b6 	bl	800460c <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80034a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034aa:	4619      	mov	r1, r3
 80034ac:	4816      	ldr	r0, [pc, #88]	; (8003508 <BSP_LCD_MspInit+0x1a4>)
 80034ae:	f001 f8ad 	bl	800460c <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80034b2:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034bc:	4619      	mov	r1, r3
 80034be:	4813      	ldr	r0, [pc, #76]	; (800350c <BSP_LCD_MspInit+0x1a8>)
 80034c0:	f001 f8a4 	bl	800460c <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80034c4:	2303      	movs	r3, #3
 80034c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80034c8:	2309      	movs	r3, #9
 80034ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d0:	4619      	mov	r1, r3
 80034d2:	480a      	ldr	r0, [pc, #40]	; (80034fc <BSP_LCD_MspInit+0x198>)
 80034d4:	f001 f89a 	bl	800460c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80034d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80034de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e2:	4619      	mov	r1, r3
 80034e4:	4809      	ldr	r0, [pc, #36]	; (800350c <BSP_LCD_MspInit+0x1a8>)
 80034e6:	f001 f891 	bl	800460c <HAL_GPIO_Init>
}
 80034ea:	bf00      	nop
 80034ec:	3738      	adds	r7, #56	; 0x38
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023800 	.word	0x40023800
 80034f8:	40020000 	.word	0x40020000
 80034fc:	40020400 	.word	0x40020400
 8003500:	40020800 	.word	0x40020800
 8003504:	40020c00 	.word	0x40020c00
 8003508:	40021400 	.word	0x40021400
 800350c:	40021800 	.word	0x40021800

08003510 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	603a      	str	r2, [r7, #0]
 800351a:	80fb      	strh	r3, [r7, #6]
 800351c:	460b      	mov	r3, r1
 800351e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003520:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <BSP_LCD_DrawPixel+0x44>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a0c      	ldr	r2, [pc, #48]	; (8003558 <BSP_LCD_DrawPixel+0x48>)
 8003526:	2134      	movs	r1, #52	; 0x34
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	4413      	add	r3, r2
 800352e:	335c      	adds	r3, #92	; 0x5c
 8003530:	681c      	ldr	r4, [r3, #0]
 8003532:	88bd      	ldrh	r5, [r7, #4]
 8003534:	f7ff fb0e 	bl	8002b54 <BSP_LCD_GetXSize>
 8003538:	4603      	mov	r3, r0
 800353a:	fb03 f205 	mul.w	r2, r3, r5
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4423      	add	r3, r4
 8003546:	461a      	mov	r2, r3
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6013      	str	r3, [r2, #0]
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bdb0      	pop	{r4, r5, r7, pc}
 8003554:	20000568 	.word	0x20000568
 8003558:	20000450 	.word	0x20000450

0800355c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b088      	sub	sp, #32
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	603a      	str	r2, [r7, #0]
 8003566:	80fb      	strh	r3, [r7, #6]
 8003568:	460b      	mov	r3, r1
 800356a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	2300      	movs	r3, #0
 8003572:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <DrawChar+0x16c>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	4953      	ldr	r1, [pc, #332]	; (80036cc <DrawChar+0x170>)
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3308      	adds	r3, #8
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	88db      	ldrh	r3, [r3, #6]
 800358e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003590:	4b4d      	ldr	r3, [pc, #308]	; (80036c8 <DrawChar+0x16c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	494d      	ldr	r1, [pc, #308]	; (80036cc <DrawChar+0x170>)
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	3308      	adds	r3, #8
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	889b      	ldrh	r3, [r3, #4]
 80035a6:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 80035a8:	8a3b      	ldrh	r3, [r7, #16]
 80035aa:	3307      	adds	r3, #7
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da00      	bge.n	80035b2 <DrawChar+0x56>
 80035b0:	3307      	adds	r3, #7
 80035b2:	10db      	asrs	r3, r3, #3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	00db      	lsls	r3, r3, #3
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	8a3b      	ldrh	r3, [r7, #16]
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e076      	b.n	80036b6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035c8:	8a3b      	ldrh	r3, [r7, #16]
 80035ca:	3307      	adds	r3, #7
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da00      	bge.n	80035d2 <DrawChar+0x76>
 80035d0:	3307      	adds	r3, #7
 80035d2:	10db      	asrs	r3, r3, #3
 80035d4:	461a      	mov	r2, r3
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	fb02 f303 	mul.w	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	4413      	add	r3, r2
 80035e0:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 80035e2:	8a3b      	ldrh	r3, [r7, #16]
 80035e4:	3307      	adds	r3, #7
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	da00      	bge.n	80035ec <DrawChar+0x90>
 80035ea:	3307      	adds	r3, #7
 80035ec:	10db      	asrs	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d002      	beq.n	80035f8 <DrawChar+0x9c>
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d004      	beq.n	8003600 <DrawChar+0xa4>
 80035f6:	e00c      	b.n	8003612 <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	617b      	str	r3, [r7, #20]
      break;
 80035fe:	e016      	b.n	800362e <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	3201      	adds	r2, #1
 800360a:	7812      	ldrb	r2, [r2, #0]
 800360c:	4313      	orrs	r3, r2
 800360e:	617b      	str	r3, [r7, #20]
      break;
 8003610:	e00d      	b.n	800362e <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	041a      	lsls	r2, r3, #16
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	3301      	adds	r3, #1
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	4313      	orrs	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	3202      	adds	r2, #2
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	4313      	orrs	r3, r2
 800362a:	617b      	str	r3, [r7, #20]
      break;
 800362c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	e036      	b.n	80036a2 <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003634:	8a3a      	ldrh	r2, [r7, #16]
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	1ad2      	subs	r2, r2, r3
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	4413      	add	r3, r2
 800363e:	3b01      	subs	r3, #1
 8003640:	2201      	movs	r2, #1
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	461a      	mov	r2, r3
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	4013      	ands	r3, r2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d012      	beq.n	8003676 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	b29a      	uxth	r2, r3
 8003654:	88fb      	ldrh	r3, [r7, #6]
 8003656:	4413      	add	r3, r2
 8003658:	b298      	uxth	r0, r3
 800365a:	4b1b      	ldr	r3, [pc, #108]	; (80036c8 <DrawChar+0x16c>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	491b      	ldr	r1, [pc, #108]	; (80036cc <DrawChar+0x170>)
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	88bb      	ldrh	r3, [r7, #4]
 800366e:	4619      	mov	r1, r3
 8003670:	f7ff ff4e 	bl	8003510 <BSP_LCD_DrawPixel>
 8003674:	e012      	b.n	800369c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	b29a      	uxth	r2, r3
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	4413      	add	r3, r2
 800367e:	b298      	uxth	r0, r3
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <DrawChar+0x16c>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	4911      	ldr	r1, [pc, #68]	; (80036cc <DrawChar+0x170>)
 8003686:	4613      	mov	r3, r2
 8003688:	005b      	lsls	r3, r3, #1
 800368a:	4413      	add	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	3304      	adds	r3, #4
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	88bb      	ldrh	r3, [r7, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	f7ff ff3a 	bl	8003510 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	3301      	adds	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	8a3b      	ldrh	r3, [r7, #16]
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d3c4      	bcc.n	8003634 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 80036aa:	88bb      	ldrh	r3, [r7, #4]
 80036ac:	3301      	adds	r3, #1
 80036ae:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	3301      	adds	r3, #1
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	8a7b      	ldrh	r3, [r7, #18]
 80036b8:	69fa      	ldr	r2, [r7, #28]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d384      	bcc.n	80035c8 <DrawChar+0x6c>
  }
}
 80036be:	bf00      	nop
 80036c0:	bf00      	nop
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000568 	.word	0x20000568
 80036cc:	2000056c 	.word	0x2000056c

080036d0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80036de:	4b16      	ldr	r3, [pc, #88]	; (8003738 <FillBuffer+0x68>)
 80036e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80036e4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <FillBuffer+0x68>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80036ec:	4a12      	ldr	r2, [pc, #72]	; (8003738 <FillBuffer+0x68>)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <FillBuffer+0x68>)
 80036f4:	4a11      	ldr	r2, [pc, #68]	; (800373c <FillBuffer+0x6c>)
 80036f6:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80036f8:	480f      	ldr	r0, [pc, #60]	; (8003738 <FillBuffer+0x68>)
 80036fa:	f000 fcf1 	bl	80040e0 <HAL_DMA2D_Init>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d115      	bne.n	8003730 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	480c      	ldr	r0, [pc, #48]	; (8003738 <FillBuffer+0x68>)
 8003708:	f000 fe52 	bl	80043b0 <HAL_DMA2D_ConfigLayer>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003712:	68ba      	ldr	r2, [r7, #8]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	9300      	str	r3, [sp, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69f9      	ldr	r1, [r7, #28]
 800371c:	4806      	ldr	r0, [pc, #24]	; (8003738 <FillBuffer+0x68>)
 800371e:	f000 fd32 	bl	8004186 <HAL_DMA2D_Start>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d103      	bne.n	8003730 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003728:	210a      	movs	r1, #10
 800372a:	4803      	ldr	r0, [pc, #12]	; (8003738 <FillBuffer+0x68>)
 800372c:	f000 fd56 	bl	80041dc <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003730:	bf00      	nop
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	200004f8 	.word	0x200004f8
 800373c:	4002b000 	.word	0x4002b000

08003740 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <BSP_SDRAM_Init+0xac>)
 8003746:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <BSP_SDRAM_Init+0xb0>)
 8003748:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800374a:	4b2a      	ldr	r3, [pc, #168]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 800374c:	2202      	movs	r2, #2
 800374e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8003750:	4b28      	ldr	r3, [pc, #160]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 8003752:	2207      	movs	r2, #7
 8003754:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8003756:	4b27      	ldr	r3, [pc, #156]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 8003758:	2204      	movs	r2, #4
 800375a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800375c:	4b25      	ldr	r3, [pc, #148]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 800375e:	2207      	movs	r2, #7
 8003760:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8003762:	4b24      	ldr	r3, [pc, #144]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 8003764:	2202      	movs	r2, #2
 8003766:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8003768:	4b22      	ldr	r3, [pc, #136]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 800376a:	2202      	movs	r2, #2
 800376c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800376e:	4b21      	ldr	r3, [pc, #132]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 8003770:	2202      	movs	r2, #2
 8003772:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8003774:	4b1d      	ldr	r3, [pc, #116]	; (80037ec <BSP_SDRAM_Init+0xac>)
 8003776:	2201      	movs	r2, #1
 8003778:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <BSP_SDRAM_Init+0xac>)
 800377c:	2200      	movs	r2, #0
 800377e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <BSP_SDRAM_Init+0xac>)
 8003782:	2204      	movs	r2, #4
 8003784:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <BSP_SDRAM_Init+0xac>)
 8003788:	2210      	movs	r2, #16
 800378a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <BSP_SDRAM_Init+0xac>)
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8003792:	4b16      	ldr	r3, [pc, #88]	; (80037ec <BSP_SDRAM_Init+0xac>)
 8003794:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8003798:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800379a:	4b14      	ldr	r3, [pc, #80]	; (80037ec <BSP_SDRAM_Init+0xac>)
 800379c:	2200      	movs	r2, #0
 800379e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <BSP_SDRAM_Init+0xac>)
 80037a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037a6:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <BSP_SDRAM_Init+0xac>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <BSP_SDRAM_Init+0xac>)
 80037b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80037b6:	2100      	movs	r1, #0
 80037b8:	480c      	ldr	r0, [pc, #48]	; (80037ec <BSP_SDRAM_Init+0xac>)
 80037ba:	f000 f87f 	bl	80038bc <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80037be:	490d      	ldr	r1, [pc, #52]	; (80037f4 <BSP_SDRAM_Init+0xb4>)
 80037c0:	480a      	ldr	r0, [pc, #40]	; (80037ec <BSP_SDRAM_Init+0xac>)
 80037c2:	f003 fcdd 	bl	8007180 <HAL_SDRAM_Init>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037cc:	4b0a      	ldr	r3, [pc, #40]	; (80037f8 <BSP_SDRAM_Init+0xb8>)
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e002      	b.n	80037da <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037d4:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <BSP_SDRAM_Init+0xb8>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037da:	f240 506a 	movw	r0, #1386	; 0x56a
 80037de:	f000 f80d 	bl	80037fc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037e2:	4b05      	ldr	r3, [pc, #20]	; (80037f8 <BSP_SDRAM_Init+0xb8>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000588 	.word	0x20000588
 80037f0:	a0000140 	.word	0xa0000140
 80037f4:	200005bc 	.word	0x200005bc
 80037f8:	2000007c 	.word	0x2000007c

080037fc <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003808:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800380e:	4b29      	ldr	r3, [pc, #164]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003810:	2208      	movs	r2, #8
 8003812:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003816:	2201      	movs	r2, #1
 8003818:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800381a:	4b26      	ldr	r3, [pc, #152]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381c:	2200      	movs	r2, #0
 800381e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003824:	4923      	ldr	r1, [pc, #140]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003826:	4824      	ldr	r0, [pc, #144]	; (80038b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003828:	f003 fce8 	bl	80071fc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800382c:	2001      	movs	r0, #1
 800382e:	f000 f993 	bl	8003b58 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8003832:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003834:	2202      	movs	r2, #2
 8003836:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003838:	4b1e      	ldr	r3, [pc, #120]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383a:	2208      	movs	r2, #8
 800383c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800383e:	4b1d      	ldr	r3, [pc, #116]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003840:	2201      	movs	r2, #1
 8003842:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003844:	4b1b      	ldr	r3, [pc, #108]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003846:	2200      	movs	r2, #0
 8003848:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800384a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800384e:	4919      	ldr	r1, [pc, #100]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003850:	4819      	ldr	r0, [pc, #100]	; (80038b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003852:	f003 fcd3 	bl	80071fc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003856:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003858:	2203      	movs	r2, #3
 800385a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385e:	2208      	movs	r2, #8
 8003860:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8003862:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003864:	2204      	movs	r2, #4
 8003866:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003868:	4b12      	ldr	r3, [pc, #72]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386a:	2200      	movs	r2, #0
 800386c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800386e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003872:	4910      	ldr	r1, [pc, #64]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003874:	4810      	ldr	r0, [pc, #64]	; (80038b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003876:	f003 fcc1 	bl	80071fc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800387a:	f44f 730c 	mov.w	r3, #560	; 0x230
 800387e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003882:	2204      	movs	r2, #4
 8003884:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003888:	2208      	movs	r2, #8
 800388a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800388e:	2201      	movs	r2, #1
 8003890:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a07      	ldr	r2, [pc, #28]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003896:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8003898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800389c:	4905      	ldr	r1, [pc, #20]	; (80038b4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800389e:	4806      	ldr	r0, [pc, #24]	; (80038b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a0:	f003 fcac 	bl	80071fc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4804      	ldr	r0, [pc, #16]	; (80038b8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038a8:	f003 fcdd 	bl	8007266 <HAL_SDRAM_ProgramRefreshRate>
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	200005d8 	.word	0x200005d8
 80038b8:	20000588 	.word	0x20000588

080038bc <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b090      	sub	sp, #64	; 0x40
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80ec 	beq.w	8003aa6 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038ce:	2300      	movs	r3, #0
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	4b77      	ldr	r3, [pc, #476]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	4a76      	ldr	r2, [pc, #472]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038d8:	f043 0301 	orr.w	r3, r3, #1
 80038dc:	6393      	str	r3, [r2, #56]	; 0x38
 80038de:	4b74      	ldr	r3, [pc, #464]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80038e8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
 80038ee:	4b70      	ldr	r3, [pc, #448]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	4a6f      	ldr	r2, [pc, #444]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038f8:	6313      	str	r3, [r2, #48]	; 0x30
 80038fa:	4b6d      	ldr	r3, [pc, #436]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390e:	4a68      	ldr	r2, [pc, #416]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003910:	f043 0302 	orr.w	r3, r3, #2
 8003914:	6313      	str	r3, [r2, #48]	; 0x30
 8003916:	4b66      	ldr	r3, [pc, #408]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	623b      	str	r3, [r7, #32]
 8003920:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	4b62      	ldr	r3, [pc, #392]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4a61      	ldr	r2, [pc, #388]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800392c:	f043 0304 	orr.w	r3, r3, #4
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4b5f      	ldr	r3, [pc, #380]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
 8003942:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a5a      	ldr	r2, [pc, #360]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003948:	f043 0308 	orr.w	r3, r3, #8
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b58      	ldr	r3, [pc, #352]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0308 	and.w	r3, r3, #8
 8003956:	61bb      	str	r3, [r7, #24]
 8003958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	4b54      	ldr	r3, [pc, #336]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a53      	ldr	r2, [pc, #332]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003964:	f043 0310 	orr.w	r3, r3, #16
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b51      	ldr	r3, [pc, #324]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0310 	and.w	r3, r3, #16
 8003972:	617b      	str	r3, [r7, #20]
 8003974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	4b4d      	ldr	r3, [pc, #308]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a4c      	ldr	r2, [pc, #304]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003980:	f043 0320 	orr.w	r3, r3, #32
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	613b      	str	r3, [r7, #16]
 8003990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b46      	ldr	r3, [pc, #280]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 800399c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b43      	ldr	r3, [pc, #268]	; (8003ab0 <BSP_SDRAM_MspInit+0x1f4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 80039ae:	2302      	movs	r3, #2
 80039b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80039b2:	2302      	movs	r3, #2
 80039b4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80039ba:	230c      	movs	r3, #12
 80039bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80039be:	2360      	movs	r3, #96	; 0x60
 80039c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80039c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039c6:	4619      	mov	r1, r3
 80039c8:	483a      	ldr	r0, [pc, #232]	; (8003ab4 <BSP_SDRAM_MspInit+0x1f8>)
 80039ca:	f000 fe1f 	bl	800460c <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80039ce:	2301      	movs	r3, #1
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80039d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039d6:	4619      	mov	r1, r3
 80039d8:	4837      	ldr	r0, [pc, #220]	; (8003ab8 <BSP_SDRAM_MspInit+0x1fc>)
 80039da:	f000 fe17 	bl	800460c <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80039de:	f24c 7303 	movw	r3, #50947	; 0xc703
 80039e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80039e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e8:	4619      	mov	r1, r3
 80039ea:	4834      	ldr	r0, [pc, #208]	; (8003abc <BSP_SDRAM_MspInit+0x200>)
 80039ec:	f000 fe0e 	bl	800460c <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80039f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80039f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039fa:	4619      	mov	r1, r3
 80039fc:	4830      	ldr	r0, [pc, #192]	; (8003ac0 <BSP_SDRAM_MspInit+0x204>)
 80039fe:	f000 fe05 	bl	800460c <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003a02:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	482d      	ldr	r0, [pc, #180]	; (8003ac4 <BSP_SDRAM_MspInit+0x208>)
 8003a10:	f000 fdfc 	bl	800460c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a14:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a18:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4829      	ldr	r0, [pc, #164]	; (8003ac8 <BSP_SDRAM_MspInit+0x20c>)
 8003a22:	f000 fdf3 	bl	800460c <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a2c:	4b27      	ldr	r3, [pc, #156]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a32:	4b26      	ldr	r3, [pc, #152]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a38:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a40:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a42:	4b22      	ldr	r3, [pc, #136]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003a48:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003a4a:	4b20      	ldr	r3, [pc, #128]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003a50:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003a52:	4b1e      	ldr	r3, [pc, #120]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a5e:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a66:	4b19      	ldr	r3, [pc, #100]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a68:	2203      	movs	r2, #3
 8003a6a:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a6c:	4b17      	ldr	r3, [pc, #92]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a72:	4b16      	ldr	r3, [pc, #88]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003a78:	4b14      	ldr	r3, [pc, #80]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a7a:	4a15      	ldr	r2, [pc, #84]	; (8003ad0 <BSP_SDRAM_MspInit+0x214>)
 8003a7c:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a12      	ldr	r2, [pc, #72]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
 8003a84:	4a11      	ldr	r2, [pc, #68]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003a8a:	4810      	ldr	r0, [pc, #64]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a8c:	f000 fa18 	bl	8003ec0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003a90:	480e      	ldr	r0, [pc, #56]	; (8003acc <BSP_SDRAM_MspInit+0x210>)
 8003a92:	f000 f967 	bl	8003d64 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a96:	2200      	movs	r2, #0
 8003a98:	210f      	movs	r1, #15
 8003a9a:	2038      	movs	r0, #56	; 0x38
 8003a9c:	f000 f938 	bl	8003d10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003aa0:	2038      	movs	r0, #56	; 0x38
 8003aa2:	f000 f951 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003aa6:	bf00      	nop
 8003aa8:	3740      	adds	r7, #64	; 0x40
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40020400 	.word	0x40020400
 8003ab8:	40020800 	.word	0x40020800
 8003abc:	40020c00 	.word	0x40020c00
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	40021400 	.word	0x40021400
 8003ac8:	40021800 	.word	0x40021800
 8003acc:	200005e8 	.word	0x200005e8
 8003ad0:	40026410 	.word	0x40026410

08003ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_Init+0x40>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_Init+0x40>)
 8003aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <HAL_Init+0x40>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afc:	2003      	movs	r0, #3
 8003afe:	f000 f8fc 	bl	8003cfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b02:	200f      	movs	r0, #15
 8003b04:	f7fd ff72 	bl	80019ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b08:	f7fd ff44 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00

08003b18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <HAL_IncTick+0x20>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	461a      	mov	r2, r3
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_IncTick+0x24>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4413      	add	r3, r2
 8003b28:	4a04      	ldr	r2, [pc, #16]	; (8003b3c <HAL_IncTick+0x24>)
 8003b2a:	6013      	str	r3, [r2, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000084 	.word	0x20000084
 8003b3c:	20000648 	.word	0x20000648

08003b40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return uwTick;
 8003b44:	4b03      	ldr	r3, [pc, #12]	; (8003b54 <HAL_GetTick+0x14>)
 8003b46:	681b      	ldr	r3, [r3, #0]
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	20000648 	.word	0x20000648

08003b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b60:	f7ff ffee 	bl	8003b40 <HAL_GetTick>
 8003b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b70:	d005      	beq.n	8003b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b72:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <HAL_Delay+0x44>)
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	461a      	mov	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b7e:	bf00      	nop
 8003b80:	f7ff ffde 	bl	8003b40 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d8f7      	bhi.n	8003b80 <HAL_Delay+0x28>
  {
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000084 	.word	0x20000084

08003ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f003 0307 	and.w	r3, r3, #7
 8003bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bb0:	4b0c      	ldr	r3, [pc, #48]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bd2:	4a04      	ldr	r2, [pc, #16]	; (8003be4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	60d3      	str	r3, [r2, #12]
}
 8003bd8:	bf00      	nop
 8003bda:	3714      	adds	r7, #20
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bec:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <__NVIC_GetPriorityGrouping+0x18>)
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	0a1b      	lsrs	r3, r3, #8
 8003bf2:	f003 0307 	and.w	r3, r3, #7
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	db0b      	blt.n	8003c2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c16:	79fb      	ldrb	r3, [r7, #7]
 8003c18:	f003 021f 	and.w	r2, r3, #31
 8003c1c:	4907      	ldr	r1, [pc, #28]	; (8003c3c <__NVIC_EnableIRQ+0x38>)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2001      	movs	r0, #1
 8003c26:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	e000e100 	.word	0xe000e100

08003c40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	4603      	mov	r3, r0
 8003c48:	6039      	str	r1, [r7, #0]
 8003c4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db0a      	blt.n	8003c6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	490c      	ldr	r1, [pc, #48]	; (8003c8c <__NVIC_SetPriority+0x4c>)
 8003c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5e:	0112      	lsls	r2, r2, #4
 8003c60:	b2d2      	uxtb	r2, r2
 8003c62:	440b      	add	r3, r1
 8003c64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c68:	e00a      	b.n	8003c80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	4908      	ldr	r1, [pc, #32]	; (8003c90 <__NVIC_SetPriority+0x50>)
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	3b04      	subs	r3, #4
 8003c78:	0112      	lsls	r2, r2, #4
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	761a      	strb	r2, [r3, #24]
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	e000e100 	.word	0xe000e100
 8003c90:	e000ed00 	.word	0xe000ed00

08003c94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b089      	sub	sp, #36	; 0x24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	f1c3 0307 	rsb	r3, r3, #7
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	bf28      	it	cs
 8003cb2:	2304      	movcs	r3, #4
 8003cb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3304      	adds	r3, #4
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d902      	bls.n	8003cc4 <NVIC_EncodePriority+0x30>
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	3b03      	subs	r3, #3
 8003cc2:	e000      	b.n	8003cc6 <NVIC_EncodePriority+0x32>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	401a      	ands	r2, r3
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cdc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	43d9      	mvns	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cec:	4313      	orrs	r3, r2
         );
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3724      	adds	r7, #36	; 0x24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr

08003cfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7ff ff4c 	bl	8003ba0 <__NVIC_SetPriorityGrouping>
}
 8003d08:	bf00      	nop
 8003d0a:	3708      	adds	r7, #8
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d22:	f7ff ff61 	bl	8003be8 <__NVIC_GetPriorityGrouping>
 8003d26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	68b9      	ldr	r1, [r7, #8]
 8003d2c:	6978      	ldr	r0, [r7, #20]
 8003d2e:	f7ff ffb1 	bl	8003c94 <NVIC_EncodePriority>
 8003d32:	4602      	mov	r2, r0
 8003d34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff80 	bl	8003c40 <__NVIC_SetPriority>
}
 8003d40:	bf00      	nop
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff54 	bl	8003c04 <__NVIC_EnableIRQ>
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff fee6 	bl	8003b40 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e099      	b.n	8003eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da0:	e00f      	b.n	8003dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da2:	f7ff fecd 	bl	8003b40 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d908      	bls.n	8003dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e078      	b.n	8003eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e8      	bne.n	8003da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_DMA_Init+0x158>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4313      	orrs	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d117      	bne.n	8003e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8bd 	bl	8003fe8 <DMA_CheckFifoParam>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e82:	2301      	movs	r3, #1
 8003e84:	e016      	b.n	8003eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f874 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 8003e94:	4603      	mov	r3, r0
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	f010803f 	.word	0xf010803f

08003ec0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e050      	b.n	8003f74 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d101      	bne.n	8003ee2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e048      	b.n	8003f74 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2200      	movs	r2, #0
 8003f00:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2200      	movs	r2, #0
 8003f08:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2221      	movs	r2, #33	; 0x21
 8003f20:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f82a 	bl	8003f7c <DMA_CalcBaseAndBitshift>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f54:	223f      	movs	r2, #63	; 0x3f
 8003f56:	409a      	lsls	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	3b10      	subs	r3, #16
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <DMA_CalcBaseAndBitshift+0x64>)
 8003f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f92:	091b      	lsrs	r3, r3, #4
 8003f94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f96:	4a13      	ldr	r2, [pc, #76]	; (8003fe4 <DMA_CalcBaseAndBitshift+0x68>)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d909      	bls.n	8003fbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	1d1a      	adds	r2, r3, #4
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	659a      	str	r2, [r3, #88]	; 0x58
 8003fbc:	e007      	b.n	8003fce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003fc6:	f023 0303 	bic.w	r3, r3, #3
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	aaaaaaab 	.word	0xaaaaaaab
 8003fe4:	08015920 	.word	0x08015920

08003fe8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11f      	bne.n	8004042 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b03      	cmp	r3, #3
 8004006:	d856      	bhi.n	80040b6 <DMA_CheckFifoParam+0xce>
 8004008:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <DMA_CheckFifoParam+0x28>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	08004021 	.word	0x08004021
 8004014:	08004033 	.word	0x08004033
 8004018:	08004021 	.word	0x08004021
 800401c:	080040b7 	.word	0x080040b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d046      	beq.n	80040ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004030:	e043      	b.n	80040ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004036:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800403a:	d140      	bne.n	80040be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004040:	e03d      	b.n	80040be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404a:	d121      	bne.n	8004090 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b03      	cmp	r3, #3
 8004050:	d837      	bhi.n	80040c2 <DMA_CheckFifoParam+0xda>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <DMA_CheckFifoParam+0x70>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	08004069 	.word	0x08004069
 800405c:	0800406f 	.word	0x0800406f
 8004060:	08004069 	.word	0x08004069
 8004064:	08004081 	.word	0x08004081
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      break;
 800406c:	e030      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d025      	beq.n	80040c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800407e:	e022      	b.n	80040c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004088:	d11f      	bne.n	80040ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800408e:	e01c      	b.n	80040ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d903      	bls.n	800409e <DMA_CheckFifoParam+0xb6>
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d003      	beq.n	80040a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800409c:	e018      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
      break;
 80040a2:	e015      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
      break;
 80040b4:	e00b      	b.n	80040ce <DMA_CheckFifoParam+0xe6>
      break;
 80040b6:	bf00      	nop
 80040b8:	e00a      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;
 80040ba:	bf00      	nop
 80040bc:	e008      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;
 80040be:	bf00      	nop
 80040c0:	e006      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;
 80040c2:	bf00      	nop
 80040c4:	e004      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;
 80040c6:	bf00      	nop
 80040c8:	e002      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80040ca:	bf00      	nop
 80040cc:	e000      	b.n	80040d0 <DMA_CheckFifoParam+0xe8>
      break;
 80040ce:	bf00      	nop
    }
  } 
  
  return status; 
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop

080040e0 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e03b      	b.n	800416a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d106      	bne.n	800410c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f833 	bl	8004172 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2202      	movs	r2, #2
 8004110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	430a      	orrs	r2, r1
 8004128:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	f023 0107 	bic.w	r1, r3, #7
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004146:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800414a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	68d1      	ldr	r1, [r2, #12]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6812      	ldr	r2, [r2, #0]
 8004156:	430b      	orrs	r3, r1
 8004158:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004168:	2300      	movs	r3, #0
}
 800416a:	4618      	mov	r0, r3
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b086      	sub	sp, #24
 800418a:	af02      	add	r7, sp, #8
 800418c:	60f8      	str	r0, [r7, #12]
 800418e:	60b9      	str	r1, [r7, #8]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_DMA2D_Start+0x1c>
 800419e:	2302      	movs	r3, #2
 80041a0:	e018      	b.n	80041d4 <HAL_DMA2D_Start+0x4e>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68b9      	ldr	r1, [r7, #8]
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f000 f989 	bl	80044d4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0201 	orr.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3710      	adds	r7, #16
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d056      	beq.n	80042a6 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80041f8:	f7ff fca2 	bl	8003b40 <HAL_GetTick>
 80041fc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80041fe:	e04b      	b.n	8004298 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0321 	and.w	r3, r3, #33	; 0x21
 800420e:	2b00      	cmp	r3, #0
 8004210:	d023      	beq.n	800425a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	f043 0202 	orr.w	r2, r3, #2
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d005      	beq.n	800423e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	f043 0201 	orr.w	r2, r3, #1
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2221      	movs	r2, #33	; 0x21
 8004244:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2204      	movs	r2, #4
 800424a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e0a5      	b.n	80043a6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d01a      	beq.n	8004298 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004262:	f7ff fc6d 	bl	8003b40 <HAL_GetTick>
 8004266:	4602      	mov	r2, r0
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	1ad3      	subs	r3, r2, r3
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d302      	bcc.n	8004278 <HAL_DMA2D_PollForTransfer+0x9c>
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427c:	f043 0220 	orr.w	r2, r3, #32
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2203      	movs	r2, #3
 8004288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e086      	b.n	80043a6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ac      	beq.n	8004200 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69db      	ldr	r3, [r3, #28]
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	f003 0320 	and.w	r3, r3, #32
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	4313      	orrs	r3, r2
 80042c0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d061      	beq.n	800438c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80042c8:	f7ff fc3a 	bl	8003b40 <HAL_GetTick>
 80042cc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80042ce:	e056      	b.n	800437e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d02e      	beq.n	8004340 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f003 0308 	and.w	r3, r3, #8
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	f043 0204 	orr.w	r2, r3, #4
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d005      	beq.n	8004324 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800431c:	f043 0201 	orr.w	r2, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2229      	movs	r2, #41	; 0x29
 800432a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2204      	movs	r2, #4
 8004330:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e032      	b.n	80043a6 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004346:	d01a      	beq.n	800437e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004348:	f7ff fbfa 	bl	8003b40 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d302      	bcc.n	800435e <HAL_DMA2D_PollForTransfer+0x182>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d10f      	bne.n	800437e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	f043 0220 	orr.w	r2, r3, #32
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2203      	movs	r2, #3
 800436e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e013      	b.n	80043a6 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0a1      	beq.n	80042d0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2212      	movs	r2, #18
 8004392:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80043a4:	2300      	movs	r3, #0
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_DMA2D_ConfigLayer+0x20>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e079      	b.n	80044c4 <HAL_DMA2D_ConfigLayer+0x114>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	011b      	lsls	r3, r3, #4
 80043e4:	3318      	adds	r3, #24
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4313      	orrs	r3, r2
 80043f8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80043fa:	4b35      	ldr	r3, [pc, #212]	; (80044d0 <HAL_DMA2D_ConfigLayer+0x120>)
 80043fc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2b0a      	cmp	r3, #10
 8004404:	d003      	beq.n	800440e <HAL_DMA2D_ConfigLayer+0x5e>
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b09      	cmp	r3, #9
 800440c:	d107      	bne.n	800441e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	4313      	orrs	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e005      	b.n	800442a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	697a      	ldr	r2, [r7, #20]
 8004426:	4313      	orrs	r3, r2
 8004428:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d120      	bne.n	8004472 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	43db      	mvns	r3, r3
 800443a:	ea02 0103 	and.w	r1, r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	430a      	orrs	r2, r1
 8004446:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	6812      	ldr	r2, [r2, #0]
 8004450:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	2b0a      	cmp	r3, #10
 8004458:	d003      	beq.n	8004462 <HAL_DMA2D_ConfigLayer+0xb2>
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b09      	cmp	r3, #9
 8004460:	d127      	bne.n	80044b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	68da      	ldr	r2, [r3, #12]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800446e:	629a      	str	r2, [r3, #40]	; 0x28
 8004470:	e01f      	b.n	80044b2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69da      	ldr	r2, [r3, #28]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	43db      	mvns	r3, r3
 800447c:	ea02 0103 	and.w	r1, r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	430a      	orrs	r2, r1
 8004488:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b0a      	cmp	r3, #10
 800449a:	d003      	beq.n	80044a4 <HAL_DMA2D_ConfigLayer+0xf4>
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b09      	cmp	r3, #9
 80044a2:	d106      	bne.n	80044b2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	68da      	ldr	r2, [r3, #12]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044b0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	371c      	adds	r7, #28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	ff03000f 	.word	0xff03000f

080044d4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b08b      	sub	sp, #44	; 0x2c
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	041a      	lsls	r2, r3, #16
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	431a      	orrs	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800450c:	d174      	bne.n	80045f8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004514:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800451c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004524:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	b2db      	uxtb	r3, r3
 800452a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	431a      	orrs	r2, r3
 800453a:	6a3b      	ldr	r3, [r7, #32]
 800453c:	4313      	orrs	r3, r2
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4313      	orrs	r3, r2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
 8004544:	e053      	b.n	80045ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d106      	bne.n	800455c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4313      	orrs	r3, r2
 8004554:	697a      	ldr	r2, [r7, #20]
 8004556:	4313      	orrs	r3, r2
 8004558:	627b      	str	r3, [r7, #36]	; 0x24
 800455a:	e048      	b.n	80045ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d111      	bne.n	8004588 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	0cdb      	lsrs	r3, r3, #19
 8004568:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	0a9b      	lsrs	r3, r3, #10
 800456e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	08db      	lsrs	r3, r3, #3
 8004574:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	02db      	lsls	r3, r3, #11
 800457e:	4313      	orrs	r3, r2
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
 8004586:	e032      	b.n	80045ee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d117      	bne.n	80045c0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	0fdb      	lsrs	r3, r3, #31
 8004594:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	0cdb      	lsrs	r3, r3, #19
 800459a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	0adb      	lsrs	r3, r3, #11
 80045a0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	029b      	lsls	r3, r3, #10
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6a3b      	ldr	r3, [r7, #32]
 80045b4:	03db      	lsls	r3, r3, #15
 80045b6:	4313      	orrs	r3, r2
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
 80045be:	e016      	b.n	80045ee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80045c0:	6a3b      	ldr	r3, [r7, #32]
 80045c2:	0f1b      	lsrs	r3, r3, #28
 80045c4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	0d1b      	lsrs	r3, r3, #20
 80045ca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80045cc:	69bb      	ldr	r3, [r7, #24]
 80045ce:	0b1b      	lsrs	r3, r3, #12
 80045d0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	011a      	lsls	r2, r3, #4
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	021b      	lsls	r3, r3, #8
 80045e0:	431a      	orrs	r2, r3
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	031b      	lsls	r3, r3, #12
 80045e6:	4313      	orrs	r3, r2
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80045f6:	e003      	b.n	8004600 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	372c      	adds	r7, #44	; 0x2c
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800460c:	b480      	push	{r7}
 800460e:	b089      	sub	sp, #36	; 0x24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800461a:	2300      	movs	r3, #0
 800461c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800461e:	2300      	movs	r3, #0
 8004620:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
 8004626:	e177      	b.n	8004918 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004628:	2201      	movs	r2, #1
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800463c:	693a      	ldr	r2, [r7, #16]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	429a      	cmp	r2, r3
 8004642:	f040 8166 	bne.w	8004912 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d005      	beq.n	800465e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800465a:	2b02      	cmp	r3, #2
 800465c:	d130      	bne.n	80046c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	2203      	movs	r2, #3
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43db      	mvns	r3, r3
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	4013      	ands	r3, r2
 8004674:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	fa02 f303 	lsl.w	r3, r2, r3
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004694:	2201      	movs	r2, #1
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	091b      	lsrs	r3, r3, #4
 80046aa:	f003 0201 	and.w	r2, r3, #1
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d017      	beq.n	80046fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	005b      	lsls	r3, r3, #1
 80046d6:	2203      	movs	r2, #3
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	2b02      	cmp	r3, #2
 8004706:	d123      	bne.n	8004750 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	08da      	lsrs	r2, r3, #3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3208      	adds	r2, #8
 8004710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004714:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0307 	and.w	r3, r3, #7
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	220f      	movs	r2, #15
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	691a      	ldr	r2, [r3, #16]
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f003 0307 	and.w	r3, r3, #7
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	69ba      	ldr	r2, [r7, #24]
 800473e:	4313      	orrs	r3, r2
 8004740:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	08da      	lsrs	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3208      	adds	r2, #8
 800474a:	69b9      	ldr	r1, [r7, #24]
 800474c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	2203      	movs	r2, #3
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	43db      	mvns	r3, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4013      	ands	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 0203 	and.w	r2, r3, #3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	69ba      	ldr	r2, [r7, #24]
 800477a:	4313      	orrs	r3, r2
 800477c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80c0 	beq.w	8004912 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	4b66      	ldr	r3, [pc, #408]	; (8004930 <HAL_GPIO_Init+0x324>)
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	4a65      	ldr	r2, [pc, #404]	; (8004930 <HAL_GPIO_Init+0x324>)
 800479c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a0:	6453      	str	r3, [r2, #68]	; 0x44
 80047a2:	4b63      	ldr	r3, [pc, #396]	; (8004930 <HAL_GPIO_Init+0x324>)
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80047ae:	4a61      	ldr	r2, [pc, #388]	; (8004934 <HAL_GPIO_Init+0x328>)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	089b      	lsrs	r3, r3, #2
 80047b4:	3302      	adds	r3, #2
 80047b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	220f      	movs	r2, #15
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	43db      	mvns	r3, r3
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	4013      	ands	r3, r2
 80047d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a58      	ldr	r2, [pc, #352]	; (8004938 <HAL_GPIO_Init+0x32c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d037      	beq.n	800484a <HAL_GPIO_Init+0x23e>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a57      	ldr	r2, [pc, #348]	; (800493c <HAL_GPIO_Init+0x330>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d031      	beq.n	8004846 <HAL_GPIO_Init+0x23a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a56      	ldr	r2, [pc, #344]	; (8004940 <HAL_GPIO_Init+0x334>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d02b      	beq.n	8004842 <HAL_GPIO_Init+0x236>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a55      	ldr	r2, [pc, #340]	; (8004944 <HAL_GPIO_Init+0x338>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d025      	beq.n	800483e <HAL_GPIO_Init+0x232>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a54      	ldr	r2, [pc, #336]	; (8004948 <HAL_GPIO_Init+0x33c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d01f      	beq.n	800483a <HAL_GPIO_Init+0x22e>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a53      	ldr	r2, [pc, #332]	; (800494c <HAL_GPIO_Init+0x340>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d019      	beq.n	8004836 <HAL_GPIO_Init+0x22a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a52      	ldr	r2, [pc, #328]	; (8004950 <HAL_GPIO_Init+0x344>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d013      	beq.n	8004832 <HAL_GPIO_Init+0x226>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a51      	ldr	r2, [pc, #324]	; (8004954 <HAL_GPIO_Init+0x348>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d00d      	beq.n	800482e <HAL_GPIO_Init+0x222>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a50      	ldr	r2, [pc, #320]	; (8004958 <HAL_GPIO_Init+0x34c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d007      	beq.n	800482a <HAL_GPIO_Init+0x21e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a4f      	ldr	r2, [pc, #316]	; (800495c <HAL_GPIO_Init+0x350>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d101      	bne.n	8004826 <HAL_GPIO_Init+0x21a>
 8004822:	2309      	movs	r3, #9
 8004824:	e012      	b.n	800484c <HAL_GPIO_Init+0x240>
 8004826:	230a      	movs	r3, #10
 8004828:	e010      	b.n	800484c <HAL_GPIO_Init+0x240>
 800482a:	2308      	movs	r3, #8
 800482c:	e00e      	b.n	800484c <HAL_GPIO_Init+0x240>
 800482e:	2307      	movs	r3, #7
 8004830:	e00c      	b.n	800484c <HAL_GPIO_Init+0x240>
 8004832:	2306      	movs	r3, #6
 8004834:	e00a      	b.n	800484c <HAL_GPIO_Init+0x240>
 8004836:	2305      	movs	r3, #5
 8004838:	e008      	b.n	800484c <HAL_GPIO_Init+0x240>
 800483a:	2304      	movs	r3, #4
 800483c:	e006      	b.n	800484c <HAL_GPIO_Init+0x240>
 800483e:	2303      	movs	r3, #3
 8004840:	e004      	b.n	800484c <HAL_GPIO_Init+0x240>
 8004842:	2302      	movs	r3, #2
 8004844:	e002      	b.n	800484c <HAL_GPIO_Init+0x240>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <HAL_GPIO_Init+0x240>
 800484a:	2300      	movs	r3, #0
 800484c:	69fa      	ldr	r2, [r7, #28]
 800484e:	f002 0203 	and.w	r2, r2, #3
 8004852:	0092      	lsls	r2, r2, #2
 8004854:	4093      	lsls	r3, r2
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	4313      	orrs	r3, r2
 800485a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800485c:	4935      	ldr	r1, [pc, #212]	; (8004934 <HAL_GPIO_Init+0x328>)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	089b      	lsrs	r3, r3, #2
 8004862:	3302      	adds	r3, #2
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486a:	4b3d      	ldr	r3, [pc, #244]	; (8004960 <HAL_GPIO_Init+0x354>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800488e:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_GPIO_Init+0x354>)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004894:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_GPIO_Init+0x354>)
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	4313      	orrs	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048b8:	4a29      	ldr	r2, [pc, #164]	; (8004960 <HAL_GPIO_Init+0x354>)
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048be:	4b28      	ldr	r3, [pc, #160]	; (8004960 <HAL_GPIO_Init+0x354>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e2:	4a1f      	ldr	r2, [pc, #124]	; (8004960 <HAL_GPIO_Init+0x354>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	; (8004960 <HAL_GPIO_Init+0x354>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	43db      	mvns	r3, r3
 80048f2:	69ba      	ldr	r2, [r7, #24]
 80048f4:	4013      	ands	r3, r2
 80048f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	4313      	orrs	r3, r2
 800490a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800490c:	4a14      	ldr	r2, [pc, #80]	; (8004960 <HAL_GPIO_Init+0x354>)
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	3301      	adds	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b0f      	cmp	r3, #15
 800491c:	f67f ae84 	bls.w	8004628 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	3724      	adds	r7, #36	; 0x24
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40023800 	.word	0x40023800
 8004934:	40013800 	.word	0x40013800
 8004938:	40020000 	.word	0x40020000
 800493c:	40020400 	.word	0x40020400
 8004940:	40020800 	.word	0x40020800
 8004944:	40020c00 	.word	0x40020c00
 8004948:	40021000 	.word	0x40021000
 800494c:	40021400 	.word	0x40021400
 8004950:	40021800 	.word	0x40021800
 8004954:	40021c00 	.word	0x40021c00
 8004958:	40022000 	.word	0x40022000
 800495c:	40022400 	.word	0x40022400
 8004960:	40013c00 	.word	0x40013c00

08004964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	460b      	mov	r3, r1
 800496e:	807b      	strh	r3, [r7, #2]
 8004970:	4613      	mov	r3, r2
 8004972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004974:	787b      	ldrb	r3, [r7, #1]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497a:	887a      	ldrh	r2, [r7, #2]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004980:	e003      	b.n	800498a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004982:	887b      	ldrh	r3, [r7, #2]
 8004984:	041a      	lsls	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	619a      	str	r2, [r3, #24]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e0bf      	b.n	8004b2a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f8ba 	bl	8004b38 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80049da:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6999      	ldr	r1, [r3, #24]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049f0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6899      	ldr	r1, [r3, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	4b4a      	ldr	r3, [pc, #296]	; (8004b34 <HAL_LTDC_Init+0x19c>)
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	041b      	lsls	r3, r3, #16
 8004a16:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6899      	ldr	r1, [r3, #8]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	431a      	orrs	r2, r3
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68d9      	ldr	r1, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <HAL_LTDC_Init+0x19c>)
 8004a3a:	400b      	ands	r3, r1
 8004a3c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68d9      	ldr	r1, [r3, #12]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a1a      	ldr	r2, [r3, #32]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	431a      	orrs	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6919      	ldr	r1, [r3, #16]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4b33      	ldr	r3, [pc, #204]	; (8004b34 <HAL_LTDC_Init+0x19c>)
 8004a68:	400b      	ands	r3, r1
 8004a6a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	041b      	lsls	r3, r3, #16
 8004a72:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6919      	ldr	r1, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	431a      	orrs	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6959      	ldr	r1, [r3, #20]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b27      	ldr	r3, [pc, #156]	; (8004b34 <HAL_LTDC_Init+0x19c>)
 8004a96:	400b      	ands	r3, r1
 8004a98:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	041b      	lsls	r3, r3, #16
 8004aa0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6959      	ldr	r1, [r3, #20]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004abe:	021b      	lsls	r3, r3, #8
 8004ac0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004ac8:	041b      	lsls	r3, r3, #16
 8004aca:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8004ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0206 	orr.w	r2, r2, #6
 8004b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	f000f800 	.word	0xf000f800

08004b38 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b4c:	b5b0      	push	{r4, r5, r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_LTDC_ConfigLayer+0x1a>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e02c      	b.n	8004bc0 <HAL_LTDC_ConfigLayer+0x74>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2202      	movs	r2, #2
 8004b72:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2134      	movs	r1, #52	; 0x34
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	4413      	add	r3, r2
 8004b82:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	4614      	mov	r4, r2
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b98:	682b      	ldr	r3, [r5, #0]
 8004b9a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f83b 	bl	8004c1c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bdb0      	pop	{r4, r5, r7, pc}

08004bc8 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_LTDC_EnableDither+0x16>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e016      	b.n	8004c0c <HAL_LTDC_EnableDither+0x44>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8004bee:	4b0a      	ldr	r3, [pc, #40]	; (8004c18 <HAL_LTDC_EnableDither+0x50>)
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_LTDC_EnableDither+0x50>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf8:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	40016800 	.word	0x40016800

08004c1c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c38:	4413      	add	r3, r2
 8004c3a:	041b      	lsls	r3, r3, #16
 8004c3c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	461a      	mov	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	01db      	lsls	r3, r3, #7
 8004c48:	4413      	add	r3, r2
 8004c4a:	3384      	adds	r3, #132	; 0x84
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	6812      	ldr	r2, [r2, #0]
 8004c52:	4611      	mov	r1, r2
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	01d2      	lsls	r2, r2, #7
 8004c58:	440a      	add	r2, r1
 8004c5a:	3284      	adds	r2, #132	; 0x84
 8004c5c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004c60:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c72:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c74:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	01db      	lsls	r3, r3, #7
 8004c80:	440b      	add	r3, r1
 8004c82:	3384      	adds	r3, #132	; 0x84
 8004c84:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004c8a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c9a:	4413      	add	r3, r2
 8004c9c:	041b      	lsls	r3, r3, #16
 8004c9e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	01db      	lsls	r3, r3, #7
 8004caa:	4413      	add	r3, r2
 8004cac:	3384      	adds	r3, #132	; 0x84
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	4611      	mov	r1, r2
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	01d2      	lsls	r2, r2, #7
 8004cba:	440a      	add	r2, r1
 8004cbc:	3284      	adds	r2, #132	; 0x84
 8004cbe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004cc2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd2:	4413      	add	r3, r2
 8004cd4:	1c5a      	adds	r2, r3, #1
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4619      	mov	r1, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3384      	adds	r3, #132	; 0x84
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	01db      	lsls	r3, r3, #7
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3384      	adds	r3, #132	; 0x84
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	6812      	ldr	r2, [r2, #0]
 8004d00:	4611      	mov	r1, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	01d2      	lsls	r2, r2, #7
 8004d06:	440a      	add	r2, r1
 8004d08:	3284      	adds	r2, #132	; 0x84
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	01db      	lsls	r3, r3, #7
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3384      	adds	r3, #132	; 0x84
 8004d1e:	461a      	mov	r2, r3
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004d2c:	021b      	lsls	r3, r3, #8
 8004d2e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8004d36:	041b      	lsls	r3, r3, #16
 8004d38:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	061b      	lsls	r3, r3, #24
 8004d40:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	01db      	lsls	r3, r3, #7
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3384      	adds	r3, #132	; 0x84
 8004d50:	699b      	ldr	r3, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	461a      	mov	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	01db      	lsls	r3, r3, #7
 8004d5c:	4413      	add	r3, r2
 8004d5e:	3384      	adds	r3, #132	; 0x84
 8004d60:	461a      	mov	r2, r3
 8004d62:	2300      	movs	r3, #0
 8004d64:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	431a      	orrs	r2, r3
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	431a      	orrs	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	01db      	lsls	r3, r3, #7
 8004d80:	440b      	add	r3, r1
 8004d82:	3384      	adds	r3, #132	; 0x84
 8004d84:	4619      	mov	r1, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	461a      	mov	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	01db      	lsls	r3, r3, #7
 8004d96:	4413      	add	r3, r2
 8004d98:	3384      	adds	r3, #132	; 0x84
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	4611      	mov	r1, r2
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	01d2      	lsls	r2, r2, #7
 8004da6:	440a      	add	r2, r1
 8004da8:	3284      	adds	r2, #132	; 0x84
 8004daa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004dae:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	01db      	lsls	r3, r3, #7
 8004dba:	4413      	add	r3, r2
 8004dbc:	3384      	adds	r3, #132	; 0x84
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	01db      	lsls	r3, r3, #7
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3384      	adds	r3, #132	; 0x84
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	4611      	mov	r1, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	01d2      	lsls	r2, r2, #7
 8004de0:	440a      	add	r2, r1
 8004de2:	3284      	adds	r2, #132	; 0x84
 8004de4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004de8:	f023 0307 	bic.w	r3, r3, #7
 8004dec:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	69da      	ldr	r2, [r3, #28]
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	68f9      	ldr	r1, [r7, #12]
 8004df8:	6809      	ldr	r1, [r1, #0]
 8004dfa:	4608      	mov	r0, r1
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	01c9      	lsls	r1, r1, #7
 8004e00:	4401      	add	r1, r0
 8004e02:	3184      	adds	r1, #132	; 0x84
 8004e04:	4313      	orrs	r3, r2
 8004e06:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	01db      	lsls	r3, r3, #7
 8004e12:	4413      	add	r3, r2
 8004e14:	3384      	adds	r3, #132	; 0x84
 8004e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	01db      	lsls	r3, r3, #7
 8004e22:	4413      	add	r3, r2
 8004e24:	3384      	adds	r3, #132	; 0x84
 8004e26:	461a      	mov	r2, r3
 8004e28:	2300      	movs	r3, #0
 8004e2a:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	01db      	lsls	r3, r3, #7
 8004e36:	4413      	add	r3, r2
 8004e38:	3384      	adds	r3, #132	; 0x84
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e40:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	691b      	ldr	r3, [r3, #16]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004e4a:	2304      	movs	r3, #4
 8004e4c:	61fb      	str	r3, [r7, #28]
 8004e4e:	e01b      	b.n	8004e88 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	61fb      	str	r3, [r7, #28]
 8004e5c:	e014      	b.n	8004e88 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d00b      	beq.n	8004e7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d007      	beq.n	8004e7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d003      	beq.n	8004e7e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004e7a:	2b07      	cmp	r3, #7
 8004e7c:	d102      	bne.n	8004e84 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004e7e:	2302      	movs	r3, #2
 8004e80:	61fb      	str	r3, [r7, #28]
 8004e82:	e001      	b.n	8004e88 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004e84:	2301      	movs	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	01db      	lsls	r3, r3, #7
 8004e92:	4413      	add	r3, r2
 8004e94:	3384      	adds	r3, #132	; 0x84
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4611      	mov	r1, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	01d2      	lsls	r2, r2, #7
 8004ea2:	440a      	add	r2, r1
 8004ea4:	3284      	adds	r2, #132	; 0x84
 8004ea6:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8004eaa:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb0:	69fa      	ldr	r2, [r7, #28]
 8004eb2:	fb02 f303 	mul.w	r3, r2, r3
 8004eb6:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	6859      	ldr	r1, [r3, #4]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	1acb      	subs	r3, r1, r3
 8004ec2:	69f9      	ldr	r1, [r7, #28]
 8004ec4:	fb01 f303 	mul.w	r3, r1, r3
 8004ec8:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6809      	ldr	r1, [r1, #0]
 8004ece:	4608      	mov	r0, r1
 8004ed0:	6879      	ldr	r1, [r7, #4]
 8004ed2:	01c9      	lsls	r1, r1, #7
 8004ed4:	4401      	add	r1, r0
 8004ed6:	3184      	adds	r1, #132	; 0x84
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	01db      	lsls	r3, r3, #7
 8004ee6:	4413      	add	r3, r2
 8004ee8:	3384      	adds	r3, #132	; 0x84
 8004eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	01d2      	lsls	r2, r2, #7
 8004ef6:	440a      	add	r2, r1
 8004ef8:	3284      	adds	r2, #132	; 0x84
 8004efa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004efe:	f023 0307 	bic.w	r3, r3, #7
 8004f02:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	01db      	lsls	r3, r3, #7
 8004f0e:	4413      	add	r3, r2
 8004f10:	3384      	adds	r3, #132	; 0x84
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	01db      	lsls	r3, r3, #7
 8004f24:	4413      	add	r3, r2
 8004f26:	3384      	adds	r3, #132	; 0x84
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	4611      	mov	r1, r2
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	01d2      	lsls	r2, r2, #7
 8004f34:	440a      	add	r2, r1
 8004f36:	3284      	adds	r2, #132	; 0x84
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004f4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4c:	b08f      	sub	sp, #60	; 0x3c
 8004f4e:	af0a      	add	r7, sp, #40	; 0x28
 8004f50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e10f      	b.n	800517c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f009 ff0c 	bl	800ed94 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2203      	movs	r2, #3
 8004f80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f003 fc5b 	bl	8008856 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	603b      	str	r3, [r7, #0]
 8004fa6:	687e      	ldr	r6, [r7, #4]
 8004fa8:	466d      	mov	r5, sp
 8004faa:	f106 0410 	add.w	r4, r6, #16
 8004fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fb4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fb6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fba:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fbe:	1d33      	adds	r3, r6, #4
 8004fc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc2:	6838      	ldr	r0, [r7, #0]
 8004fc4:	f003 fb32 	bl	800862c <USB_CoreInit>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e0d0      	b.n	800517c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2100      	movs	r1, #0
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f003 fc49 	bl	8008878 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e04a      	b.n	8005082 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004fec:	7bfa      	ldrb	r2, [r7, #15]
 8004fee:	6879      	ldr	r1, [r7, #4]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	00db      	lsls	r3, r3, #3
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	440b      	add	r3, r1
 8004ffa:	333d      	adds	r3, #61	; 0x3d
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005000:	7bfa      	ldrb	r2, [r7, #15]
 8005002:	6879      	ldr	r1, [r7, #4]
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	333c      	adds	r3, #60	; 0x3c
 8005010:	7bfa      	ldrb	r2, [r7, #15]
 8005012:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005014:	7bfa      	ldrb	r2, [r7, #15]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	b298      	uxth	r0, r3
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	3344      	adds	r3, #68	; 0x44
 8005028:	4602      	mov	r2, r0
 800502a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800502c:	7bfa      	ldrb	r2, [r7, #15]
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4413      	add	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	440b      	add	r3, r1
 800503a:	3340      	adds	r3, #64	; 0x40
 800503c:	2200      	movs	r2, #0
 800503e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005040:	7bfa      	ldrb	r2, [r7, #15]
 8005042:	6879      	ldr	r1, [r7, #4]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	440b      	add	r3, r1
 800504e:	3348      	adds	r3, #72	; 0x48
 8005050:	2200      	movs	r2, #0
 8005052:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	4613      	mov	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	334c      	adds	r3, #76	; 0x4c
 8005064:	2200      	movs	r2, #0
 8005066:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005068:	7bfa      	ldrb	r2, [r7, #15]
 800506a:	6879      	ldr	r1, [r7, #4]
 800506c:	4613      	mov	r3, r2
 800506e:	00db      	lsls	r3, r3, #3
 8005070:	4413      	add	r3, r2
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	440b      	add	r3, r1
 8005076:	3354      	adds	r3, #84	; 0x54
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	3301      	adds	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	429a      	cmp	r2, r3
 800508a:	d3af      	bcc.n	8004fec <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e044      	b.n	800511c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80050a4:	2200      	movs	r2, #0
 80050a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80050be:	7bfa      	ldrb	r2, [r7, #15]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80050d4:	7bfa      	ldrb	r2, [r7, #15]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80050e6:	2200      	movs	r2, #0
 80050e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005100:	7bfa      	ldrb	r2, [r7, #15]
 8005102:	6879      	ldr	r1, [r7, #4]
 8005104:	4613      	mov	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	4413      	add	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	440b      	add	r3, r1
 800510e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005112:	2200      	movs	r2, #0
 8005114:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005116:	7bfb      	ldrb	r3, [r7, #15]
 8005118:	3301      	adds	r3, #1
 800511a:	73fb      	strb	r3, [r7, #15]
 800511c:	7bfa      	ldrb	r2, [r7, #15]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3b5      	bcc.n	8005092 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	687e      	ldr	r6, [r7, #4]
 800512e:	466d      	mov	r5, sp
 8005130:	f106 0410 	add.w	r4, r6, #16
 8005134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800513a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800513c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005140:	e885 0003 	stmia.w	r5, {r0, r1}
 8005144:	1d33      	adds	r3, r6, #4
 8005146:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005148:	6838      	ldr	r0, [r7, #0]
 800514a:	f003 fbe1 	bl	8008910 <USB_DevInit>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d005      	beq.n	8005160 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e00d      	b.n	800517c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f004 fd30 	bl	8009bda <USB_DevDisconnect>

  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3714      	adds	r7, #20
 8005180:	46bd      	mov	sp, r7
 8005182:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005184 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005198:	2b01      	cmp	r3, #1
 800519a:	d101      	bne.n	80051a0 <HAL_PCD_Start+0x1c>
 800519c:	2302      	movs	r3, #2
 800519e:	e020      	b.n	80051e2 <HAL_PCD_Start+0x5e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d109      	bne.n	80051c4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d005      	beq.n	80051c4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4618      	mov	r0, r3
 80051ca:	f003 fb33 	bl	8008834 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f004 fce0 	bl	8009b98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80051ea:	b590      	push	{r4, r7, lr}
 80051ec:	b08d      	sub	sp, #52	; 0x34
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f004 fd9e 	bl	8009d42 <USB_GetMode>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	f040 848a 	bne.w	8005b22 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f004 fd02 	bl	8009c1c <USB_ReadInterrupts>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	f000 8480 	beq.w	8005b20 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	0a1b      	lsrs	r3, r3, #8
 800522a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f004 fcef 	bl	8009c1c <USB_ReadInterrupts>
 800523e:	4603      	mov	r3, r0
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b02      	cmp	r3, #2
 8005246:	d107      	bne.n	8005258 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	695a      	ldr	r2, [r3, #20]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f002 0202 	and.w	r2, r2, #2
 8005256:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f004 fcdd 	bl	8009c1c <USB_ReadInterrupts>
 8005262:	4603      	mov	r3, r0
 8005264:	f003 0310 	and.w	r3, r3, #16
 8005268:	2b10      	cmp	r3, #16
 800526a:	d161      	bne.n	8005330 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0210 	bic.w	r2, r2, #16
 800527a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	6a1b      	ldr	r3, [r3, #32]
 8005280:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	f003 020f 	and.w	r2, r3, #15
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	4413      	add	r3, r2
 8005298:	3304      	adds	r3, #4
 800529a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	0c5b      	lsrs	r3, r3, #17
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d124      	bne.n	80052f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80052ae:	4013      	ands	r3, r2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d035      	beq.n	8005320 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	091b      	lsrs	r3, r3, #4
 80052bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80052be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	6a38      	ldr	r0, [r7, #32]
 80052c8:	f004 fb14 	bl	80098f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052d8:	441a      	add	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	6a1a      	ldr	r2, [r3, #32]
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	441a      	add	r2, r3
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
 80052f0:	e016      	b.n	8005320 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	0c5b      	lsrs	r3, r3, #17
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	d110      	bne.n	8005320 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005304:	2208      	movs	r2, #8
 8005306:	4619      	mov	r1, r3
 8005308:	6a38      	ldr	r0, [r7, #32]
 800530a:	f004 faf3 	bl	80098f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	6a1a      	ldr	r2, [r3, #32]
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	091b      	lsrs	r3, r3, #4
 8005316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800531a:	441a      	add	r2, r3
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699a      	ldr	r2, [r3, #24]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0210 	orr.w	r2, r2, #16
 800532e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4618      	mov	r0, r3
 8005336:	f004 fc71 	bl	8009c1c <USB_ReadInterrupts>
 800533a:	4603      	mov	r3, r0
 800533c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005340:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005344:	f040 80a7 	bne.w	8005496 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005348:	2300      	movs	r3, #0
 800534a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f004 fc76 	bl	8009c42 <USB_ReadDevAllOutEpInterrupt>
 8005356:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005358:	e099      	b.n	800548e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 808e 	beq.w	8005482 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f004 fc9a 	bl	8009caa <USB_ReadDevOutEPInterrupt>
 8005376:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538e:	461a      	mov	r2, r3
 8005390:	2301      	movs	r3, #1
 8005392:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005394:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fec2 	bl	8006120 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80053a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b2:	461a      	mov	r2, r3
 80053b4:	2308      	movs	r3, #8
 80053b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80053b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 ff98 	bl	80062f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0310 	and.w	r3, r3, #16
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d008      	beq.n	80053dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053d6:	461a      	mov	r2, r3
 80053d8:	2310      	movs	r3, #16
 80053da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d030      	beq.n	8005448 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d109      	bne.n	8005406 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	69fa      	ldr	r2, [r7, #28]
 80053fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005400:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005404:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005408:	4613      	mov	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	4413      	add	r3, r2
 800540e:	009b      	lsls	r3, r3, #2
 8005410:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	4413      	add	r3, r2
 8005418:	3304      	adds	r3, #4
 800541a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d108      	bne.n	8005436 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2200      	movs	r2, #0
 8005428:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	b2db      	uxtb	r3, r3
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f009 fdb1 	bl	800ef98 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	2302      	movs	r3, #2
 8005446:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	f003 0320 	and.w	r3, r3, #32
 800544e:	2b00      	cmp	r3, #0
 8005450:	d008      	beq.n	8005464 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005454:	015a      	lsls	r2, r3, #5
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	4413      	add	r3, r2
 800545a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800545e:	461a      	mov	r2, r3
 8005460:	2320      	movs	r3, #32
 8005462:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800546e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800547a:	461a      	mov	r2, r3
 800547c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005480:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	3301      	adds	r3, #1
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	2b00      	cmp	r3, #0
 8005492:	f47f af62 	bne.w	800535a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4618      	mov	r0, r3
 800549c:	f004 fbbe 	bl	8009c1c <USB_ReadInterrupts>
 80054a0:	4603      	mov	r3, r0
 80054a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054aa:	f040 80db 	bne.w	8005664 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f004 fbdf 	bl	8009c76 <USB_ReadDevAllInEpInterrupt>
 80054b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80054be:	e0cd      	b.n	800565c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f000 80c2 	beq.w	8005650 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d2:	b2d2      	uxtb	r2, r2
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f004 fc05 	bl	8009ce6 <USB_ReadDevInEPInterrupt>
 80054dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d057      	beq.n	8005598 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80054e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ea:	f003 030f 	and.w	r3, r3, #15
 80054ee:	2201      	movs	r2, #1
 80054f0:	fa02 f303 	lsl.w	r3, r2, r3
 80054f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43db      	mvns	r3, r3
 8005502:	69f9      	ldr	r1, [r7, #28]
 8005504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005508:	4013      	ands	r3, r2
 800550a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	2301      	movs	r3, #1
 800551c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d132      	bne.n	800558c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800552a:	4613      	mov	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	4413      	add	r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334c      	adds	r3, #76	; 0x4c
 8005536:	6819      	ldr	r1, [r3, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	4403      	add	r3, r0
 8005546:	3348      	adds	r3, #72	; 0x48
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4419      	add	r1, r3
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	4613      	mov	r3, r2
 8005552:	00db      	lsls	r3, r3, #3
 8005554:	4413      	add	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4403      	add	r3, r0
 800555a:	334c      	adds	r3, #76	; 0x4c
 800555c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	d113      	bne.n	800558c <HAL_PCD_IRQHandler+0x3a2>
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	3354      	adds	r3, #84	; 0x54
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d108      	bne.n	800558c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005584:	461a      	mov	r2, r3
 8005586:	2101      	movs	r1, #1
 8005588:	f004 fc0c 	bl	8009da4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4619      	mov	r1, r3
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f009 fc7b 	bl	800ee8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ae:	461a      	mov	r2, r3
 80055b0:	2308      	movs	r3, #8
 80055b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d008      	beq.n	80055d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	015a      	lsls	r2, r3, #5
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	4413      	add	r3, r2
 80055c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ca:	461a      	mov	r2, r3
 80055cc:	2310      	movs	r3, #16
 80055ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d008      	beq.n	80055ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80055da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055dc:	015a      	lsls	r2, r3, #5
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	4413      	add	r3, r2
 80055e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e6:	461a      	mov	r2, r3
 80055e8:	2340      	movs	r3, #64	; 0x40
 80055ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d023      	beq.n	800563e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80055f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055f8:	6a38      	ldr	r0, [r7, #32]
 80055fa:	f003 faed 	bl	8008bd8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80055fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005600:	4613      	mov	r3, r2
 8005602:	00db      	lsls	r3, r3, #3
 8005604:	4413      	add	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	3338      	adds	r3, #56	; 0x38
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	4413      	add	r3, r2
 800560e:	3304      	adds	r3, #4
 8005610:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	78db      	ldrb	r3, [r3, #3]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d108      	bne.n	800562c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	b2db      	uxtb	r3, r3
 8005624:	4619      	mov	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f009 fcc8 	bl	800efbc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800562c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562e:	015a      	lsls	r2, r3, #5
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	4413      	add	r3, r2
 8005634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005638:	461a      	mov	r2, r3
 800563a:	2302      	movs	r3, #2
 800563c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005648:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 fcdb 	bl	8006006 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005652:	3301      	adds	r3, #1
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b00      	cmp	r3, #0
 8005660:	f47f af2e 	bne.w	80054c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f004 fad7 	bl	8009c1c <USB_ReadInterrupts>
 800566e:	4603      	mov	r3, r0
 8005670:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005674:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005678:	d122      	bne.n	80056c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	69fa      	ldr	r2, [r7, #28]
 8005684:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005694:	2b01      	cmp	r3, #1
 8005696:	d108      	bne.n	80056aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056a0:	2100      	movs	r1, #0
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fec2 	bl	800642c <HAL_PCDEx_LPM_Callback>
 80056a8:	e002      	b.n	80056b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f009 fc66 	bl	800ef7c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80056be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f004 faa9 	bl	8009c1c <USB_ReadInterrupts>
 80056ca:	4603      	mov	r3, r0
 80056cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056d4:	d112      	bne.n	80056fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d102      	bne.n	80056ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f009 fc22 	bl	800ef30 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695a      	ldr	r2, [r3, #20]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80056fa:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f004 fa8b 	bl	8009c1c <USB_ReadInterrupts>
 8005706:	4603      	mov	r3, r0
 8005708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800570c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005710:	f040 80b7 	bne.w	8005882 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	69fa      	ldr	r2, [r7, #28]
 800571e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005722:	f023 0301 	bic.w	r3, r3, #1
 8005726:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2110      	movs	r1, #16
 800572e:	4618      	mov	r0, r3
 8005730:	f003 fa52 	bl	8008bd8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005734:	2300      	movs	r3, #0
 8005736:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005738:	e046      	b.n	80057c8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	015a      	lsls	r2, r3, #5
 800573e:	69fb      	ldr	r3, [r7, #28]
 8005740:	4413      	add	r3, r2
 8005742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005746:	461a      	mov	r2, r3
 8005748:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800574c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	0151      	lsls	r1, r2, #5
 8005760:	69fa      	ldr	r2, [r7, #28]
 8005762:	440a      	add	r2, r1
 8005764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005768:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800576c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800576e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	461a      	mov	r2, r3
 800577c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005780:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005792:	0151      	lsls	r1, r2, #5
 8005794:	69fa      	ldr	r2, [r7, #28]
 8005796:	440a      	add	r2, r1
 8005798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800579c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80057a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80057a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057b2:	0151      	lsls	r1, r2, #5
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	440a      	add	r2, r1
 80057b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80057c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c4:	3301      	adds	r3, #1
 80057c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d3b3      	bcc.n	800573a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80057e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057f8:	69fa      	ldr	r2, [r7, #28]
 80057fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057fe:	f043 030b 	orr.w	r3, r3, #11
 8005802:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800580c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005814:	f043 030b 	orr.w	r3, r3, #11
 8005818:	6453      	str	r3, [r2, #68]	; 0x44
 800581a:	e015      	b.n	8005848 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800582e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005832:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005842:	f043 030b 	orr.w	r3, r3, #11
 8005846:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005856:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800585a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800586c:	461a      	mov	r2, r3
 800586e:	f004 fa99 	bl	8009da4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	695a      	ldr	r2, [r3, #20]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005880:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4618      	mov	r0, r3
 8005888:	f004 f9c8 	bl	8009c1c <USB_ReadInterrupts>
 800588c:	4603      	mov	r3, r0
 800588e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005896:	d124      	bne.n	80058e2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4618      	mov	r0, r3
 800589e:	f004 fa5e 	bl	8009d5e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4618      	mov	r0, r3
 80058a8:	f003 fa13 	bl	8008cd2 <USB_GetDevSpeed>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461a      	mov	r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681c      	ldr	r4, [r3, #0]
 80058b8:	f001 fa34 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 80058bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	4620      	mov	r0, r4
 80058c8:	f002 ff12 	bl	80086f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f009 fb06 	bl	800eede <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695a      	ldr	r2, [r3, #20]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80058e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4618      	mov	r0, r3
 80058e8:	f004 f998 	bl	8009c1c <USB_ReadInterrupts>
 80058ec:	4603      	mov	r3, r0
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d10a      	bne.n	800590c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f009 fae3 	bl	800eec2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f002 0208 	and.w	r2, r2, #8
 800590a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f004 f983 	bl	8009c1c <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591c:	2b80      	cmp	r3, #128	; 0x80
 800591e:	d122      	bne.n	8005966 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005920:	6a3b      	ldr	r3, [r7, #32]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800592c:	2301      	movs	r3, #1
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	e014      	b.n	800595c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005932:	6879      	ldr	r1, [r7, #4]
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d105      	bne.n	8005956 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	b2db      	uxtb	r3, r3
 800594e:	4619      	mov	r1, r3
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fb27 	bl	8005fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005958:	3301      	adds	r3, #1
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005962:	429a      	cmp	r2, r3
 8005964:	d3e5      	bcc.n	8005932 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4618      	mov	r0, r3
 800596c:	f004 f956 	bl	8009c1c <USB_ReadInterrupts>
 8005970:	4603      	mov	r3, r0
 8005972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800597a:	d13b      	bne.n	80059f4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800597c:	2301      	movs	r3, #1
 800597e:	627b      	str	r3, [r7, #36]	; 0x24
 8005980:	e02b      	b.n	80059da <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005996:	4613      	mov	r3, r2
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	440b      	add	r3, r1
 80059a0:	3340      	adds	r3, #64	; 0x40
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d115      	bne.n	80059d4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80059a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	da12      	bge.n	80059d4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059b2:	4613      	mov	r3, r2
 80059b4:	00db      	lsls	r3, r3, #3
 80059b6:	4413      	add	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	440b      	add	r3, r1
 80059bc:	333f      	adds	r3, #63	; 0x3f
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	4619      	mov	r1, r3
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fae8 	bl	8005fa4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	3301      	adds	r3, #1
 80059d8:	627b      	str	r3, [r7, #36]	; 0x24
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3ce      	bcc.n	8005982 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f004 f90f 	bl	8009c1c <USB_ReadInterrupts>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a08:	d155      	bne.n	8005ab6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a0e:	e045      	b.n	8005a9c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a12:	015a      	lsls	r2, r3, #5
 8005a14:	69fb      	ldr	r3, [r7, #28]
 8005a16:	4413      	add	r3, r2
 8005a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a24:	4613      	mov	r3, r2
 8005a26:	00db      	lsls	r3, r3, #3
 8005a28:	4413      	add	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	440b      	add	r3, r1
 8005a2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d12e      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a38:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	da2b      	bge.n	8005a96 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005a4a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d121      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	4613      	mov	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	4413      	add	r3, r2
 8005a5c:	009b      	lsls	r3, r3, #2
 8005a5e:	440b      	add	r3, r1
 8005a60:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a64:	2201      	movs	r2, #1
 8005a66:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a70:	6a3b      	ldr	r3, [r7, #32]
 8005a72:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10a      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a92:	6053      	str	r3, [r2, #4]
            break;
 8005a94:	e007      	b.n	8005aa6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	3301      	adds	r3, #1
 8005a9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d3b4      	bcc.n	8005a10 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f004 f8ae 	bl	8009c1c <USB_ReadInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aca:	d10a      	bne.n	8005ae2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f009 fa87 	bl	800efe0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ae0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f004 f898 	bl	8009c1c <USB_ReadInterrupts>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f003 0304 	and.w	r3, r3, #4
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d115      	bne.n	8005b22 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	f003 0304 	and.w	r3, r3, #4
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f009 fa77 	bl	800effc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6859      	ldr	r1, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e000      	b.n	8005b22 <HAL_PCD_IRQHandler+0x938>
      return;
 8005b20:	bf00      	nop
    }
  }
}
 8005b22:	3734      	adds	r7, #52	; 0x34
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd90      	pop	{r4, r7, pc}

08005b28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d101      	bne.n	8005b42 <HAL_PCD_SetAddress+0x1a>
 8005b3e:	2302      	movs	r3, #2
 8005b40:	e013      	b.n	8005b6a <HAL_PCD_SetAddress+0x42>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	78fa      	ldrb	r2, [r7, #3]
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f003 fff6 	bl	8009b4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3708      	adds	r7, #8
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
 8005b7a:	4608      	mov	r0, r1
 8005b7c:	4611      	mov	r1, r2
 8005b7e:	461a      	mov	r2, r3
 8005b80:	4603      	mov	r3, r0
 8005b82:	70fb      	strb	r3, [r7, #3]
 8005b84:	460b      	mov	r3, r1
 8005b86:	803b      	strh	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	da0f      	bge.n	8005bb8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	f003 020f 	and.w	r2, r3, #15
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	3338      	adds	r3, #56	; 0x38
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	4413      	add	r3, r2
 8005bac:	3304      	adds	r3, #4
 8005bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	705a      	strb	r2, [r3, #1]
 8005bb6:	e00f      	b.n	8005bd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	00db      	lsls	r3, r3, #3
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4413      	add	r3, r2
 8005bce:	3304      	adds	r3, #4
 8005bd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 030f 	and.w	r3, r3, #15
 8005bde:	b2da      	uxtb	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005be4:	883a      	ldrh	r2, [r7, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	78ba      	ldrb	r2, [r7, #2]
 8005bee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	785b      	ldrb	r3, [r3, #1]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d004      	beq.n	8005c02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005c02:	78bb      	ldrb	r3, [r7, #2]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d102      	bne.n	8005c0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_PCD_EP_Open+0xaa>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e00e      	b.n	8005c3a <HAL_PCD_EP_Open+0xc8>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f003 f876 	bl	8008d1c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005c38:	7afb      	ldrb	r3, [r7, #11]
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3710      	adds	r7, #16
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b084      	sub	sp, #16
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da0f      	bge.n	8005c76 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c56:	78fb      	ldrb	r3, [r7, #3]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	4413      	add	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	3338      	adds	r3, #56	; 0x38
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	4413      	add	r3, r2
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	705a      	strb	r2, [r3, #1]
 8005c74:	e00f      	b.n	8005c96 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c76:	78fb      	ldrb	r3, [r7, #3]
 8005c78:	f003 020f 	and.w	r2, r3, #15
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	4413      	add	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_PCD_EP_Close+0x6e>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e00e      	b.n	8005cce <HAL_PCD_EP_Close+0x8c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f003 f8b4 	bl	8008e2c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	60f8      	str	r0, [r7, #12]
 8005cde:	607a      	str	r2, [r7, #4]
 8005ce0:	603b      	str	r3, [r7, #0]
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ce6:	7afb      	ldrb	r3, [r7, #11]
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	4613      	mov	r3, r2
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2200      	movs	r2, #0
 8005d16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d18:	7afb      	ldrb	r3, [r7, #11]
 8005d1a:	f003 030f 	and.w	r3, r3, #15
 8005d1e:	b2da      	uxtb	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d102      	bne.n	8005d32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d32:	7afb      	ldrb	r3, [r7, #11]
 8005d34:	f003 030f 	and.w	r3, r3, #15
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	691b      	ldr	r3, [r3, #16]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6979      	ldr	r1, [r7, #20]
 8005d4a:	f003 fb93 	bl	8009474 <USB_EP0StartXfer>
 8005d4e:	e008      	b.n	8005d62 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6818      	ldr	r0, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	6979      	ldr	r1, [r7, #20]
 8005d5e:	f003 f941 	bl	8008fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b083      	sub	sp, #12
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	460b      	mov	r3, r1
 8005d76:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	f003 020f 	and.w	r2, r3, #15
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	4613      	mov	r3, r2
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	440b      	add	r3, r1
 8005d8a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	460b      	mov	r3, r1
 8005daa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	f003 020f 	and.w	r2, r3, #15
 8005db2:	4613      	mov	r3, r2
 8005db4:	00db      	lsls	r3, r3, #3
 8005db6:	4413      	add	r3, r2
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	3338      	adds	r3, #56	; 0x38
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ddc:	7afb      	ldrb	r3, [r7, #11]
 8005dde:	f003 030f 	and.w	r3, r3, #15
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d102      	bne.n	8005df6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005df6:	7afb      	ldrb	r3, [r7, #11]
 8005df8:	f003 030f 	and.w	r3, r3, #15
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d109      	bne.n	8005e14 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6818      	ldr	r0, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6979      	ldr	r1, [r7, #20]
 8005e0e:	f003 fb31 	bl	8009474 <USB_EP0StartXfer>
 8005e12:	e008      	b.n	8005e26 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	f003 f8df 	bl	8008fe4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3718      	adds	r7, #24
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d901      	bls.n	8005e4e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e050      	b.n	8005ef0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	da0f      	bge.n	8005e76 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	f003 020f 	and.w	r2, r3, #15
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4413      	add	r3, r2
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	3338      	adds	r3, #56	; 0x38
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	4413      	add	r3, r2
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2201      	movs	r2, #1
 8005e72:	705a      	strb	r2, [r3, #1]
 8005e74:	e00d      	b.n	8005e92 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005e76:	78fa      	ldrb	r2, [r7, #3]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	00db      	lsls	r3, r3, #3
 8005e7c:	4413      	add	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	3304      	adds	r3, #4
 8005e8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2201      	movs	r2, #1
 8005e96:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	f003 030f 	and.w	r3, r3, #15
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d101      	bne.n	8005eb2 <HAL_PCD_EP_SetStall+0x82>
 8005eae:	2302      	movs	r3, #2
 8005eb0:	e01e      	b.n	8005ef0 <HAL_PCD_EP_SetStall+0xc0>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68f9      	ldr	r1, [r7, #12]
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f003 fd6f 	bl	80099a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6818      	ldr	r0, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	b2d9      	uxtb	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f003 ff5f 	bl	8009da4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 020f 	and.w	r2, r3, #15
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d901      	bls.n	8005f16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e042      	b.n	8005f9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	da0f      	bge.n	8005f3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	f003 020f 	and.w	r2, r3, #15
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	4413      	add	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	3338      	adds	r3, #56	; 0x38
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	3304      	adds	r3, #4
 8005f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2201      	movs	r2, #1
 8005f3a:	705a      	strb	r2, [r3, #1]
 8005f3c:	e00f      	b.n	8005f5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f3e:	78fb      	ldrb	r3, [r7, #3]
 8005f40:	f003 020f 	and.w	r2, r3, #15
 8005f44:	4613      	mov	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	4413      	add	r3, r2
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f64:	78fb      	ldrb	r3, [r7, #3]
 8005f66:	f003 030f 	and.w	r3, r3, #15
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d101      	bne.n	8005f7e <HAL_PCD_EP_ClrStall+0x86>
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e00e      	b.n	8005f9c <HAL_PCD_EP_ClrStall+0xa4>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2201      	movs	r2, #1
 8005f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f003 fd77 	bl	8009a80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005fb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0c      	bge.n	8005fd2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	f003 020f 	and.w	r2, r3, #15
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3338      	adds	r3, #56	; 0x38
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3304      	adds	r3, #4
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e00c      	b.n	8005fec <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fd2:	78fb      	ldrb	r3, [r7, #3]
 8005fd4:	f003 020f 	and.w	r2, r3, #15
 8005fd8:	4613      	mov	r3, r2
 8005fda:	00db      	lsls	r3, r3, #3
 8005fdc:	4413      	add	r3, r2
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	3304      	adds	r3, #4
 8005fea:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68f9      	ldr	r1, [r7, #12]
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f003 fb96 	bl	8009724 <USB_EPStopXfer>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b08a      	sub	sp, #40	; 0x28
 800600a:	af02      	add	r7, sp, #8
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	4413      	add	r3, r2
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	3338      	adds	r3, #56	; 0x38
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	4413      	add	r3, r2
 800602a:	3304      	adds	r3, #4
 800602c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	429a      	cmp	r2, r3
 8006038:	d901      	bls.n	800603e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e06c      	b.n	8006118 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	69fa      	ldr	r2, [r7, #28]
 8006050:	429a      	cmp	r2, r3
 8006052:	d902      	bls.n	800605a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	3303      	adds	r3, #3
 800605e:	089b      	lsrs	r3, r3, #2
 8006060:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006062:	e02b      	b.n	80060bc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	699a      	ldr	r2, [r3, #24]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	429a      	cmp	r2, r3
 8006078:	d902      	bls.n	8006080 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	3303      	adds	r3, #3
 8006084:	089b      	lsrs	r3, r3, #2
 8006086:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6919      	ldr	r1, [r3, #16]
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006098:	b2db      	uxtb	r3, r3
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4603      	mov	r3, r0
 800609e:	6978      	ldr	r0, [r7, #20]
 80060a0:	f003 fbea 	bl	8009878 <USB_WritePacket>

    ep->xfer_buff  += len;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	441a      	add	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	015a      	lsls	r2, r3, #5
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d809      	bhi.n	80060e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80060da:	429a      	cmp	r2, r3
 80060dc:	d203      	bcs.n	80060e6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1be      	bne.n	8006064 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d811      	bhi.n	8006116 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	2201      	movs	r2, #1
 80060fa:	fa02 f303 	lsl.w	r3, r2, r3
 80060fe:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006106:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	43db      	mvns	r3, r3
 800610c:	6939      	ldr	r1, [r7, #16]
 800610e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006112:	4013      	ands	r3, r2
 8006114:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	333c      	adds	r3, #60	; 0x3c
 8006138:	3304      	adds	r3, #4
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d17b      	bne.n	800624e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f003 0308 	and.w	r3, r3, #8
 800615c:	2b00      	cmp	r3, #0
 800615e:	d015      	beq.n	800618c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	4a61      	ldr	r2, [pc, #388]	; (80062e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	f240 80b9 	bls.w	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006170:	2b00      	cmp	r3, #0
 8006172:	f000 80b3 	beq.w	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006182:	461a      	mov	r2, r3
 8006184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006188:	6093      	str	r3, [r2, #8]
 800618a:	e0a7      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	461a      	mov	r2, r3
 80061a4:	2320      	movs	r3, #32
 80061a6:	6093      	str	r3, [r2, #8]
 80061a8:	e098      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 8093 	bne.w	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	4a4b      	ldr	r2, [pc, #300]	; (80062e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d90f      	bls.n	80061de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00a      	beq.n	80061de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d4:	461a      	mov	r2, r3
 80061d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061da:	6093      	str	r3, [r2, #8]
 80061dc:	e07e      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	4613      	mov	r3, r2
 80061e2:	00db      	lsls	r3, r3, #3
 80061e4:	4413      	add	r3, r2
 80061e6:	009b      	lsls	r3, r3, #2
 80061e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4413      	add	r3, r2
 80061f0:	3304      	adds	r3, #4
 80061f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	69da      	ldr	r2, [r3, #28]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	0159      	lsls	r1, r3, #5
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	440b      	add	r3, r1
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d114      	bne.n	8006240 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d109      	bne.n	8006232 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006228:	461a      	mov	r2, r3
 800622a:	2101      	movs	r1, #1
 800622c:	f003 fdba 	bl	8009da4 <USB_EP0_OutStart>
 8006230:	e006      	b.n	8006240 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	441a      	add	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	4619      	mov	r1, r3
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f008 fe06 	bl	800ee58 <HAL_PCD_DataOutStageCallback>
 800624c:	e046      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	4a26      	ldr	r2, [pc, #152]	; (80062ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d124      	bne.n	80062a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00a      	beq.n	8006276 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	015a      	lsls	r2, r3, #5
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	4413      	add	r3, r2
 8006268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800626c:	461a      	mov	r2, r3
 800626e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006272:	6093      	str	r3, [r2, #8]
 8006274:	e032      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0320 	and.w	r3, r3, #32
 800627c:	2b00      	cmp	r3, #0
 800627e:	d008      	beq.n	8006292 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628c:	461a      	mov	r2, r3
 800628e:	2320      	movs	r3, #32
 8006290:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	b2db      	uxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f008 fddd 	bl	800ee58 <HAL_PCD_DataOutStageCallback>
 800629e:	e01d      	b.n	80062dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d114      	bne.n	80062d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4613      	mov	r3, r2
 80062ac:	00db      	lsls	r3, r3, #3
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d108      	bne.n	80062d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6818      	ldr	r0, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062c8:	461a      	mov	r2, r3
 80062ca:	2100      	movs	r1, #0
 80062cc:	f003 fd6a 	bl	8009da4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	4619      	mov	r1, r3
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f008 fdbe 	bl	800ee58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80062dc:	2300      	movs	r3, #0
}
 80062de:	4618      	mov	r0, r3
 80062e0:	3720      	adds	r7, #32
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
 80062e6:	bf00      	nop
 80062e8:	4f54300a 	.word	0x4f54300a
 80062ec:	4f54310a 	.word	0x4f54310a

080062f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	333c      	adds	r3, #60	; 0x3c
 8006308:	3304      	adds	r3, #4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <PCD_EP_OutSetupPacket_int+0x88>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d90e      	bls.n	8006344 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	015a      	lsls	r2, r3, #5
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	4413      	add	r3, r2
 8006338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800633c:	461a      	mov	r2, r3
 800633e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006342:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f008 fd75 	bl	800ee34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <PCD_EP_OutSetupPacket_int+0x88>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d90c      	bls.n	800636c <PCD_EP_OutSetupPacket_int+0x7c>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d108      	bne.n	800636c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006364:	461a      	mov	r2, r3
 8006366:	2101      	movs	r1, #1
 8006368:	f003 fd1c 	bl	8009da4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3718      	adds	r7, #24
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	4f54300a 	.word	0x4f54300a

0800637c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	460b      	mov	r3, r1
 8006386:	70fb      	strb	r3, [r7, #3]
 8006388:	4613      	mov	r3, r2
 800638a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006392:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d107      	bne.n	80063aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800639a:	883b      	ldrh	r3, [r7, #0]
 800639c:	0419      	lsls	r1, r3, #16
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68ba      	ldr	r2, [r7, #8]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	629a      	str	r2, [r3, #40]	; 0x28
 80063a8:	e028      	b.n	80063fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	4413      	add	r3, r2
 80063b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
 80063bc:	e00d      	b.n	80063da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	3340      	adds	r3, #64	; 0x40
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	4413      	add	r3, r2
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	0c1b      	lsrs	r3, r3, #16
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	4413      	add	r3, r2
 80063d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	3301      	adds	r3, #1
 80063d8:	73fb      	strb	r3, [r7, #15]
 80063da:	7bfa      	ldrb	r2, [r7, #15]
 80063dc:	78fb      	ldrb	r3, [r7, #3]
 80063de:	3b01      	subs	r3, #1
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d3ec      	bcc.n	80063be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80063e4:	883b      	ldrh	r3, [r7, #0]
 80063e6:	0418      	lsls	r0, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6819      	ldr	r1, [r3, #0]
 80063ec:	78fb      	ldrb	r3, [r7, #3]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	4302      	orrs	r2, r0
 80063f4:	3340      	adds	r3, #64	; 0x40
 80063f6:	009b      	lsls	r3, r3, #2
 80063f8:	440b      	add	r3, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr

0800640a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	460b      	mov	r3, r1
 8006414:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	460b      	mov	r3, r1
 8006436:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e267      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	d075      	beq.n	800654e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006462:	4b88      	ldr	r3, [pc, #544]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f003 030c 	and.w	r3, r3, #12
 800646a:	2b04      	cmp	r3, #4
 800646c:	d00c      	beq.n	8006488 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800646e:	4b85      	ldr	r3, [pc, #532]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006476:	2b08      	cmp	r3, #8
 8006478:	d112      	bne.n	80064a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800647a:	4b82      	ldr	r3, [pc, #520]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006486:	d10b      	bne.n	80064a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006488:	4b7e      	ldr	r3, [pc, #504]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d05b      	beq.n	800654c <HAL_RCC_OscConfig+0x108>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d157      	bne.n	800654c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e242      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a8:	d106      	bne.n	80064b8 <HAL_RCC_OscConfig+0x74>
 80064aa:	4b76      	ldr	r3, [pc, #472]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a75      	ldr	r2, [pc, #468]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	e01d      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064c0:	d10c      	bne.n	80064dc <HAL_RCC_OscConfig+0x98>
 80064c2:	4b70      	ldr	r3, [pc, #448]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a6f      	ldr	r2, [pc, #444]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	4b6d      	ldr	r3, [pc, #436]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a6c      	ldr	r2, [pc, #432]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	e00b      	b.n	80064f4 <HAL_RCC_OscConfig+0xb0>
 80064dc:	4b69      	ldr	r3, [pc, #420]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a68      	ldr	r2, [pc, #416]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	4b66      	ldr	r3, [pc, #408]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a65      	ldr	r2, [pc, #404]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80064ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d013      	beq.n	8006524 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064fc:	f7fd fb20 	bl	8003b40 <HAL_GetTick>
 8006500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006502:	e008      	b.n	8006516 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006504:	f7fd fb1c 	bl	8003b40 <HAL_GetTick>
 8006508:	4602      	mov	r2, r0
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	2b64      	cmp	r3, #100	; 0x64
 8006510:	d901      	bls.n	8006516 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e207      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006516:	4b5b      	ldr	r3, [pc, #364]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0f0      	beq.n	8006504 <HAL_RCC_OscConfig+0xc0>
 8006522:	e014      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006524:	f7fd fb0c 	bl	8003b40 <HAL_GetTick>
 8006528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800652a:	e008      	b.n	800653e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800652c:	f7fd fb08 	bl	8003b40 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	2b64      	cmp	r3, #100	; 0x64
 8006538:	d901      	bls.n	800653e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800653a:	2303      	movs	r3, #3
 800653c:	e1f3      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800653e:	4b51      	ldr	r3, [pc, #324]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f0      	bne.n	800652c <HAL_RCC_OscConfig+0xe8>
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800654c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b00      	cmp	r3, #0
 8006558:	d063      	beq.n	8006622 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800655a:	4b4a      	ldr	r3, [pc, #296]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 030c 	and.w	r3, r3, #12
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006566:	4b47      	ldr	r3, [pc, #284]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800656e:	2b08      	cmp	r3, #8
 8006570:	d11c      	bne.n	80065ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006572:	4b44      	ldr	r3, [pc, #272]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d116      	bne.n	80065ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657e:	4b41      	ldr	r3, [pc, #260]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <HAL_RCC_OscConfig+0x152>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d001      	beq.n	8006596 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e1c7      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006596:	4b3b      	ldr	r3, [pc, #236]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4937      	ldr	r1, [pc, #220]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065aa:	e03a      	b.n	8006622 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	68db      	ldr	r3, [r3, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d020      	beq.n	80065f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065b4:	4b34      	ldr	r3, [pc, #208]	; (8006688 <HAL_RCC_OscConfig+0x244>)
 80065b6:	2201      	movs	r2, #1
 80065b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ba:	f7fd fac1 	bl	8003b40 <HAL_GetTick>
 80065be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065c0:	e008      	b.n	80065d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80065c2:	f7fd fabd 	bl	8003b40 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e1a8      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d4:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065e0:	4b28      	ldr	r3, [pc, #160]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4925      	ldr	r1, [pc, #148]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	600b      	str	r3, [r1, #0]
 80065f4:	e015      	b.n	8006622 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80065f6:	4b24      	ldr	r3, [pc, #144]	; (8006688 <HAL_RCC_OscConfig+0x244>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fc:	f7fd faa0 	bl	8003b40 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006604:	f7fd fa9c 	bl	8003b40 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b02      	cmp	r3, #2
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e187      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006616:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1f0      	bne.n	8006604 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0308 	and.w	r3, r3, #8
 800662a:	2b00      	cmp	r3, #0
 800662c:	d036      	beq.n	800669c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d016      	beq.n	8006664 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006636:	4b15      	ldr	r3, [pc, #84]	; (800668c <HAL_RCC_OscConfig+0x248>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800663c:	f7fd fa80 	bl	8003b40 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006644:	f7fd fa7c 	bl	8003b40 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e167      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006656:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_OscConfig+0x240>)
 8006658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800665a:	f003 0302 	and.w	r3, r3, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x200>
 8006662:	e01b      	b.n	800669c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <HAL_RCC_OscConfig+0x248>)
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800666a:	f7fd fa69 	bl	8003b40 <HAL_GetTick>
 800666e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006670:	e00e      	b.n	8006690 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006672:	f7fd fa65 	bl	8003b40 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b02      	cmp	r3, #2
 800667e:	d907      	bls.n	8006690 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e150      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
 8006684:	40023800 	.word	0x40023800
 8006688:	42470000 	.word	0x42470000
 800668c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006690:	4b88      	ldr	r3, [pc, #544]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006694:	f003 0302 	and.w	r3, r3, #2
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1ea      	bne.n	8006672 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	f000 8097 	beq.w	80067d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066aa:	2300      	movs	r3, #0
 80066ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ae:	4b81      	ldr	r3, [pc, #516]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10f      	bne.n	80066da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066ba:	2300      	movs	r3, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	4b7d      	ldr	r3, [pc, #500]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	4a7c      	ldr	r2, [pc, #496]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c8:	6413      	str	r3, [r2, #64]	; 0x40
 80066ca:	4b7a      	ldr	r3, [pc, #488]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d2:	60bb      	str	r3, [r7, #8]
 80066d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066d6:	2301      	movs	r3, #1
 80066d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066da:	4b77      	ldr	r3, [pc, #476]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d118      	bne.n	8006718 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066e6:	4b74      	ldr	r3, [pc, #464]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a73      	ldr	r2, [pc, #460]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 80066ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066f2:	f7fd fa25 	bl	8003b40 <HAL_GetTick>
 80066f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f8:	e008      	b.n	800670c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066fa:	f7fd fa21 	bl	8003b40 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	2b02      	cmp	r3, #2
 8006706:	d901      	bls.n	800670c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e10c      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670c:	4b6a      	ldr	r3, [pc, #424]	; (80068b8 <HAL_RCC_OscConfig+0x474>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006714:	2b00      	cmp	r3, #0
 8006716:	d0f0      	beq.n	80066fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b01      	cmp	r3, #1
 800671e:	d106      	bne.n	800672e <HAL_RCC_OscConfig+0x2ea>
 8006720:	4b64      	ldr	r3, [pc, #400]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006724:	4a63      	ldr	r2, [pc, #396]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006726:	f043 0301 	orr.w	r3, r3, #1
 800672a:	6713      	str	r3, [r2, #112]	; 0x70
 800672c:	e01c      	b.n	8006768 <HAL_RCC_OscConfig+0x324>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	2b05      	cmp	r3, #5
 8006734:	d10c      	bne.n	8006750 <HAL_RCC_OscConfig+0x30c>
 8006736:	4b5f      	ldr	r3, [pc, #380]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800673a:	4a5e      	ldr	r2, [pc, #376]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	6713      	str	r3, [r2, #112]	; 0x70
 8006742:	4b5c      	ldr	r3, [pc, #368]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006746:	4a5b      	ldr	r2, [pc, #364]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006748:	f043 0301 	orr.w	r3, r3, #1
 800674c:	6713      	str	r3, [r2, #112]	; 0x70
 800674e:	e00b      	b.n	8006768 <HAL_RCC_OscConfig+0x324>
 8006750:	4b58      	ldr	r3, [pc, #352]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006754:	4a57      	ldr	r2, [pc, #348]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006756:	f023 0301 	bic.w	r3, r3, #1
 800675a:	6713      	str	r3, [r2, #112]	; 0x70
 800675c:	4b55      	ldr	r3, [pc, #340]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006760:	4a54      	ldr	r2, [pc, #336]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006762:	f023 0304 	bic.w	r3, r3, #4
 8006766:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d015      	beq.n	800679c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006770:	f7fd f9e6 	bl	8003b40 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006776:	e00a      	b.n	800678e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006778:	f7fd f9e2 	bl	8003b40 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	f241 3288 	movw	r2, #5000	; 0x1388
 8006786:	4293      	cmp	r3, r2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e0cb      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678e:	4b49      	ldr	r3, [pc, #292]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0ee      	beq.n	8006778 <HAL_RCC_OscConfig+0x334>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800679c:	f7fd f9d0 	bl	8003b40 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067a2:	e00a      	b.n	80067ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80067a4:	f7fd f9cc 	bl	8003b40 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d901      	bls.n	80067ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e0b5      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067ba:	4b3e      	ldr	r3, [pc, #248]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067be:	f003 0302 	and.w	r3, r3, #2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1ee      	bne.n	80067a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d105      	bne.n	80067d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067cc:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d0:	4a38      	ldr	r2, [pc, #224]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80a1 	beq.w	8006924 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80067e2:	4b34      	ldr	r3, [pc, #208]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f003 030c 	and.w	r3, r3, #12
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d05c      	beq.n	80068a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	2b02      	cmp	r3, #2
 80067f4:	d141      	bne.n	800687a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067f6:	4b31      	ldr	r3, [pc, #196]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067fc:	f7fd f9a0 	bl	8003b40 <HAL_GetTick>
 8006800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006802:	e008      	b.n	8006816 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006804:	f7fd f99c 	bl	8003b40 <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	2b02      	cmp	r3, #2
 8006810:	d901      	bls.n	8006816 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006812:	2303      	movs	r3, #3
 8006814:	e087      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006816:	4b27      	ldr	r3, [pc, #156]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1f0      	bne.n	8006804 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69da      	ldr	r2, [r3, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	431a      	orrs	r2, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	085b      	lsrs	r3, r3, #1
 800683a:	3b01      	subs	r3, #1
 800683c:	041b      	lsls	r3, r3, #16
 800683e:	431a      	orrs	r2, r3
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	491b      	ldr	r1, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 8006848:	4313      	orrs	r3, r2
 800684a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800684c:	4b1b      	ldr	r3, [pc, #108]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 800684e:	2201      	movs	r2, #1
 8006850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006852:	f7fd f975 	bl	8003b40 <HAL_GetTick>
 8006856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006858:	e008      	b.n	800686c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800685a:	f7fd f971 	bl	8003b40 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	2b02      	cmp	r3, #2
 8006866:	d901      	bls.n	800686c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e05c      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006874:	2b00      	cmp	r3, #0
 8006876:	d0f0      	beq.n	800685a <HAL_RCC_OscConfig+0x416>
 8006878:	e054      	b.n	8006924 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800687a:	4b10      	ldr	r3, [pc, #64]	; (80068bc <HAL_RCC_OscConfig+0x478>)
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006880:	f7fd f95e 	bl	8003b40 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006888:	f7fd f95a 	bl	8003b40 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e045      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800689a:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <HAL_RCC_OscConfig+0x470>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0x444>
 80068a6:	e03d      	b.n	8006924 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	699b      	ldr	r3, [r3, #24]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d107      	bne.n	80068c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e038      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
 80068b4:	40023800 	.word	0x40023800
 80068b8:	40007000 	.word	0x40007000
 80068bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80068c0:	4b1b      	ldr	r3, [pc, #108]	; (8006930 <HAL_RCC_OscConfig+0x4ec>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d028      	beq.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80068d8:	429a      	cmp	r2, r3
 80068da:	d121      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d11a      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80068f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d111      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	085b      	lsrs	r3, r3, #1
 8006908:	3b01      	subs	r3, #1
 800690a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800690c:	429a      	cmp	r2, r3
 800690e:	d107      	bne.n	8006920 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800691a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800691c:	429a      	cmp	r2, r3
 800691e:	d001      	beq.n	8006924 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e000      	b.n	8006926 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	40023800 	.word	0x40023800

08006934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0cc      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006948:	4b68      	ldr	r3, [pc, #416]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	683a      	ldr	r2, [r7, #0]
 8006952:	429a      	cmp	r2, r3
 8006954:	d90c      	bls.n	8006970 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006956:	4b65      	ldr	r3, [pc, #404]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	b2d2      	uxtb	r2, r2
 800695c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800695e:	4b63      	ldr	r3, [pc, #396]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 030f 	and.w	r3, r3, #15
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	429a      	cmp	r2, r3
 800696a:	d001      	beq.n	8006970 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
 800696e:	e0b8      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d020      	beq.n	80069be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 0304 	and.w	r3, r3, #4
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006988:	4b59      	ldr	r3, [pc, #356]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	4a58      	ldr	r2, [pc, #352]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006992:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069a0:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	4a52      	ldr	r2, [pc, #328]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80069aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069ac:	4b50      	ldr	r3, [pc, #320]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	689b      	ldr	r3, [r3, #8]
 80069b8:	494d      	ldr	r1, [pc, #308]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d044      	beq.n	8006a54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d107      	bne.n	80069e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069d2:	4b47      	ldr	r3, [pc, #284]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d119      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e07f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d003      	beq.n	80069f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069ee:	2b03      	cmp	r3, #3
 80069f0:	d107      	bne.n	8006a02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f2:	4b3f      	ldr	r3, [pc, #252]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d109      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e06f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a02:	4b3b      	ldr	r3, [pc, #236]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f003 0302 	and.w	r3, r3, #2
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d101      	bne.n	8006a12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e067      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a12:	4b37      	ldr	r3, [pc, #220]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f023 0203 	bic.w	r2, r3, #3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	4934      	ldr	r1, [pc, #208]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a24:	f7fd f88c 	bl	8003b40 <HAL_GetTick>
 8006a28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a2a:	e00a      	b.n	8006a42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a2c:	f7fd f888 	bl	8003b40 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e04f      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a42:	4b2b      	ldr	r3, [pc, #172]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	f003 020c 	and.w	r2, r3, #12
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d1eb      	bne.n	8006a2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d20c      	bcs.n	8006a7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a62:	4b22      	ldr	r3, [pc, #136]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	b2d2      	uxtb	r2, r2
 8006a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a6a:	4b20      	ldr	r3, [pc, #128]	; (8006aec <HAL_RCC_ClockConfig+0x1b8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e032      	b.n	8006ae2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d008      	beq.n	8006a9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a88:	4b19      	ldr	r3, [pc, #100]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	4916      	ldr	r1, [pc, #88]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d009      	beq.n	8006aba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	490e      	ldr	r1, [pc, #56]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006aba:	f000 f82d 	bl	8006b18 <HAL_RCC_GetSysClockFreq>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	091b      	lsrs	r3, r3, #4
 8006ac6:	f003 030f 	and.w	r3, r3, #15
 8006aca:	490a      	ldr	r1, [pc, #40]	; (8006af4 <HAL_RCC_ClockConfig+0x1c0>)
 8006acc:	5ccb      	ldrb	r3, [r1, r3]
 8006ace:	fa22 f303 	lsr.w	r3, r2, r3
 8006ad2:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ad6:	4b09      	ldr	r3, [pc, #36]	; (8006afc <HAL_RCC_ClockConfig+0x1c8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fa ff86 	bl	80019ec <HAL_InitTick>

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3710      	adds	r7, #16
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	40023c00 	.word	0x40023c00
 8006af0:	40023800 	.word	0x40023800
 8006af4:	08013e50 	.word	0x08013e50
 8006af8:	20000000 	.word	0x20000000
 8006afc:	20000080 	.word	0x20000080

08006b00 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006b04:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <HAL_RCC_EnableCSS+0x14>)
 8006b06:	2201      	movs	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	4247004c 	.word	0x4247004c

08006b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b1c:	b094      	sub	sp, #80	; 0x50
 8006b1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	647b      	str	r3, [r7, #68]	; 0x44
 8006b24:	2300      	movs	r3, #0
 8006b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b28:	2300      	movs	r3, #0
 8006b2a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b30:	4b79      	ldr	r3, [pc, #484]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 030c 	and.w	r3, r3, #12
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d00d      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0x40>
 8006b3c:	2b08      	cmp	r3, #8
 8006b3e:	f200 80e1 	bhi.w	8006d04 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d002      	beq.n	8006b4c <HAL_RCC_GetSysClockFreq+0x34>
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d003      	beq.n	8006b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b4a:	e0db      	b.n	8006d04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b4c:	4b73      	ldr	r3, [pc, #460]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006b4e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006b50:	e0db      	b.n	8006d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006b52:	4b73      	ldr	r3, [pc, #460]	; (8006d20 <HAL_RCC_GetSysClockFreq+0x208>)
 8006b54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b56:	e0d8      	b.n	8006d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006b58:	4b6f      	ldr	r3, [pc, #444]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b60:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006b62:	4b6d      	ldr	r3, [pc, #436]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d063      	beq.n	8006c36 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b6e:	4b6a      	ldr	r3, [pc, #424]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	099b      	lsrs	r3, r3, #6
 8006b74:	2200      	movs	r2, #0
 8006b76:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b78:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
 8006b86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006b8a:	4622      	mov	r2, r4
 8006b8c:	462b      	mov	r3, r5
 8006b8e:	f04f 0000 	mov.w	r0, #0
 8006b92:	f04f 0100 	mov.w	r1, #0
 8006b96:	0159      	lsls	r1, r3, #5
 8006b98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b9c:	0150      	lsls	r0, r2, #5
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	4621      	mov	r1, r4
 8006ba4:	1a51      	subs	r1, r2, r1
 8006ba6:	6139      	str	r1, [r7, #16]
 8006ba8:	4629      	mov	r1, r5
 8006baa:	eb63 0301 	sbc.w	r3, r3, r1
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	f04f 0200 	mov.w	r2, #0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	018b      	lsls	r3, r1, #6
 8006bc0:	4651      	mov	r1, sl
 8006bc2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006bc6:	4651      	mov	r1, sl
 8006bc8:	018a      	lsls	r2, r1, #6
 8006bca:	4651      	mov	r1, sl
 8006bcc:	ebb2 0801 	subs.w	r8, r2, r1
 8006bd0:	4659      	mov	r1, fp
 8006bd2:	eb63 0901 	sbc.w	r9, r3, r1
 8006bd6:	f04f 0200 	mov.w	r2, #0
 8006bda:	f04f 0300 	mov.w	r3, #0
 8006bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bea:	4690      	mov	r8, r2
 8006bec:	4699      	mov	r9, r3
 8006bee:	4623      	mov	r3, r4
 8006bf0:	eb18 0303 	adds.w	r3, r8, r3
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	462b      	mov	r3, r5
 8006bf8:	eb49 0303 	adc.w	r3, r9, r3
 8006bfc:	60fb      	str	r3, [r7, #12]
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006c0a:	4629      	mov	r1, r5
 8006c0c:	024b      	lsls	r3, r1, #9
 8006c0e:	4621      	mov	r1, r4
 8006c10:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006c14:	4621      	mov	r1, r4
 8006c16:	024a      	lsls	r2, r1, #9
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	2200      	movs	r2, #0
 8006c20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c24:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c28:	f7fa f83e 	bl	8000ca8 <__aeabi_uldivmod>
 8006c2c:	4602      	mov	r2, r0
 8006c2e:	460b      	mov	r3, r1
 8006c30:	4613      	mov	r3, r2
 8006c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c34:	e058      	b.n	8006ce8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c36:	4b38      	ldr	r3, [pc, #224]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	099b      	lsrs	r3, r3, #6
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4618      	mov	r0, r3
 8006c40:	4611      	mov	r1, r2
 8006c42:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006c46:	623b      	str	r3, [r7, #32]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006c50:	4642      	mov	r2, r8
 8006c52:	464b      	mov	r3, r9
 8006c54:	f04f 0000 	mov.w	r0, #0
 8006c58:	f04f 0100 	mov.w	r1, #0
 8006c5c:	0159      	lsls	r1, r3, #5
 8006c5e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c62:	0150      	lsls	r0, r2, #5
 8006c64:	4602      	mov	r2, r0
 8006c66:	460b      	mov	r3, r1
 8006c68:	4641      	mov	r1, r8
 8006c6a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006c6e:	4649      	mov	r1, r9
 8006c70:	eb63 0b01 	sbc.w	fp, r3, r1
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	f04f 0300 	mov.w	r3, #0
 8006c7c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006c80:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006c84:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006c88:	ebb2 040a 	subs.w	r4, r2, sl
 8006c8c:	eb63 050b 	sbc.w	r5, r3, fp
 8006c90:	f04f 0200 	mov.w	r2, #0
 8006c94:	f04f 0300 	mov.w	r3, #0
 8006c98:	00eb      	lsls	r3, r5, #3
 8006c9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c9e:	00e2      	lsls	r2, r4, #3
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	4643      	mov	r3, r8
 8006ca6:	18e3      	adds	r3, r4, r3
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	464b      	mov	r3, r9
 8006cac:	eb45 0303 	adc.w	r3, r5, r3
 8006cb0:	607b      	str	r3, [r7, #4]
 8006cb2:	f04f 0200 	mov.w	r2, #0
 8006cb6:	f04f 0300 	mov.w	r3, #0
 8006cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006cbe:	4629      	mov	r1, r5
 8006cc0:	028b      	lsls	r3, r1, #10
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006cc8:	4621      	mov	r1, r4
 8006cca:	028a      	lsls	r2, r1, #10
 8006ccc:	4610      	mov	r0, r2
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	61fa      	str	r2, [r7, #28]
 8006cd8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cdc:	f7f9 ffe4 	bl	8000ca8 <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	; (8006d18 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006cf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d02:	e002      	b.n	8006d0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006d04:	4b05      	ldr	r3, [pc, #20]	; (8006d1c <HAL_RCC_GetSysClockFreq+0x204>)
 8006d06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3750      	adds	r7, #80	; 0x50
 8006d10:	46bd      	mov	sp, r7
 8006d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d16:	bf00      	nop
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	00f42400 	.word	0x00f42400
 8006d20:	007a1200 	.word	0x007a1200

08006d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d24:	b480      	push	{r7}
 8006d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d28:	4b03      	ldr	r3, [pc, #12]	; (8006d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000000 	.word	0x20000000

08006d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d40:	f7ff fff0 	bl	8006d24 <HAL_RCC_GetHCLKFreq>
 8006d44:	4602      	mov	r2, r0
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	0a9b      	lsrs	r3, r3, #10
 8006d4c:	f003 0307 	and.w	r3, r3, #7
 8006d50:	4903      	ldr	r1, [pc, #12]	; (8006d60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d52:	5ccb      	ldrb	r3, [r1, r3]
 8006d54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	08013e60 	.word	0x08013e60

08006d64 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	220f      	movs	r2, #15
 8006d72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d74:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	f003 0203 	and.w	r2, r3, #3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d8c:	4b0c      	ldr	r3, [pc, #48]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d98:	4b09      	ldr	r3, [pc, #36]	; (8006dc0 <HAL_RCC_GetClockConfig+0x5c>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	08db      	lsrs	r3, r3, #3
 8006d9e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006da6:	4b07      	ldr	r3, [pc, #28]	; (8006dc4 <HAL_RCC_GetClockConfig+0x60>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f003 020f 	and.w	r2, r3, #15
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	601a      	str	r2, [r3, #0]
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40023c00 	.word	0x40023c00

08006dc8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006dcc:	4b06      	ldr	r3, [pc, #24]	; (8006de8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dd4:	2b80      	cmp	r3, #128	; 0x80
 8006dd6:	d104      	bne.n	8006de2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006dd8:	f000 f80a 	bl	8006df0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006ddc:	4b03      	ldr	r3, [pc, #12]	; (8006dec <HAL_RCC_NMI_IRQHandler+0x24>)
 8006dde:	2280      	movs	r2, #128	; 0x80
 8006de0:	701a      	strb	r2, [r3, #0]
  }
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
 8006de6:	bf00      	nop
 8006de8:	40023800 	.word	0x40023800
 8006dec:	4002380e 	.word	0x4002380e

08006df0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10b      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d075      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e34:	4b91      	ldr	r3, [pc, #580]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e3a:	f7fc fe81 	bl	8003b40 <HAL_GetTick>
 8006e3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e40:	e008      	b.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e42:	f7fc fe7d 	bl	8003b40 <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d901      	bls.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e189      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e54:	4b8a      	ldr	r3, [pc, #552]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d1f0      	bne.n	8006e42 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d009      	beq.n	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	019a      	lsls	r2, r3, #6
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	071b      	lsls	r3, r3, #28
 8006e78:	4981      	ldr	r1, [pc, #516]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d01f      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006e8c:	4b7c      	ldr	r3, [pc, #496]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e92:	0f1b      	lsrs	r3, r3, #28
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	019a      	lsls	r2, r3, #6
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	061b      	lsls	r3, r3, #24
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	071b      	lsls	r3, r3, #28
 8006eac:	4974      	ldr	r1, [pc, #464]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006eb4:	4b72      	ldr	r3, [pc, #456]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006eba:	f023 021f 	bic.w	r2, r3, #31
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	69db      	ldr	r3, [r3, #28]
 8006ec2:	3b01      	subs	r3, #1
 8006ec4:	496e      	ldr	r1, [pc, #440]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00d      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	019a      	lsls	r2, r3, #6
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	68db      	ldr	r3, [r3, #12]
 8006ee2:	061b      	lsls	r3, r3, #24
 8006ee4:	431a      	orrs	r2, r3
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	689b      	ldr	r3, [r3, #8]
 8006eea:	071b      	lsls	r3, r3, #28
 8006eec:	4964      	ldr	r1, [pc, #400]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ef4:	4b61      	ldr	r3, [pc, #388]	; (800707c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006efa:	f7fc fe21 	bl	8003b40 <HAL_GetTick>
 8006efe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f00:	e008      	b.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f02:	f7fc fe1d 	bl	8003b40 <HAL_GetTick>
 8006f06:	4602      	mov	r2, r0
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e129      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f14:	4b5a      	ldr	r3, [pc, #360]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d079      	beq.n	800702c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006f38:	4b52      	ldr	r3, [pc, #328]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f3e:	f7fc fdff 	bl	8003b40 <HAL_GetTick>
 8006f42:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f44:	e008      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006f46:	f7fc fdfb 	bl	8003b40 <HAL_GetTick>
 8006f4a:	4602      	mov	r2, r0
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d901      	bls.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e107      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006f58:	4b49      	ldr	r3, [pc, #292]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f64:	d0ef      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d020      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006f72:	4b43      	ldr	r3, [pc, #268]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f78:	0f1b      	lsrs	r3, r3, #28
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	019a      	lsls	r2, r3, #6
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	695b      	ldr	r3, [r3, #20]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	071b      	lsls	r3, r3, #28
 8006f92:	493b      	ldr	r1, [pc, #236]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006f9a:	4b39      	ldr	r3, [pc, #228]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fa0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a1b      	ldr	r3, [r3, #32]
 8006fa8:	3b01      	subs	r3, #1
 8006faa:	021b      	lsls	r3, r3, #8
 8006fac:	4934      	ldr	r1, [pc, #208]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f003 0308 	and.w	r3, r3, #8
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d01e      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006fc0:	4b2f      	ldr	r3, [pc, #188]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc6:	0e1b      	lsrs	r3, r3, #24
 8006fc8:	f003 030f 	and.w	r3, r3, #15
 8006fcc:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	019a      	lsls	r2, r3, #6
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	071b      	lsls	r3, r3, #28
 8006fe0:	4927      	ldr	r1, [pc, #156]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006fe8:	4b25      	ldr	r3, [pc, #148]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	4922      	ldr	r1, [pc, #136]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006ffe:	4b21      	ldr	r3, [pc, #132]	; (8007084 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007000:	2201      	movs	r2, #1
 8007002:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007004:	f7fc fd9c 	bl	8003b40 <HAL_GetTick>
 8007008:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800700a:	e008      	b.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800700c:	f7fc fd98 	bl	8003b40 <HAL_GetTick>
 8007010:	4602      	mov	r2, r0
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	2b02      	cmp	r3, #2
 8007018:	d901      	bls.n	800701e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800701a:	2303      	movs	r3, #3
 800701c:	e0a4      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800701e:	4b18      	ldr	r3, [pc, #96]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800702a:	d1ef      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0320 	and.w	r3, r3, #32
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 808b 	beq.w	8007150 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	4a0f      	ldr	r2, [pc, #60]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007048:	6413      	str	r3, [r2, #64]	; 0x40
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007056:	4b0c      	ldr	r3, [pc, #48]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a0b      	ldr	r2, [pc, #44]	; (8007088 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800705c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007060:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007062:	f7fc fd6d 	bl	8003b40 <HAL_GetTick>
 8007066:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007068:	e010      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800706a:	f7fc fd69 	bl	8003b40 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d909      	bls.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e075      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800707c:	42470068 	.word	0x42470068
 8007080:	40023800 	.word	0x40023800
 8007084:	42470070 	.word	0x42470070
 8007088:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800708c:	4b38      	ldr	r3, [pc, #224]	; (8007170 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0e8      	beq.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007098:	4b36      	ldr	r3, [pc, #216]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800709a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02f      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d028      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80070b6:	4b2f      	ldr	r3, [pc, #188]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070c0:	4b2d      	ldr	r3, [pc, #180]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80070c2:	2201      	movs	r2, #1
 80070c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070c6:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80070cc:	4a29      	ldr	r2, [pc, #164]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80070d2:	4b28      	ldr	r3, [pc, #160]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d114      	bne.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80070de:	f7fc fd2f 	bl	8003b40 <HAL_GetTick>
 80070e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070e4:	e00a      	b.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80070e6:	f7fc fd2b 	bl	8003b40 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d901      	bls.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e035      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070fc:	4b1d      	ldr	r3, [pc, #116]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	f003 0302 	and.w	r3, r3, #2
 8007104:	2b00      	cmp	r3, #0
 8007106:	d0ee      	beq.n	80070e6 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007114:	d10d      	bne.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007116:	4b17      	ldr	r3, [pc, #92]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007126:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712a:	4912      	ldr	r1, [pc, #72]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800712c:	4313      	orrs	r3, r2
 800712e:	608b      	str	r3, [r1, #8]
 8007130:	e005      	b.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007132:	4b10      	ldr	r3, [pc, #64]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	4a0f      	ldr	r2, [pc, #60]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007138:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800713c:	6093      	str	r3, [r2, #8]
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007140:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007146:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800714a:	490a      	ldr	r1, [pc, #40]	; (8007174 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800714c:	4313      	orrs	r3, r2
 800714e:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007162:	4b06      	ldr	r3, [pc, #24]	; (800717c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007164:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007166:	2300      	movs	r3, #0
}
 8007168:	4618      	mov	r0, r3
 800716a:	3718      	adds	r7, #24
 800716c:	46bd      	mov	sp, r7
 800716e:	bd80      	pop	{r7, pc}
 8007170:	40007000 	.word	0x40007000
 8007174:	40023800 	.word	0x40023800
 8007178:	42470e40 	.word	0x42470e40
 800717c:	424711e0 	.word	0x424711e0

08007180 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d101      	bne.n	8007194 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e025      	b.n	80071e0 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800719a:	b2db      	uxtb	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d106      	bne.n	80071ae <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f81d 	bl	80071e8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2202      	movs	r2, #2
 80071b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	3304      	adds	r3, #4
 80071be:	4619      	mov	r1, r3
 80071c0:	4610      	mov	r0, r2
 80071c2:	f001 f919 	bl	80083f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6818      	ldr	r0, [r3, #0]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	f001 f96e 	bl	80084b2 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800720e:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	2b02      	cmp	r3, #2
 8007214:	d101      	bne.n	800721a <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007216:	2302      	movs	r3, #2
 8007218:	e021      	b.n	800725e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800721a:	7dfb      	ldrb	r3, [r7, #23]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d002      	beq.n	8007226 <HAL_SDRAM_SendCommand+0x2a>
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b05      	cmp	r3, #5
 8007224:	d118      	bne.n	8007258 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2202      	movs	r2, #2
 800722a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68b9      	ldr	r1, [r7, #8]
 8007236:	4618      	mov	r0, r3
 8007238:	f001 f9a4 	bl	8008584 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b02      	cmp	r3, #2
 8007242:	d104      	bne.n	800724e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2205      	movs	r2, #5
 8007248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800724c:	e006      	b.n	800725c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007256:	e001      	b.n	800725c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3718      	adds	r7, #24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b02      	cmp	r3, #2
 800727a:	d101      	bne.n	8007280 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
 800727e:	e016      	b.n	80072ae <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10f      	bne.n	80072ac <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f001 f9af 	bl	80085fe <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
 80072aa:	e000      	b.n	80072ae <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e07b      	b.n	80073c0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d108      	bne.n	80072e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80072d8:	d009      	beq.n	80072ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	61da      	str	r2, [r3, #28]
 80072e0:	e005      	b.n	80072ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f885 	bl	8007418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2202      	movs	r2, #2
 8007312:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007324:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007336:	431a      	orrs	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007340:	431a      	orrs	r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	431a      	orrs	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735e:	431a      	orrs	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007372:	ea42 0103 	orr.w	r1, r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	699b      	ldr	r3, [r3, #24]
 800738a:	0c1b      	lsrs	r3, r3, #16
 800738c:	f003 0104 	and.w	r1, r3, #4
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007394:	f003 0210 	and.w	r2, r3, #16
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69da      	ldr	r2, [r3, #28]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80073ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e01a      	b.n	8007410 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2202      	movs	r2, #2
 80073de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f81a 	bl	800742c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800740e:	2300      	movs	r3, #0
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007450:	2300      	movs	r3, #0
 8007452:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800745a:	2b01      	cmp	r3, #1
 800745c:	d101      	bne.n	8007462 <HAL_SPI_Transmit+0x22>
 800745e:	2302      	movs	r3, #2
 8007460:	e126      	b.n	80076b0 <HAL_SPI_Transmit+0x270>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2201      	movs	r2, #1
 8007466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800746a:	f7fc fb69 	bl	8003b40 <HAL_GetTick>
 800746e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	d002      	beq.n	8007486 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007480:	2302      	movs	r3, #2
 8007482:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007484:	e10b      	b.n	800769e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <HAL_SPI_Transmit+0x52>
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007496:	e102      	b.n	800769e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2203      	movs	r2, #3
 800749c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	88fa      	ldrh	r2, [r7, #6]
 80074b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2200      	movs	r2, #0
 80074bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2200      	movs	r2, #0
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074de:	d10f      	bne.n	8007500 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681a      	ldr	r2, [r3, #0]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074fe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750a:	2b40      	cmp	r3, #64	; 0x40
 800750c:	d007      	beq.n	800751e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800751c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007526:	d14b      	bne.n	80075c0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <HAL_SPI_Transmit+0xf6>
 8007530:	8afb      	ldrh	r3, [r7, #22]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d13e      	bne.n	80075b4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800753a:	881a      	ldrh	r2, [r3, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007546:	1c9a      	adds	r2, r3, #2
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800755a:	e02b      	b.n	80075b4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b02      	cmp	r3, #2
 8007568:	d112      	bne.n	8007590 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756e:	881a      	ldrh	r2, [r3, #0]
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757a:	1c9a      	adds	r2, r3, #2
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007584:	b29b      	uxth	r3, r3
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	86da      	strh	r2, [r3, #54]	; 0x36
 800758e:	e011      	b.n	80075b4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007590:	f7fc fad6 	bl	8003b40 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	429a      	cmp	r2, r3
 800759e:	d803      	bhi.n	80075a8 <HAL_SPI_Transmit+0x168>
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a6:	d102      	bne.n	80075ae <HAL_SPI_Transmit+0x16e>
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d102      	bne.n	80075b4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80075b2:	e074      	b.n	800769e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1ce      	bne.n	800755c <HAL_SPI_Transmit+0x11c>
 80075be:	e04c      	b.n	800765a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <HAL_SPI_Transmit+0x18e>
 80075c8:	8afb      	ldrh	r3, [r7, #22]
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d140      	bne.n	8007650 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	330c      	adds	r3, #12
 80075d8:	7812      	ldrb	r2, [r2, #0]
 80075da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	3b01      	subs	r3, #1
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075f4:	e02c      	b.n	8007650 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b02      	cmp	r3, #2
 8007602:	d113      	bne.n	800762c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	330c      	adds	r3, #12
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	86da      	strh	r2, [r3, #54]	; 0x36
 800762a:	e011      	b.n	8007650 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800762c:	f7fc fa88 	bl	8003b40 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d803      	bhi.n	8007644 <HAL_SPI_Transmit+0x204>
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d102      	bne.n	800764a <HAL_SPI_Transmit+0x20a>
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d102      	bne.n	8007650 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800764e:	e026      	b.n	800769e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007654:	b29b      	uxth	r3, r3
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1cd      	bne.n	80075f6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 fbda 	bl	8007e18 <SPI_EndRxTxTransaction>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d002      	beq.n	8007670 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2220      	movs	r2, #32
 800766e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	613b      	str	r3, [r7, #16]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	613b      	str	r3, [r7, #16]
 800768c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007692:	2b00      	cmp	r3, #0
 8007694:	d002      	beq.n	800769c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	77fb      	strb	r3, [r7, #31]
 800769a:	e000      	b.n	800769e <HAL_SPI_Transmit+0x25e>
  }

error:
 800769c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2201      	movs	r2, #1
 80076a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80076ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3720      	adds	r7, #32
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	603b      	str	r3, [r7, #0]
 80076c4:	4613      	mov	r3, r2
 80076c6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076d4:	d112      	bne.n	80076fc <HAL_SPI_Receive+0x44>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10e      	bne.n	80076fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2204      	movs	r2, #4
 80076e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076e6:	88fa      	ldrh	r2, [r7, #6]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	4613      	mov	r3, r2
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	68b9      	ldr	r1, [r7, #8]
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f8f1 	bl	80078da <HAL_SPI_TransmitReceive>
 80076f8:	4603      	mov	r3, r0
 80076fa:	e0ea      	b.n	80078d2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007702:	2b01      	cmp	r3, #1
 8007704:	d101      	bne.n	800770a <HAL_SPI_Receive+0x52>
 8007706:	2302      	movs	r3, #2
 8007708:	e0e3      	b.n	80078d2 <HAL_SPI_Receive+0x21a>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007712:	f7fc fa15 	bl	8003b40 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d002      	beq.n	800772a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007724:	2302      	movs	r3, #2
 8007726:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007728:	e0ca      	b.n	80078c0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <HAL_SPI_Receive+0x7e>
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d102      	bne.n	800773c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	75fb      	strb	r3, [r7, #23]
    goto error;
 800773a:	e0c1      	b.n	80078c0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2204      	movs	r2, #4
 8007740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	68ba      	ldr	r2, [r7, #8]
 800774e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	88fa      	ldrh	r2, [r7, #6]
 8007754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2200      	movs	r2, #0
 8007760:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007782:	d10f      	bne.n	80077a4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	681a      	ldr	r2, [r3, #0]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80077a2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ae:	2b40      	cmp	r3, #64	; 0x40
 80077b0:	d007      	beq.n	80077c2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681a      	ldr	r2, [r3, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077c0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	68db      	ldr	r3, [r3, #12]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d162      	bne.n	8007890 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80077ca:	e02e      	b.n	800782a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	689b      	ldr	r3, [r3, #8]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d115      	bne.n	8007806 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f103 020c 	add.w	r2, r3, #12
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	7812      	ldrb	r2, [r2, #0]
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007804:	e011      	b.n	800782a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007806:	f7fc f99b 	bl	8003b40 <HAL_GetTick>
 800780a:	4602      	mov	r2, r0
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	1ad3      	subs	r3, r2, r3
 8007810:	683a      	ldr	r2, [r7, #0]
 8007812:	429a      	cmp	r2, r3
 8007814:	d803      	bhi.n	800781e <HAL_SPI_Receive+0x166>
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800781c:	d102      	bne.n	8007824 <HAL_SPI_Receive+0x16c>
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d102      	bne.n	800782a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007828:	e04a      	b.n	80078c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800782e:	b29b      	uxth	r3, r3
 8007830:	2b00      	cmp	r3, #0
 8007832:	d1cb      	bne.n	80077cc <HAL_SPI_Receive+0x114>
 8007834:	e031      	b.n	800789a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d113      	bne.n	800786c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68da      	ldr	r2, [r3, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784e:	b292      	uxth	r2, r2
 8007850:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	1c9a      	adds	r2, r3, #2
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007860:	b29b      	uxth	r3, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	b29a      	uxth	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	87da      	strh	r2, [r3, #62]	; 0x3e
 800786a:	e011      	b.n	8007890 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800786c:	f7fc f968 	bl	8003b40 <HAL_GetTick>
 8007870:	4602      	mov	r2, r0
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d803      	bhi.n	8007884 <HAL_SPI_Receive+0x1cc>
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007882:	d102      	bne.n	800788a <HAL_SPI_Receive+0x1d2>
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d102      	bne.n	8007890 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800788a:	2303      	movs	r3, #3
 800788c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800788e:	e017      	b.n	80078c0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007894:	b29b      	uxth	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1cd      	bne.n	8007836 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800789a:	693a      	ldr	r2, [r7, #16]
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 fa54 	bl	8007d4c <SPI_EndRxTransaction>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d002      	beq.n	80078b0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2220      	movs	r2, #32
 80078ae:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	75fb      	strb	r3, [r7, #23]
 80078bc:	e000      	b.n	80078c0 <HAL_SPI_Receive+0x208>
  }

error :
 80078be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b08c      	sub	sp, #48	; 0x30
 80078de:	af00      	add	r7, sp, #0
 80078e0:	60f8      	str	r0, [r7, #12]
 80078e2:	60b9      	str	r1, [r7, #8]
 80078e4:	607a      	str	r2, [r7, #4]
 80078e6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078e8:	2301      	movs	r3, #1
 80078ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_SPI_TransmitReceive+0x26>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e18a      	b.n	8007c16 <HAL_SPI_TransmitReceive+0x33c>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007908:	f7fc f91a 	bl	8003b40 <HAL_GetTick>
 800790c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007926:	2b01      	cmp	r3, #1
 8007928:	d00f      	beq.n	800794a <HAL_SPI_TransmitReceive+0x70>
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007930:	d107      	bne.n	8007942 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <HAL_SPI_TransmitReceive+0x68>
 800793a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800793e:	2b04      	cmp	r3, #4
 8007940:	d003      	beq.n	800794a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007942:	2302      	movs	r3, #2
 8007944:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007948:	e15b      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <HAL_SPI_TransmitReceive+0x82>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <HAL_SPI_TransmitReceive+0x82>
 8007956:	887b      	ldrh	r3, [r7, #2]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d103      	bne.n	8007964 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007962:	e14e      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b04      	cmp	r3, #4
 800796e:	d003      	beq.n	8007978 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2205      	movs	r2, #5
 8007974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	887a      	ldrh	r2, [r7, #2]
 8007988:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	887a      	ldrh	r2, [r7, #2]
 800798e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	887a      	ldrh	r2, [r7, #2]
 800799a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	887a      	ldrh	r2, [r7, #2]
 80079a0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d007      	beq.n	80079cc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079d4:	d178      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d002      	beq.n	80079e4 <HAL_SPI_TransmitReceive+0x10a>
 80079de:	8b7b      	ldrh	r3, [r7, #26]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d166      	bne.n	8007ab2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e8:	881a      	ldrh	r2, [r3, #0]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f4:	1c9a      	adds	r2, r3, #2
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b29a      	uxth	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a08:	e053      	b.n	8007ab2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d11b      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x176>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d016      	beq.n	8007a50 <HAL_SPI_TransmitReceive+0x176>
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d113      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2c:	881a      	ldrh	r2, [r3, #0]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	f003 0301 	and.w	r3, r3, #1
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d119      	bne.n	8007a92 <HAL_SPI_TransmitReceive+0x1b8>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d014      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a72:	b292      	uxth	r2, r2
 8007a74:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	1c9a      	adds	r2, r3, #2
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	3b01      	subs	r3, #1
 8007a88:	b29a      	uxth	r2, r3
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a92:	f7fc f855 	bl	8003b40 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007a9e:	429a      	cmp	r2, r3
 8007aa0:	d807      	bhi.n	8007ab2 <HAL_SPI_TransmitReceive+0x1d8>
 8007aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa8:	d003      	beq.n	8007ab2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007ab0:	e0a7      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1a6      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x130>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d1a1      	bne.n	8007a0a <HAL_SPI_TransmitReceive+0x130>
 8007ac6:	e07c      	b.n	8007bc2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d002      	beq.n	8007ad6 <HAL_SPI_TransmitReceive+0x1fc>
 8007ad0:	8b7b      	ldrh	r3, [r7, #26]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d16b      	bne.n	8007bae <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	330c      	adds	r3, #12
 8007ae0:	7812      	ldrb	r2, [r2, #0]
 8007ae2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	3b01      	subs	r3, #1
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afc:	e057      	b.n	8007bae <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 0302 	and.w	r3, r3, #2
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d11c      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x26c>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d017      	beq.n	8007b46 <HAL_SPI_TransmitReceive+0x26c>
 8007b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d114      	bne.n	8007b46 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	7812      	ldrb	r2, [r2, #0]
 8007b28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d119      	bne.n	8007b88 <HAL_SPI_TransmitReceive+0x2ae>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d014      	beq.n	8007b88 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68da      	ldr	r2, [r3, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	b2d2      	uxtb	r2, r2
 8007b6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b84:	2301      	movs	r3, #1
 8007b86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b88:	f7fb ffda 	bl	8003b40 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d803      	bhi.n	8007ba0 <HAL_SPI_TransmitReceive+0x2c6>
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b9e:	d102      	bne.n	8007ba6 <HAL_SPI_TransmitReceive+0x2cc>
 8007ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007ba6:	2303      	movs	r3, #3
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007bac:	e029      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d1a2      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x224>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d19d      	bne.n	8007afe <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007bc6:	68f8      	ldr	r0, [r7, #12]
 8007bc8:	f000 f926 	bl	8007e18 <SPI_EndRxTxTransaction>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d006      	beq.n	8007be0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2220      	movs	r2, #32
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007bde:	e010      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10b      	bne.n	8007c00 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	e000      	b.n	8007c02 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007c00:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3730      	adds	r7, #48	; 0x30
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c2c:	b2db      	uxtb	r3, r3
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	370c      	adds	r7, #12
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
	...

08007c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b088      	sub	sp, #32
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	603b      	str	r3, [r7, #0]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007c4c:	f7fb ff78 	bl	8003b40 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	4413      	add	r3, r2
 8007c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007c5c:	f7fb ff70 	bl	8003b40 <HAL_GetTick>
 8007c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007c62:	4b39      	ldr	r3, [pc, #228]	; (8007d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	015b      	lsls	r3, r3, #5
 8007c68:	0d1b      	lsrs	r3, r3, #20
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	fb02 f303 	mul.w	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c72:	e054      	b.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7a:	d050      	beq.n	8007d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c7c:	f7fb ff60 	bl	8003b40 <HAL_GetTick>
 8007c80:	4602      	mov	r2, r0
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d902      	bls.n	8007c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d13d      	bne.n	8007d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007caa:	d111      	bne.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cb4:	d004      	beq.n	8007cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cbe:	d107      	bne.n	8007cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cd8:	d10f      	bne.n	8007cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e017      	b.n	8007d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d101      	bne.n	8007d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	4013      	ands	r3, r2
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	bf0c      	ite	eq
 8007d2e:	2301      	moveq	r3, #1
 8007d30:	2300      	movne	r3, #0
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	79fb      	ldrb	r3, [r7, #7]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d19b      	bne.n	8007c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3720      	adds	r7, #32
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20000000 	.word	0x20000000

08007d4c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af02      	add	r7, sp, #8
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d60:	d111      	bne.n	8007d86 <SPI_EndRxTransaction+0x3a>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d6a:	d004      	beq.n	8007d76 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d74:	d107      	bne.n	8007d86 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d84:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d8e:	d12a      	bne.n	8007de6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d98:	d012      	beq.n	8007dc0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2200      	movs	r2, #0
 8007da2:	2180      	movs	r1, #128	; 0x80
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff ff49 	bl	8007c3c <SPI_WaitFlagStateUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02d      	beq.n	8007e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db4:	f043 0220 	orr.w	r2, r3, #32
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e026      	b.n	8007e0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	2101      	movs	r1, #1
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff ff36 	bl	8007c3c <SPI_WaitFlagStateUntilTimeout>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01a      	beq.n	8007e0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dda:	f043 0220 	orr.w	r2, r3, #32
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e013      	b.n	8007e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	2200      	movs	r2, #0
 8007dee:	2101      	movs	r1, #1
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff ff23 	bl	8007c3c <SPI_WaitFlagStateUntilTimeout>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d007      	beq.n	8007e0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e00:	f043 0220 	orr.w	r2, r3, #32
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e000      	b.n	8007e0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3710      	adds	r7, #16
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
	...

08007e18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007e24:	4b1b      	ldr	r3, [pc, #108]	; (8007e94 <SPI_EndRxTxTransaction+0x7c>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a1b      	ldr	r2, [pc, #108]	; (8007e98 <SPI_EndRxTxTransaction+0x80>)
 8007e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2e:	0d5b      	lsrs	r3, r3, #21
 8007e30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e34:	fb02 f303 	mul.w	r3, r2, r3
 8007e38:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e42:	d112      	bne.n	8007e6a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	9300      	str	r3, [sp, #0]
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	2180      	movs	r1, #128	; 0x80
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f7ff fef4 	bl	8007c3c <SPI_WaitFlagStateUntilTimeout>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e5e:	f043 0220 	orr.w	r2, r3, #32
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e00f      	b.n	8007e8a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e80:	2b80      	cmp	r3, #128	; 0x80
 8007e82:	d0f2      	beq.n	8007e6a <SPI_EndRxTxTransaction+0x52>
 8007e84:	e000      	b.n	8007e88 <SPI_EndRxTxTransaction+0x70>
        break;
 8007e86:	bf00      	nop
  }

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20000000 	.word	0x20000000
 8007e98:	165e9f81 	.word	0x165e9f81

08007e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e041      	b.n	8007f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d106      	bne.n	8007ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f839 	bl	8007f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2202      	movs	r2, #2
 8007ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f000 f9d8 	bl	8008290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2201      	movs	r2, #1
 8007eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b083      	sub	sp, #12
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007f42:	bf00      	nop
 8007f44:	370c      	adds	r7, #12
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5e:	b2db      	uxtb	r3, r3
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d001      	beq.n	8007f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e04e      	b.n	8008006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2202      	movs	r2, #2
 8007f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f042 0201 	orr.w	r2, r2, #1
 8007f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a23      	ldr	r2, [pc, #140]	; (8008014 <HAL_TIM_Base_Start_IT+0xc4>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d022      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f92:	d01d      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a1f      	ldr	r2, [pc, #124]	; (8008018 <HAL_TIM_Base_Start_IT+0xc8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d018      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a1e      	ldr	r2, [pc, #120]	; (800801c <HAL_TIM_Base_Start_IT+0xcc>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d013      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a1c      	ldr	r2, [pc, #112]	; (8008020 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1b      	ldr	r2, [pc, #108]	; (8008024 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d009      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a19      	ldr	r2, [pc, #100]	; (8008028 <HAL_TIM_Base_Start_IT+0xd8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <HAL_TIM_Base_Start_IT+0x80>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a18      	ldr	r2, [pc, #96]	; (800802c <HAL_TIM_Base_Start_IT+0xdc>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d111      	bne.n	8007ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2b06      	cmp	r3, #6
 8007fe0:	d010      	beq.n	8008004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ff2:	e007      	b.n	8008004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3714      	adds	r7, #20
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40010000 	.word	0x40010000
 8008018:	40000400 	.word	0x40000400
 800801c:	40000800 	.word	0x40000800
 8008020:	40000c00 	.word	0x40000c00
 8008024:	40010400 	.word	0x40010400
 8008028:	40014000 	.word	0x40014000
 800802c:	40001800 	.word	0x40001800

08008030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d122      	bne.n	800808c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0302 	and.w	r3, r3, #2
 8008050:	2b02      	cmp	r3, #2
 8008052:	d11b      	bne.n	800808c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0202 	mvn.w	r2, #2
 800805c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2201      	movs	r2, #1
 8008062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f003 0303 	and.w	r3, r3, #3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8ee 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8008078:	e005      	b.n	8008086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8e0 	bl	8008240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8f1 	bl	8008268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0304 	and.w	r3, r3, #4
 8008096:	2b04      	cmp	r3, #4
 8008098:	d122      	bne.n	80080e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f003 0304 	and.w	r3, r3, #4
 80080a4:	2b04      	cmp	r3, #4
 80080a6:	d11b      	bne.n	80080e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0204 	mvn.w	r2, #4
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2202      	movs	r2, #2
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8c4 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8b6 	bl	8008240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f8c7 	bl	8008268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0308 	and.w	r3, r3, #8
 80080ea:	2b08      	cmp	r3, #8
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0308 	and.w	r3, r3, #8
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0208 	mvn.w	r2, #8
 8008104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2204      	movs	r2, #4
 800810a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f89a 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f88c 	bl	8008240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f89d 	bl	8008268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0310 	and.w	r3, r3, #16
 800813e:	2b10      	cmp	r3, #16
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	2b10      	cmp	r3, #16
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0210 	mvn.w	r2, #16
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2208      	movs	r2, #8
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f870 	bl	8008254 <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f862 	bl	8008240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f873 	bl	8008268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d10e      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0301 	and.w	r3, r3, #1
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d107      	bne.n	80081b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0201 	mvn.w	r2, #1
 80081ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7f9 fbd8 	bl	8001964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	691b      	ldr	r3, [r3, #16]
 80081ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081be:	2b80      	cmp	r3, #128	; 0x80
 80081c0:	d10e      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081cc:	2b80      	cmp	r3, #128	; 0x80
 80081ce:	d107      	bne.n	80081e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f902 	bl	80083e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	691b      	ldr	r3, [r3, #16]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d10e      	bne.n	800820c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	d107      	bne.n	800820c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f838 	bl	800827c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f003 0320 	and.w	r3, r3, #32
 8008216:	2b20      	cmp	r3, #32
 8008218:	d10e      	bne.n	8008238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
 8008220:	f003 0320 	and.w	r3, r3, #32
 8008224:	2b20      	cmp	r3, #32
 8008226:	d107      	bne.n	8008238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f06f 0220 	mvn.w	r2, #32
 8008230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f8cc 	bl	80083d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008284:	bf00      	nop
 8008286:	370c      	adds	r7, #12
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr

08008290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a40      	ldr	r2, [pc, #256]	; (80083a4 <TIM_Base_SetConfig+0x114>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d013      	beq.n	80082d0 <TIM_Base_SetConfig+0x40>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ae:	d00f      	beq.n	80082d0 <TIM_Base_SetConfig+0x40>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	4a3d      	ldr	r2, [pc, #244]	; (80083a8 <TIM_Base_SetConfig+0x118>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d00b      	beq.n	80082d0 <TIM_Base_SetConfig+0x40>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a3c      	ldr	r2, [pc, #240]	; (80083ac <TIM_Base_SetConfig+0x11c>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d007      	beq.n	80082d0 <TIM_Base_SetConfig+0x40>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a3b      	ldr	r2, [pc, #236]	; (80083b0 <TIM_Base_SetConfig+0x120>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d003      	beq.n	80082d0 <TIM_Base_SetConfig+0x40>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	4a3a      	ldr	r2, [pc, #232]	; (80083b4 <TIM_Base_SetConfig+0x124>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d108      	bne.n	80082e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	68fa      	ldr	r2, [r7, #12]
 80082de:	4313      	orrs	r3, r2
 80082e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a2f      	ldr	r2, [pc, #188]	; (80083a4 <TIM_Base_SetConfig+0x114>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d02b      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082f0:	d027      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a2c      	ldr	r2, [pc, #176]	; (80083a8 <TIM_Base_SetConfig+0x118>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d023      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a2b      	ldr	r2, [pc, #172]	; (80083ac <TIM_Base_SetConfig+0x11c>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d01f      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a2a      	ldr	r2, [pc, #168]	; (80083b0 <TIM_Base_SetConfig+0x120>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d01b      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a29      	ldr	r2, [pc, #164]	; (80083b4 <TIM_Base_SetConfig+0x124>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d017      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a28      	ldr	r2, [pc, #160]	; (80083b8 <TIM_Base_SetConfig+0x128>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d013      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a27      	ldr	r2, [pc, #156]	; (80083bc <TIM_Base_SetConfig+0x12c>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d00f      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	4a26      	ldr	r2, [pc, #152]	; (80083c0 <TIM_Base_SetConfig+0x130>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d00b      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	4a25      	ldr	r2, [pc, #148]	; (80083c4 <TIM_Base_SetConfig+0x134>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d007      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4a24      	ldr	r2, [pc, #144]	; (80083c8 <TIM_Base_SetConfig+0x138>)
 8008336:	4293      	cmp	r3, r2
 8008338:	d003      	beq.n	8008342 <TIM_Base_SetConfig+0xb2>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4a23      	ldr	r2, [pc, #140]	; (80083cc <TIM_Base_SetConfig+0x13c>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d108      	bne.n	8008354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	4313      	orrs	r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	695b      	ldr	r3, [r3, #20]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	68fa      	ldr	r2, [r7, #12]
 8008366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	689a      	ldr	r2, [r3, #8]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a0a      	ldr	r2, [pc, #40]	; (80083a4 <TIM_Base_SetConfig+0x114>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0xf8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a0c      	ldr	r2, [pc, #48]	; (80083b4 <TIM_Base_SetConfig+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d103      	bne.n	8008390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	691a      	ldr	r2, [r3, #16]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	615a      	str	r2, [r3, #20]
}
 8008396:	bf00      	nop
 8008398:	3714      	adds	r7, #20
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40010000 	.word	0x40010000
 80083a8:	40000400 	.word	0x40000400
 80083ac:	40000800 	.word	0x40000800
 80083b0:	40000c00 	.word	0x40000c00
 80083b4:	40010400 	.word	0x40010400
 80083b8:	40014000 	.word	0x40014000
 80083bc:	40014400 	.word	0x40014400
 80083c0:	40014800 	.word	0x40014800
 80083c4:	40001800 	.word	0x40001800
 80083c8:	40001c00 	.word	0x40001c00
 80083cc:	40002000 	.word	0x40002000

080083d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d123      	bne.n	8008452 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008412:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	6851      	ldr	r1, [r2, #4]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	6892      	ldr	r2, [r2, #8]
 800841e:	4311      	orrs	r1, r2
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	68d2      	ldr	r2, [r2, #12]
 8008424:	4311      	orrs	r1, r2
 8008426:	683a      	ldr	r2, [r7, #0]
 8008428:	6912      	ldr	r2, [r2, #16]
 800842a:	4311      	orrs	r1, r2
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	6952      	ldr	r2, [r2, #20]
 8008430:	4311      	orrs	r1, r2
 8008432:	683a      	ldr	r2, [r7, #0]
 8008434:	6992      	ldr	r2, [r2, #24]
 8008436:	4311      	orrs	r1, r2
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	69d2      	ldr	r2, [r2, #28]
 800843c:	4311      	orrs	r1, r2
 800843e:	683a      	ldr	r2, [r7, #0]
 8008440:	6a12      	ldr	r2, [r2, #32]
 8008442:	4311      	orrs	r1, r2
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008448:	430a      	orrs	r2, r1
 800844a:	431a      	orrs	r2, r3
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	601a      	str	r2, [r3, #0]
 8008450:	e028      	b.n	80084a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	69d9      	ldr	r1, [r3, #28]
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	4319      	orrs	r1, r3
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008468:	430b      	orrs	r3, r1
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008478:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800847c:	683a      	ldr	r2, [r7, #0]
 800847e:	6851      	ldr	r1, [r2, #4]
 8008480:	683a      	ldr	r2, [r7, #0]
 8008482:	6892      	ldr	r2, [r2, #8]
 8008484:	4311      	orrs	r1, r2
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	68d2      	ldr	r2, [r2, #12]
 800848a:	4311      	orrs	r1, r2
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	6912      	ldr	r2, [r2, #16]
 8008490:	4311      	orrs	r1, r2
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	6952      	ldr	r2, [r2, #20]
 8008496:	4311      	orrs	r1, r2
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	6992      	ldr	r2, [r2, #24]
 800849c:	430a      	orrs	r2, r1
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80084b2:	b480      	push	{r7}
 80084b4:	b085      	sub	sp, #20
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	60f8      	str	r0, [r7, #12]
 80084ba:	60b9      	str	r1, [r7, #8]
 80084bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d128      	bne.n	8008516 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	1e59      	subs	r1, r3, #1
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	011b      	lsls	r3, r3, #4
 80084da:	4319      	orrs	r1, r3
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	021b      	lsls	r3, r3, #8
 80084e4:	4319      	orrs	r1, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	031b      	lsls	r3, r3, #12
 80084ee:	4319      	orrs	r1, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	3b01      	subs	r3, #1
 80084f6:	041b      	lsls	r3, r3, #16
 80084f8:	4319      	orrs	r1, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	695b      	ldr	r3, [r3, #20]
 80084fe:	3b01      	subs	r3, #1
 8008500:	051b      	lsls	r3, r3, #20
 8008502:	4319      	orrs	r1, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	3b01      	subs	r3, #1
 800850a:	061b      	lsls	r3, r3, #24
 800850c:	430b      	orrs	r3, r1
 800850e:	431a      	orrs	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	609a      	str	r2, [r3, #8]
 8008514:	e02f      	b.n	8008576 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800851e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008522:	68ba      	ldr	r2, [r7, #8]
 8008524:	68d2      	ldr	r2, [r2, #12]
 8008526:	3a01      	subs	r2, #1
 8008528:	0311      	lsls	r1, r2, #12
 800852a:	68ba      	ldr	r2, [r7, #8]
 800852c:	6952      	ldr	r2, [r2, #20]
 800852e:	3a01      	subs	r2, #1
 8008530:	0512      	lsls	r2, r2, #20
 8008532:	430a      	orrs	r2, r1
 8008534:	431a      	orrs	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	1e59      	subs	r1, r3, #1
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	3b01      	subs	r3, #1
 800854e:	011b      	lsls	r3, r3, #4
 8008550:	4319      	orrs	r1, r3
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	3b01      	subs	r3, #1
 8008558:	021b      	lsls	r3, r3, #8
 800855a:	4319      	orrs	r1, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	3b01      	subs	r3, #1
 8008562:	041b      	lsls	r3, r3, #16
 8008564:	4319      	orrs	r1, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	699b      	ldr	r3, [r3, #24]
 800856a:	3b01      	subs	r3, #1
 800856c:	061b      	lsls	r3, r3, #24
 800856e:	430b      	orrs	r3, r1
 8008570:	431a      	orrs	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	0d9b      	lsrs	r3, r3, #22
 800859a:	059b      	lsls	r3, r3, #22
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	6811      	ldr	r1, [r2, #0]
 80085a0:	68ba      	ldr	r2, [r7, #8]
 80085a2:	6852      	ldr	r2, [r2, #4]
 80085a4:	4311      	orrs	r1, r2
 80085a6:	68ba      	ldr	r2, [r7, #8]
 80085a8:	6892      	ldr	r2, [r2, #8]
 80085aa:	3a01      	subs	r2, #1
 80085ac:	0152      	lsls	r2, r2, #5
 80085ae:	4311      	orrs	r1, r2
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	68d2      	ldr	r2, [r2, #12]
 80085b4:	0252      	lsls	r2, r2, #9
 80085b6:	430a      	orrs	r2, r1
 80085b8:	431a      	orrs	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80085be:	f7fb fabf 	bl	8003b40 <HAL_GetTick>
 80085c2:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085c4:	e010      	b.n	80085e8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d00c      	beq.n	80085e8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d007      	beq.n	80085e4 <FMC_SDRAM_SendCommand+0x60>
 80085d4:	f7fb fab4 	bl	8003b40 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d201      	bcs.n	80085e8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e006      	b.n	80085f6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b20      	cmp	r3, #32
 80085f2:	d0e8      	beq.n	80085c6 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80085fe:	b480      	push	{r7}
 8008600:	b083      	sub	sp, #12
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
 8008606:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008610:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	0052      	lsls	r2, r2, #1
 8008618:	431a      	orrs	r2, r3
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800862c:	b084      	sub	sp, #16
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
 8008636:	f107 001c 	add.w	r0, r7, #28
 800863a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800863e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008640:	2b01      	cmp	r3, #1
 8008642:	d122      	bne.n	800868a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008648:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	68db      	ldr	r3, [r3, #12]
 8008654:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800866c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866e:	2b01      	cmp	r3, #1
 8008670:	d105      	bne.n	800867e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 fbee 	bl	8009e60 <USB_CoreReset>
 8008684:	4603      	mov	r3, r0
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e01a      	b.n	80086c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f001 fbe2 	bl	8009e60 <USB_CoreReset>
 800869c:	4603      	mov	r3, r0
 800869e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	639a      	str	r2, [r3, #56]	; 0x38
 80086b2:	e005      	b.n	80086c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80086c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d10b      	bne.n	80086de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f043 0206 	orr.w	r2, r3, #6
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	f043 0220 	orr.w	r2, r3, #32
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80086de:	7bfb      	ldrb	r3, [r7, #15]
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086ea:	b004      	add	sp, #16
 80086ec:	4770      	bx	lr
	...

080086f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80086f0:	b480      	push	{r7}
 80086f2:	b087      	sub	sp, #28
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80086fe:	79fb      	ldrb	r3, [r7, #7]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d165      	bne.n	80087d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a41      	ldr	r2, [pc, #260]	; (800880c <USB_SetTurnaroundTime+0x11c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d906      	bls.n	800871a <USB_SetTurnaroundTime+0x2a>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4a40      	ldr	r2, [pc, #256]	; (8008810 <USB_SetTurnaroundTime+0x120>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d202      	bcs.n	800871a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008714:	230f      	movs	r3, #15
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e062      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a3c      	ldr	r2, [pc, #240]	; (8008810 <USB_SetTurnaroundTime+0x120>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d306      	bcc.n	8008730 <USB_SetTurnaroundTime+0x40>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4a3b      	ldr	r2, [pc, #236]	; (8008814 <USB_SetTurnaroundTime+0x124>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d202      	bcs.n	8008730 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800872a:	230e      	movs	r3, #14
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	e057      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a38      	ldr	r2, [pc, #224]	; (8008814 <USB_SetTurnaroundTime+0x124>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d306      	bcc.n	8008746 <USB_SetTurnaroundTime+0x56>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4a37      	ldr	r2, [pc, #220]	; (8008818 <USB_SetTurnaroundTime+0x128>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d202      	bcs.n	8008746 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008740:	230d      	movs	r3, #13
 8008742:	617b      	str	r3, [r7, #20]
 8008744:	e04c      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4a33      	ldr	r2, [pc, #204]	; (8008818 <USB_SetTurnaroundTime+0x128>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d306      	bcc.n	800875c <USB_SetTurnaroundTime+0x6c>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4a32      	ldr	r2, [pc, #200]	; (800881c <USB_SetTurnaroundTime+0x12c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d802      	bhi.n	800875c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008756:	230c      	movs	r3, #12
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e041      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a2f      	ldr	r2, [pc, #188]	; (800881c <USB_SetTurnaroundTime+0x12c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d906      	bls.n	8008772 <USB_SetTurnaroundTime+0x82>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4a2e      	ldr	r2, [pc, #184]	; (8008820 <USB_SetTurnaroundTime+0x130>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d802      	bhi.n	8008772 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800876c:	230b      	movs	r3, #11
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e036      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <USB_SetTurnaroundTime+0x130>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d906      	bls.n	8008788 <USB_SetTurnaroundTime+0x98>
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	4a29      	ldr	r2, [pc, #164]	; (8008824 <USB_SetTurnaroundTime+0x134>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d802      	bhi.n	8008788 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008782:	230a      	movs	r3, #10
 8008784:	617b      	str	r3, [r7, #20]
 8008786:	e02b      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a26      	ldr	r2, [pc, #152]	; (8008824 <USB_SetTurnaroundTime+0x134>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d906      	bls.n	800879e <USB_SetTurnaroundTime+0xae>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4a25      	ldr	r2, [pc, #148]	; (8008828 <USB_SetTurnaroundTime+0x138>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d202      	bcs.n	800879e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008798:	2309      	movs	r3, #9
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	e020      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	4a21      	ldr	r2, [pc, #132]	; (8008828 <USB_SetTurnaroundTime+0x138>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d306      	bcc.n	80087b4 <USB_SetTurnaroundTime+0xc4>
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	4a20      	ldr	r2, [pc, #128]	; (800882c <USB_SetTurnaroundTime+0x13c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d802      	bhi.n	80087b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80087ae:	2308      	movs	r3, #8
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e015      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	4a1d      	ldr	r2, [pc, #116]	; (800882c <USB_SetTurnaroundTime+0x13c>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d906      	bls.n	80087ca <USB_SetTurnaroundTime+0xda>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	4a1c      	ldr	r2, [pc, #112]	; (8008830 <USB_SetTurnaroundTime+0x140>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d202      	bcs.n	80087ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80087c4:	2307      	movs	r3, #7
 80087c6:	617b      	str	r3, [r7, #20]
 80087c8:	e00a      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80087ca:	2306      	movs	r3, #6
 80087cc:	617b      	str	r3, [r7, #20]
 80087ce:	e007      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80087d0:	79fb      	ldrb	r3, [r7, #7]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d102      	bne.n	80087dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80087d6:	2309      	movs	r3, #9
 80087d8:	617b      	str	r3, [r7, #20]
 80087da:	e001      	b.n	80087e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80087dc:	2309      	movs	r3, #9
 80087de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68da      	ldr	r2, [r3, #12]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	029b      	lsls	r3, r3, #10
 80087f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80087f8:	431a      	orrs	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	371c      	adds	r7, #28
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	00d8acbf 	.word	0x00d8acbf
 8008810:	00e4e1c0 	.word	0x00e4e1c0
 8008814:	00f42400 	.word	0x00f42400
 8008818:	01067380 	.word	0x01067380
 800881c:	011a499f 	.word	0x011a499f
 8008820:	01312cff 	.word	0x01312cff
 8008824:	014ca43f 	.word	0x014ca43f
 8008828:	016e3600 	.word	0x016e3600
 800882c:	01a6ab1f 	.word	0x01a6ab1f
 8008830:	01e84800 	.word	0x01e84800

08008834 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	f043 0201 	orr.w	r2, r3, #1
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	460b      	mov	r3, r1
 8008882:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008884:	2300      	movs	r3, #0
 8008886:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	2b01      	cmp	r3, #1
 8008898:	d115      	bne.n	80088c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088a6:	2001      	movs	r0, #1
 80088a8:	f7fb f956 	bl	8003b58 <HAL_Delay>
      ms++;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3301      	adds	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f001 fa45 	bl	8009d42 <USB_GetMode>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d01e      	beq.n	80088fc <USB_SetCurrentMode+0x84>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b31      	cmp	r3, #49	; 0x31
 80088c2:	d9f0      	bls.n	80088a6 <USB_SetCurrentMode+0x2e>
 80088c4:	e01a      	b.n	80088fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088c6:	78fb      	ldrb	r3, [r7, #3]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d115      	bne.n	80088f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088d8:	2001      	movs	r0, #1
 80088da:	f7fb f93d 	bl	8003b58 <HAL_Delay>
      ms++;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	3301      	adds	r3, #1
 80088e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 fa2c 	bl	8009d42 <USB_GetMode>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d005      	beq.n	80088fc <USB_SetCurrentMode+0x84>
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b31      	cmp	r3, #49	; 0x31
 80088f4:	d9f0      	bls.n	80088d8 <USB_SetCurrentMode+0x60>
 80088f6:	e001      	b.n	80088fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088f8:	2301      	movs	r3, #1
 80088fa:	e005      	b.n	8008908 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b32      	cmp	r3, #50	; 0x32
 8008900:	d101      	bne.n	8008906 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008910:	b084      	sub	sp, #16
 8008912:	b580      	push	{r7, lr}
 8008914:	b086      	sub	sp, #24
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800891e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
 800892e:	e009      	b.n	8008944 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	3340      	adds	r3, #64	; 0x40
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	2200      	movs	r2, #0
 800893c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	3301      	adds	r3, #1
 8008942:	613b      	str	r3, [r7, #16]
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	2b0e      	cmp	r3, #14
 8008948:	d9f2      	bls.n	8008930 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800894a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11c      	bne.n	800898a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	68fa      	ldr	r2, [r7, #12]
 800895a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800895e:	f043 0302 	orr.w	r3, r3, #2
 8008962:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008968:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008974:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008980:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	639a      	str	r2, [r3, #56]	; 0x38
 8008988:	e00b      	b.n	80089a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089a8:	461a      	mov	r2, r3
 80089aa:	2300      	movs	r3, #0
 80089ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b4:	4619      	mov	r1, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089bc:	461a      	mov	r2, r3
 80089be:	680b      	ldr	r3, [r1, #0]
 80089c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d10c      	bne.n	80089e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d104      	bne.n	80089d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089ce:	2100      	movs	r1, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 f965 	bl	8008ca0 <USB_SetDevSpeed>
 80089d6:	e008      	b.n	80089ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089d8:	2101      	movs	r1, #1
 80089da:	6878      	ldr	r0, [r7, #4]
 80089dc:	f000 f960 	bl	8008ca0 <USB_SetDevSpeed>
 80089e0:	e003      	b.n	80089ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089e2:	2103      	movs	r1, #3
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f000 f95b 	bl	8008ca0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ea:	2110      	movs	r1, #16
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 f8f3 	bl	8008bd8 <USB_FlushTxFifo>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d001      	beq.n	80089fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80089f8:	2301      	movs	r3, #1
 80089fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f91f 	bl	8008c40 <USB_FlushRxFifo>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1e:	461a      	mov	r2, r3
 8008a20:	2300      	movs	r3, #0
 8008a22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a30:	2300      	movs	r3, #0
 8008a32:	613b      	str	r3, [r7, #16]
 8008a34:	e043      	b.n	8008abe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	015a      	lsls	r2, r3, #5
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a4c:	d118      	bne.n	8008a80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d10a      	bne.n	8008a6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	461a      	mov	r2, r3
 8008a62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	e013      	b.n	8008a92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	461a      	mov	r2, r3
 8008a78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a7c:	6013      	str	r3, [r2, #0]
 8008a7e:	e008      	b.n	8008a92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	461a      	mov	r2, r3
 8008a8e:	2300      	movs	r3, #0
 8008a90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ab6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	3301      	adds	r3, #1
 8008abc:	613b      	str	r3, [r7, #16]
 8008abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d3b7      	bcc.n	8008a36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	613b      	str	r3, [r7, #16]
 8008aca:	e043      	b.n	8008b54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ade:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae2:	d118      	bne.n	8008b16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d10a      	bne.n	8008b00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	015a      	lsls	r2, r3, #5
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4413      	add	r3, r2
 8008af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af6:	461a      	mov	r2, r3
 8008af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008afc:	6013      	str	r3, [r2, #0]
 8008afe:	e013      	b.n	8008b28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	015a      	lsls	r2, r3, #5
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4413      	add	r3, r2
 8008b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b12:	6013      	str	r3, [r2, #0]
 8008b14:	e008      	b.n	8008b28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b22:	461a      	mov	r2, r3
 8008b24:	2300      	movs	r3, #0
 8008b26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b34:	461a      	mov	r2, r3
 8008b36:	2300      	movs	r3, #0
 8008b38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	015a      	lsls	r2, r3, #5
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4413      	add	r3, r2
 8008b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b46:	461a      	mov	r2, r3
 8008b48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b4e:	693b      	ldr	r3, [r7, #16]
 8008b50:	3301      	adds	r3, #1
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b56:	693a      	ldr	r2, [r7, #16]
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d3b7      	bcc.n	8008acc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d105      	bne.n	8008b90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	699b      	ldr	r3, [r3, #24]
 8008b88:	f043 0210 	orr.w	r2, r3, #16
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	699a      	ldr	r2, [r3, #24]
 8008b94:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <USB_DevInit+0x2c4>)
 8008b96:	4313      	orrs	r3, r2
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d005      	beq.n	8008bae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	f043 0208 	orr.w	r2, r3, #8
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d107      	bne.n	8008bc4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bbc:	f043 0304 	orr.w	r3, r3, #4
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bd0:	b004      	add	sp, #16
 8008bd2:	4770      	bx	lr
 8008bd4:	803c3800 	.word	0x803c3800

08008bd8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	3301      	adds	r3, #1
 8008bea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a13      	ldr	r2, [pc, #76]	; (8008c3c <USB_FlushTxFifo+0x64>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d901      	bls.n	8008bf8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	e01b      	b.n	8008c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	daf2      	bge.n	8008be6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c00:	2300      	movs	r3, #0
 8008c02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	019b      	lsls	r3, r3, #6
 8008c08:	f043 0220 	orr.w	r2, r3, #32
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3301      	adds	r3, #1
 8008c14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	4a08      	ldr	r2, [pc, #32]	; (8008c3c <USB_FlushTxFifo+0x64>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d901      	bls.n	8008c22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c1e:	2303      	movs	r3, #3
 8008c20:	e006      	b.n	8008c30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b20      	cmp	r3, #32
 8008c2c:	d0f0      	beq.n	8008c10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c2e:	2300      	movs	r3, #0
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3714      	adds	r7, #20
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	00030d40 	.word	0x00030d40

08008c40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	4a11      	ldr	r2, [pc, #68]	; (8008c9c <USB_FlushRxFifo+0x5c>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d901      	bls.n	8008c5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e018      	b.n	8008c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	691b      	ldr	r3, [r3, #16]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	daf2      	bge.n	8008c4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c66:	2300      	movs	r3, #0
 8008c68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2210      	movs	r2, #16
 8008c6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	4a08      	ldr	r2, [pc, #32]	; (8008c9c <USB_FlushRxFifo+0x5c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d901      	bls.n	8008c82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e006      	b.n	8008c90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b10      	cmp	r3, #16
 8008c8c:	d0f0      	beq.n	8008c70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3714      	adds	r7, #20
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr
 8008c9c:	00030d40 	.word	0x00030d40

08008ca0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b085      	sub	sp, #20
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	460b      	mov	r3, r1
 8008caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	78fb      	ldrb	r3, [r7, #3]
 8008cba:	68f9      	ldr	r1, [r7, #12]
 8008cbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc0:	4313      	orrs	r3, r2
 8008cc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3714      	adds	r7, #20
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b087      	sub	sp, #28
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 0306 	and.w	r3, r3, #6
 8008cea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]
 8008cf6:	e00a      	b.n	8008d0e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2b02      	cmp	r3, #2
 8008cfc:	d002      	beq.n	8008d04 <USB_GetDevSpeed+0x32>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b06      	cmp	r3, #6
 8008d02:	d102      	bne.n	8008d0a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008d04:	2302      	movs	r3, #2
 8008d06:	75fb      	strb	r3, [r7, #23]
 8008d08:	e001      	b.n	8008d0e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008d0a:	230f      	movs	r3, #15
 8008d0c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	371c      	adds	r7, #28
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr

08008d1c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	785b      	ldrb	r3, [r3, #1]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d13a      	bne.n	8008dae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d3e:	69da      	ldr	r2, [r3, #28]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	2101      	movs	r1, #1
 8008d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	68f9      	ldr	r1, [r7, #12]
 8008d52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d56:	4313      	orrs	r3, r2
 8008d58:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d155      	bne.n	8008e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d7c:	681a      	ldr	r2, [r3, #0]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	791b      	ldrb	r3, [r3, #4]
 8008d8a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d8c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	059b      	lsls	r3, r3, #22
 8008d92:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d94:	4313      	orrs	r3, r2
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	0151      	lsls	r1, r2, #5
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	440a      	add	r2, r1
 8008d9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008daa:	6013      	str	r3, [r2, #0]
 8008dac:	e036      	b.n	8008e1c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db4:	69da      	ldr	r2, [r3, #28]
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	781b      	ldrb	r3, [r3, #0]
 8008dba:	f003 030f 	and.w	r3, r3, #15
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc4:	041b      	lsls	r3, r3, #16
 8008dc6:	68f9      	ldr	r1, [r7, #12]
 8008dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	015a      	lsls	r2, r3, #5
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d11a      	bne.n	8008e1c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	791b      	ldrb	r3, [r3, #4]
 8008e00:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008e02:	430b      	orrs	r3, r1
 8008e04:	4313      	orrs	r3, r2
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	0151      	lsls	r1, r2, #5
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	440a      	add	r2, r1
 8008e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e1a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
	...

08008e2c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
 8008e34:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	785b      	ldrb	r3, [r3, #1]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d161      	bne.n	8008f0c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e5e:	d11f      	bne.n	8008ea0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	015a      	lsls	r2, r3, #5
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68ba      	ldr	r2, [r7, #8]
 8008e70:	0151      	lsls	r1, r2, #5
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	440a      	add	r2, r1
 8008e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e7e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	015a      	lsls	r2, r3, #5
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68ba      	ldr	r2, [r7, #8]
 8008e90:	0151      	lsls	r1, r2, #5
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	440a      	add	r2, r1
 8008e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	f003 030f 	and.w	r3, r3, #15
 8008eb0:	2101      	movs	r1, #1
 8008eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	43db      	mvns	r3, r3
 8008eba:	68f9      	ldr	r1, [r7, #12]
 8008ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eca:	69da      	ldr	r2, [r3, #28]
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	f003 030f 	and.w	r3, r3, #15
 8008ed4:	2101      	movs	r1, #1
 8008ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	43db      	mvns	r3, r3
 8008ede:	68f9      	ldr	r1, [r7, #12]
 8008ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	0159      	lsls	r1, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	440b      	add	r3, r1
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	4619      	mov	r1, r3
 8008f04:	4b35      	ldr	r3, [pc, #212]	; (8008fdc <USB_DeactivateEndpoint+0x1b0>)
 8008f06:	4013      	ands	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]
 8008f0a:	e060      	b.n	8008fce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f22:	d11f      	bne.n	8008f64 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	68fa      	ldr	r2, [r7, #12]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f42:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	015a      	lsls	r2, r3, #5
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68ba      	ldr	r2, [r7, #8]
 8008f54:	0151      	lsls	r1, r2, #5
 8008f56:	68fa      	ldr	r2, [r7, #12]
 8008f58:	440a      	add	r2, r1
 8008f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	f003 030f 	and.w	r3, r3, #15
 8008f74:	2101      	movs	r1, #1
 8008f76:	fa01 f303 	lsl.w	r3, r1, r3
 8008f7a:	041b      	lsls	r3, r3, #16
 8008f7c:	43db      	mvns	r3, r3
 8008f7e:	68f9      	ldr	r1, [r7, #12]
 8008f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f84:	4013      	ands	r3, r2
 8008f86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f003 030f 	and.w	r3, r3, #15
 8008f98:	2101      	movs	r1, #1
 8008f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9e:	041b      	lsls	r3, r3, #16
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	68f9      	ldr	r1, [r7, #12]
 8008fa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fa8:	4013      	ands	r3, r2
 8008faa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681a      	ldr	r2, [r3, #0]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	0159      	lsls	r1, r3, #5
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	440b      	add	r3, r1
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	4b05      	ldr	r3, [pc, #20]	; (8008fe0 <USB_DeactivateEndpoint+0x1b4>)
 8008fca:	4013      	ands	r3, r2
 8008fcc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr
 8008fdc:	ec337800 	.word	0xec337800
 8008fe0:	eff37800 	.word	0xeff37800

08008fe4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b08a      	sub	sp, #40	; 0x28
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	4613      	mov	r3, r2
 8008ff0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b01      	cmp	r3, #1
 8009002:	f040 815c 	bne.w	80092be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d132      	bne.n	8009074 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	69ba      	ldr	r2, [r7, #24]
 800901e:	0151      	lsls	r1, r2, #5
 8009020:	69fa      	ldr	r2, [r7, #28]
 8009022:	440a      	add	r2, r1
 8009024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009028:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800902c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009030:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009032:	69bb      	ldr	r3, [r7, #24]
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	0151      	lsls	r1, r2, #5
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	440a      	add	r2, r1
 8009048:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800904c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009050:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	015a      	lsls	r2, r3, #5
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	4413      	add	r3, r2
 800905a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800905e:	691b      	ldr	r3, [r3, #16]
 8009060:	69ba      	ldr	r2, [r7, #24]
 8009062:	0151      	lsls	r1, r2, #5
 8009064:	69fa      	ldr	r2, [r7, #28]
 8009066:	440a      	add	r2, r1
 8009068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800906c:	0cdb      	lsrs	r3, r3, #19
 800906e:	04db      	lsls	r3, r3, #19
 8009070:	6113      	str	r3, [r2, #16]
 8009072:	e074      	b.n	800915e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009080:	691b      	ldr	r3, [r3, #16]
 8009082:	69ba      	ldr	r2, [r7, #24]
 8009084:	0151      	lsls	r1, r2, #5
 8009086:	69fa      	ldr	r2, [r7, #28]
 8009088:	440a      	add	r2, r1
 800908a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800908e:	0cdb      	lsrs	r3, r3, #19
 8009090:	04db      	lsls	r3, r3, #19
 8009092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	015a      	lsls	r2, r3, #5
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	4413      	add	r3, r2
 800909c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	0151      	lsls	r1, r2, #5
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	440a      	add	r2, r1
 80090aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090b8:	69bb      	ldr	r3, [r7, #24]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	6999      	ldr	r1, [r3, #24]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	440b      	add	r3, r1
 80090d0:	1e59      	subs	r1, r3, #1
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80090da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80090dc:	4b9d      	ldr	r3, [pc, #628]	; (8009354 <USB_EPStartXfer+0x370>)
 80090de:	400b      	ands	r3, r1
 80090e0:	69b9      	ldr	r1, [r7, #24]
 80090e2:	0148      	lsls	r0, r1, #5
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	4401      	add	r1, r0
 80090e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090ec:	4313      	orrs	r3, r2
 80090ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009106:	69b9      	ldr	r1, [r7, #24]
 8009108:	0148      	lsls	r0, r1, #5
 800910a:	69f9      	ldr	r1, [r7, #28]
 800910c:	4401      	add	r1, r0
 800910e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009112:	4313      	orrs	r3, r2
 8009114:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	791b      	ldrb	r3, [r3, #4]
 800911a:	2b01      	cmp	r3, #1
 800911c:	d11f      	bne.n	800915e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	015a      	lsls	r2, r3, #5
 8009122:	69fb      	ldr	r3, [r7, #28]
 8009124:	4413      	add	r3, r2
 8009126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	69ba      	ldr	r2, [r7, #24]
 800912e:	0151      	lsls	r1, r2, #5
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	440a      	add	r2, r1
 8009134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009138:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800913c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	69fb      	ldr	r3, [r7, #28]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914a:	691b      	ldr	r3, [r3, #16]
 800914c:	69ba      	ldr	r2, [r7, #24]
 800914e:	0151      	lsls	r1, r2, #5
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	440a      	add	r2, r1
 8009154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009158:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800915c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b01      	cmp	r3, #1
 8009162:	d14b      	bne.n	80091fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	695b      	ldr	r3, [r3, #20]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d009      	beq.n	8009180 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009178:	461a      	mov	r2, r3
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	791b      	ldrb	r3, [r3, #4]
 8009184:	2b01      	cmp	r3, #1
 8009186:	d128      	bne.n	80091da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009188:	69fb      	ldr	r3, [r7, #28]
 800918a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	2b00      	cmp	r3, #0
 8009196:	d110      	bne.n	80091ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009198:	69bb      	ldr	r3, [r7, #24]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	69fb      	ldr	r3, [r7, #28]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	0151      	lsls	r1, r2, #5
 80091aa:	69fa      	ldr	r2, [r7, #28]
 80091ac:	440a      	add	r2, r1
 80091ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80091b6:	6013      	str	r3, [r2, #0]
 80091b8:	e00f      	b.n	80091da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	69fb      	ldr	r3, [r7, #28]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	0151      	lsls	r1, r2, #5
 80091cc:	69fa      	ldr	r2, [r7, #28]
 80091ce:	440a      	add	r2, r1
 80091d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091da:	69bb      	ldr	r3, [r7, #24]
 80091dc:	015a      	lsls	r2, r3, #5
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	69ba      	ldr	r2, [r7, #24]
 80091ea:	0151      	lsls	r1, r2, #5
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	440a      	add	r2, r1
 80091f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	e133      	b.n	8009464 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091fc:	69bb      	ldr	r3, [r7, #24]
 80091fe:	015a      	lsls	r2, r3, #5
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	4413      	add	r3, r2
 8009204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69ba      	ldr	r2, [r7, #24]
 800920c:	0151      	lsls	r1, r2, #5
 800920e:	69fa      	ldr	r2, [r7, #28]
 8009210:	440a      	add	r2, r1
 8009212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009216:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800921a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	791b      	ldrb	r3, [r3, #4]
 8009220:	2b01      	cmp	r3, #1
 8009222:	d015      	beq.n	8009250 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 811b 	beq.w	8009464 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	f003 030f 	and.w	r3, r3, #15
 800923e:	2101      	movs	r1, #1
 8009240:	fa01 f303 	lsl.w	r3, r1, r3
 8009244:	69f9      	ldr	r1, [r7, #28]
 8009246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800924a:	4313      	orrs	r3, r2
 800924c:	634b      	str	r3, [r1, #52]	; 0x34
 800924e:	e109      	b.n	8009464 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925c:	2b00      	cmp	r3, #0
 800925e:	d110      	bne.n	8009282 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009260:	69bb      	ldr	r3, [r7, #24]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800927e:	6013      	str	r3, [r2, #0]
 8009280:	e00f      	b.n	80092a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	0151      	lsls	r1, r2, #5
 8009294:	69fa      	ldr	r2, [r7, #28]
 8009296:	440a      	add	r2, r1
 8009298:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800929c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	6919      	ldr	r1, [r3, #16]
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	781a      	ldrb	r2, [r3, #0]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	b298      	uxth	r0, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	4603      	mov	r3, r0
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 fade 	bl	8009878 <USB_WritePacket>
 80092bc:	e0d2      	b.n	8009464 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	69fb      	ldr	r3, [r7, #28]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ca:	691b      	ldr	r3, [r3, #16]
 80092cc:	69ba      	ldr	r2, [r7, #24]
 80092ce:	0151      	lsls	r1, r2, #5
 80092d0:	69fa      	ldr	r2, [r7, #28]
 80092d2:	440a      	add	r2, r1
 80092d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092d8:	0cdb      	lsrs	r3, r3, #19
 80092da:	04db      	lsls	r3, r3, #19
 80092dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	69fb      	ldr	r3, [r7, #28]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ea:	691b      	ldr	r3, [r3, #16]
 80092ec:	69ba      	ldr	r2, [r7, #24]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009300:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	699b      	ldr	r3, [r3, #24]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d126      	bne.n	8009358 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800930a:	69bb      	ldr	r3, [r7, #24]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009320:	69b9      	ldr	r1, [r7, #24]
 8009322:	0148      	lsls	r0, r1, #5
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	4401      	add	r1, r0
 8009328:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800932c:	4313      	orrs	r3, r2
 800932e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009330:	69bb      	ldr	r3, [r7, #24]
 8009332:	015a      	lsls	r2, r3, #5
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	4413      	add	r3, r2
 8009338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933c:	691b      	ldr	r3, [r3, #16]
 800933e:	69ba      	ldr	r2, [r7, #24]
 8009340:	0151      	lsls	r1, r2, #5
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	440a      	add	r2, r1
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800934e:	6113      	str	r3, [r2, #16]
 8009350:	e03a      	b.n	80093c8 <USB_EPStartXfer+0x3e4>
 8009352:	bf00      	nop
 8009354:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	699a      	ldr	r2, [r3, #24]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	4413      	add	r3, r2
 8009362:	1e5a      	subs	r2, r3, #1
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	fbb2 f3f3 	udiv	r3, r2, r3
 800936c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	68db      	ldr	r3, [r3, #12]
 8009372:	8afa      	ldrh	r2, [r7, #22]
 8009374:	fb03 f202 	mul.w	r2, r3, r2
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800937c:	69bb      	ldr	r3, [r7, #24]
 800937e:	015a      	lsls	r2, r3, #5
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	4413      	add	r3, r2
 8009384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009388:	691a      	ldr	r2, [r3, #16]
 800938a:	8afb      	ldrh	r3, [r7, #22]
 800938c:	04d9      	lsls	r1, r3, #19
 800938e:	4b38      	ldr	r3, [pc, #224]	; (8009470 <USB_EPStartXfer+0x48c>)
 8009390:	400b      	ands	r3, r1
 8009392:	69b9      	ldr	r1, [r7, #24]
 8009394:	0148      	lsls	r0, r1, #5
 8009396:	69f9      	ldr	r1, [r7, #28]
 8009398:	4401      	add	r1, r0
 800939a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800939e:	4313      	orrs	r3, r2
 80093a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	691a      	ldr	r2, [r3, #16]
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093b8:	69b9      	ldr	r1, [r7, #24]
 80093ba:	0148      	lsls	r0, r1, #5
 80093bc:	69f9      	ldr	r1, [r7, #28]
 80093be:	4401      	add	r1, r0
 80093c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093c4:	4313      	orrs	r3, r2
 80093c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80093c8:	79fb      	ldrb	r3, [r7, #7]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d10d      	bne.n	80093ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d009      	beq.n	80093ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	6919      	ldr	r1, [r3, #16]
 80093da:	69bb      	ldr	r3, [r7, #24]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e6:	460a      	mov	r2, r1
 80093e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	791b      	ldrb	r3, [r3, #4]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d128      	bne.n	8009444 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d110      	bne.n	8009424 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	015a      	lsls	r2, r3, #5
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	4413      	add	r3, r2
 800940a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	0151      	lsls	r1, r2, #5
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	440a      	add	r2, r1
 8009418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800941c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e00f      	b.n	8009444 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	0151      	lsls	r1, r2, #5
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	440a      	add	r2, r1
 800943a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800943e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009442:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009444:	69bb      	ldr	r3, [r7, #24]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	69fb      	ldr	r3, [r7, #28]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	69ba      	ldr	r2, [r7, #24]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	69fa      	ldr	r2, [r7, #28]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800945e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009462:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	3720      	adds	r7, #32
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	1ff80000 	.word	0x1ff80000

08009474 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009474:	b480      	push	{r7}
 8009476:	b087      	sub	sp, #28
 8009478:	af00      	add	r7, sp, #0
 800947a:	60f8      	str	r0, [r7, #12]
 800947c:	60b9      	str	r1, [r7, #8]
 800947e:	4613      	mov	r3, r2
 8009480:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2b01      	cmp	r3, #1
 8009492:	f040 80ce 	bne.w	8009632 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d132      	bne.n	8009504 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094aa:	691b      	ldr	r3, [r3, #16]
 80094ac:	693a      	ldr	r2, [r7, #16]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	015a      	lsls	r2, r3, #5
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	4413      	add	r3, r2
 80094ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ce:	691b      	ldr	r3, [r3, #16]
 80094d0:	693a      	ldr	r2, [r7, #16]
 80094d2:	0151      	lsls	r1, r2, #5
 80094d4:	697a      	ldr	r2, [r7, #20]
 80094d6:	440a      	add	r2, r1
 80094d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	015a      	lsls	r2, r3, #5
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	4413      	add	r3, r2
 80094ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	693a      	ldr	r2, [r7, #16]
 80094f2:	0151      	lsls	r1, r2, #5
 80094f4:	697a      	ldr	r2, [r7, #20]
 80094f6:	440a      	add	r2, r1
 80094f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094fc:	0cdb      	lsrs	r3, r3, #19
 80094fe:	04db      	lsls	r3, r3, #19
 8009500:	6113      	str	r3, [r2, #16]
 8009502:	e04e      	b.n	80095a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	0cdb      	lsrs	r3, r3, #19
 8009520:	04db      	lsls	r3, r3, #19
 8009522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	691b      	ldr	r3, [r3, #16]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	699a      	ldr	r2, [r3, #24]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	429a      	cmp	r2, r3
 8009552:	d903      	bls.n	800955c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	015a      	lsls	r2, r3, #5
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	4413      	add	r3, r2
 8009564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	693a      	ldr	r2, [r7, #16]
 800956c:	0151      	lsls	r1, r2, #5
 800956e:	697a      	ldr	r2, [r7, #20]
 8009570:	440a      	add	r2, r1
 8009572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800957a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	691a      	ldr	r2, [r3, #16]
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009592:	6939      	ldr	r1, [r7, #16]
 8009594:	0148      	lsls	r0, r1, #5
 8009596:	6979      	ldr	r1, [r7, #20]
 8009598:	4401      	add	r1, r0
 800959a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800959e:	4313      	orrs	r3, r2
 80095a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80095a2:	79fb      	ldrb	r3, [r7, #7]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d11e      	bne.n	80095e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	695b      	ldr	r3, [r3, #20]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d009      	beq.n	80095c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	461a      	mov	r2, r3
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	695b      	ldr	r3, [r3, #20]
 80095c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	015a      	lsls	r2, r3, #5
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	693a      	ldr	r2, [r7, #16]
 80095d4:	0151      	lsls	r1, r2, #5
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	440a      	add	r2, r1
 80095da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095e2:	6013      	str	r3, [r2, #0]
 80095e4:	e097      	b.n	8009716 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	015a      	lsls	r2, r3, #5
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	4413      	add	r3, r2
 80095ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	0151      	lsls	r1, r2, #5
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	440a      	add	r2, r1
 80095fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009600:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009604:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 8083 	beq.w	8009716 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	f003 030f 	and.w	r3, r3, #15
 8009620:	2101      	movs	r1, #1
 8009622:	fa01 f303 	lsl.w	r3, r1, r3
 8009626:	6979      	ldr	r1, [r7, #20]
 8009628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800962c:	4313      	orrs	r3, r2
 800962e:	634b      	str	r3, [r1, #52]	; 0x34
 8009630:	e071      	b.n	8009716 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963e:	691b      	ldr	r3, [r3, #16]
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	0151      	lsls	r1, r2, #5
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	440a      	add	r2, r1
 8009648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800964c:	0cdb      	lsrs	r3, r3, #19
 800964e:	04db      	lsls	r3, r3, #19
 8009650:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	015a      	lsls	r2, r3, #5
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	4413      	add	r3, r2
 800965a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	0151      	lsls	r1, r2, #5
 8009664:	697a      	ldr	r2, [r7, #20]
 8009666:	440a      	add	r2, r1
 8009668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009670:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009674:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	0151      	lsls	r1, r2, #5
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	440a      	add	r2, r1
 80096a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	015a      	lsls	r2, r3, #5
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	4413      	add	r3, r2
 80096b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096c4:	6939      	ldr	r1, [r7, #16]
 80096c6:	0148      	lsls	r0, r1, #5
 80096c8:	6979      	ldr	r1, [r7, #20]
 80096ca:	4401      	add	r1, r0
 80096cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096d0:	4313      	orrs	r3, r2
 80096d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d10d      	bne.n	80096f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	691b      	ldr	r3, [r3, #16]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	6919      	ldr	r1, [r3, #16]
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	015a      	lsls	r2, r3, #5
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	4413      	add	r3, r2
 80096ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f2:	460a      	mov	r2, r1
 80096f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80096f6:	693b      	ldr	r3, [r7, #16]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	693a      	ldr	r2, [r7, #16]
 8009706:	0151      	lsls	r1, r2, #5
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	440a      	add	r2, r1
 800970c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009710:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009714:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	371c      	adds	r7, #28
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009732:	2300      	movs	r3, #0
 8009734:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d14a      	bne.n	80097d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	015a      	lsls	r2, r3, #5
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	4413      	add	r3, r2
 800974c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009756:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800975a:	f040 8086 	bne.w	800986a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	015a      	lsls	r2, r3, #5
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4413      	add	r3, r2
 8009768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	7812      	ldrb	r2, [r2, #0]
 8009772:	0151      	lsls	r1, r2, #5
 8009774:	693a      	ldr	r2, [r7, #16]
 8009776:	440a      	add	r2, r1
 8009778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800977c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009780:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	015a      	lsls	r2, r3, #5
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	4413      	add	r3, r2
 800978c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7812      	ldrb	r2, [r2, #0]
 8009796:	0151      	lsls	r1, r2, #5
 8009798:	693a      	ldr	r2, [r7, #16]
 800979a:	440a      	add	r2, r1
 800979c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	3301      	adds	r3, #1
 80097aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d902      	bls.n	80097bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	75fb      	strb	r3, [r7, #23]
          break;
 80097ba:	e056      	b.n	800986a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097d4:	d0e7      	beq.n	80097a6 <USB_EPStopXfer+0x82>
 80097d6:	e048      	b.n	800986a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	781b      	ldrb	r3, [r3, #0]
 80097dc:	015a      	lsls	r2, r3, #5
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	4413      	add	r3, r2
 80097e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097f0:	d13b      	bne.n	800986a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	015a      	lsls	r2, r3, #5
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	4413      	add	r3, r2
 80097fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	7812      	ldrb	r2, [r2, #0]
 8009806:	0151      	lsls	r1, r2, #5
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	440a      	add	r2, r1
 800980c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009810:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009814:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	781b      	ldrb	r3, [r3, #0]
 800981a:	015a      	lsls	r2, r3, #5
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	4413      	add	r3, r2
 8009820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	7812      	ldrb	r2, [r2, #0]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009834:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009838:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	3301      	adds	r3, #1
 800983e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f242 7210 	movw	r2, #10000	; 0x2710
 8009846:	4293      	cmp	r3, r2
 8009848:	d902      	bls.n	8009850 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	75fb      	strb	r3, [r7, #23]
          break;
 800984e:	e00c      	b.n	800986a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	781b      	ldrb	r3, [r3, #0]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009868:	d0e7      	beq.n	800983a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800986a:	7dfb      	ldrb	r3, [r7, #23]
}
 800986c:	4618      	mov	r0, r3
 800986e:	371c      	adds	r7, #28
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009878:	b480      	push	{r7}
 800987a:	b089      	sub	sp, #36	; 0x24
 800987c:	af00      	add	r7, sp, #0
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	460b      	mov	r3, r1
 8009888:	71fb      	strb	r3, [r7, #7]
 800988a:	4613      	mov	r3, r2
 800988c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009896:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800989a:	2b00      	cmp	r3, #0
 800989c:	d123      	bne.n	80098e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800989e:	88bb      	ldrh	r3, [r7, #4]
 80098a0:	3303      	adds	r3, #3
 80098a2:	089b      	lsrs	r3, r3, #2
 80098a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80098a6:	2300      	movs	r3, #0
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	e018      	b.n	80098de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80098ac:	79fb      	ldrb	r3, [r7, #7]
 80098ae:	031a      	lsls	r2, r3, #12
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	4413      	add	r3, r2
 80098b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098b8:	461a      	mov	r2, r3
 80098ba:	69fb      	ldr	r3, [r7, #28]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80098c0:	69fb      	ldr	r3, [r7, #28]
 80098c2:	3301      	adds	r3, #1
 80098c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	3301      	adds	r3, #1
 80098ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098cc:	69fb      	ldr	r3, [r7, #28]
 80098ce:	3301      	adds	r3, #1
 80098d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	3301      	adds	r3, #1
 80098d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	3301      	adds	r3, #1
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d3e2      	bcc.n	80098ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098e6:	2300      	movs	r3, #0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3724      	adds	r7, #36	; 0x24
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr

080098f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b08b      	sub	sp, #44	; 0x2c
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	4613      	mov	r3, r2
 8009900:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	089b      	lsrs	r3, r3, #2
 800990e:	b29b      	uxth	r3, r3
 8009910:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009912:	88fb      	ldrh	r3, [r7, #6]
 8009914:	f003 0303 	and.w	r3, r3, #3
 8009918:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800991a:	2300      	movs	r3, #0
 800991c:	623b      	str	r3, [r7, #32]
 800991e:	e014      	b.n	800994a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	601a      	str	r2, [r3, #0]
    pDest++;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	3301      	adds	r3, #1
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009934:	3301      	adds	r3, #1
 8009936:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800993a:	3301      	adds	r3, #1
 800993c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009940:	3301      	adds	r3, #1
 8009942:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	3301      	adds	r3, #1
 8009948:	623b      	str	r3, [r7, #32]
 800994a:	6a3a      	ldr	r2, [r7, #32]
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	429a      	cmp	r2, r3
 8009950:	d3e6      	bcc.n	8009920 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009952:	8bfb      	ldrh	r3, [r7, #30]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01e      	beq.n	8009996 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009958:	2300      	movs	r3, #0
 800995a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009962:	461a      	mov	r2, r3
 8009964:	f107 0310 	add.w	r3, r7, #16
 8009968:	6812      	ldr	r2, [r2, #0]
 800996a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800996c:	693a      	ldr	r2, [r7, #16]
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	00db      	lsls	r3, r3, #3
 8009974:	fa22 f303 	lsr.w	r3, r2, r3
 8009978:	b2da      	uxtb	r2, r3
 800997a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997c:	701a      	strb	r2, [r3, #0]
      i++;
 800997e:	6a3b      	ldr	r3, [r7, #32]
 8009980:	3301      	adds	r3, #1
 8009982:	623b      	str	r3, [r7, #32]
      pDest++;
 8009984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009986:	3301      	adds	r3, #1
 8009988:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800998a:	8bfb      	ldrh	r3, [r7, #30]
 800998c:	3b01      	subs	r3, #1
 800998e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009990:	8bfb      	ldrh	r3, [r7, #30]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d1ea      	bne.n	800996c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009998:	4618      	mov	r0, r3
 800999a:	372c      	adds	r7, #44	; 0x2c
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d12c      	bne.n	8009a1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	015a      	lsls	r2, r3, #5
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	4413      	add	r3, r2
 80099c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	db12      	blt.n	80099f8 <USB_EPSetStall+0x54>
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d00f      	beq.n	80099f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68ba      	ldr	r2, [r7, #8]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	0151      	lsls	r1, r2, #5
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	440a      	add	r2, r1
 8009a0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a16:	6013      	str	r3, [r2, #0]
 8009a18:	e02b      	b.n	8009a72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	015a      	lsls	r2, r3, #5
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	4413      	add	r3, r2
 8009a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	db12      	blt.n	8009a52 <USB_EPSetStall+0xae>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d00f      	beq.n	8009a52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	0151      	lsls	r1, r2, #5
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	440a      	add	r2, r1
 8009a48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009a50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	781b      	ldrb	r3, [r3, #0]
 8009a92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	785b      	ldrb	r3, [r3, #1]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d128      	bne.n	8009aee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	015a      	lsls	r2, r3, #5
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	0151      	lsls	r1, r2, #5
 8009aae:	68fa      	ldr	r2, [r7, #12]
 8009ab0:	440a      	add	r2, r1
 8009ab2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009aba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	791b      	ldrb	r3, [r3, #4]
 8009ac0:	2b03      	cmp	r3, #3
 8009ac2:	d003      	beq.n	8009acc <USB_EPClearStall+0x4c>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	791b      	ldrb	r3, [r3, #4]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d138      	bne.n	8009b3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68ba      	ldr	r2, [r7, #8]
 8009adc:	0151      	lsls	r1, r2, #5
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	440a      	add	r2, r1
 8009ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	e027      	b.n	8009b3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	015a      	lsls	r2, r3, #5
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	4413      	add	r3, r2
 8009af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	0151      	lsls	r1, r2, #5
 8009b00:	68fa      	ldr	r2, [r7, #12]
 8009b02:	440a      	add	r2, r1
 8009b04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	791b      	ldrb	r3, [r3, #4]
 8009b12:	2b03      	cmp	r3, #3
 8009b14:	d003      	beq.n	8009b1e <USB_EPClearStall+0x9e>
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	791b      	ldrb	r3, [r3, #4]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d10f      	bne.n	8009b3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	0151      	lsls	r1, r2, #5
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	440a      	add	r2, r1
 8009b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009b3e:	2300      	movs	r3, #0
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3714      	adds	r7, #20
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	011b      	lsls	r3, r3, #4
 8009b7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b80:	68f9      	ldr	r1, [r7, #12]
 8009b82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b86:	4313      	orrs	r3, r2
 8009b88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bb2:	f023 0303 	bic.w	r3, r3, #3
 8009bb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bc6:	f023 0302 	bic.w	r3, r3, #2
 8009bca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	68fa      	ldr	r2, [r7, #12]
 8009bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bf4:	f023 0303 	bic.w	r3, r3, #3
 8009bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c08:	f043 0302 	orr.w	r3, r3, #2
 8009c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4013      	ands	r3, r2
 8009c32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009c34:	68fb      	ldr	r3, [r7, #12]
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3714      	adds	r7, #20
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c42:	b480      	push	{r7}
 8009c44:	b085      	sub	sp, #20
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c54:	699b      	ldr	r3, [r3, #24]
 8009c56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c5e:	69db      	ldr	r3, [r3, #28]
 8009c60:	68ba      	ldr	r2, [r7, #8]
 8009c62:	4013      	ands	r3, r2
 8009c64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	0c1b      	lsrs	r3, r3, #16
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c76:	b480      	push	{r7}
 8009c78:	b085      	sub	sp, #20
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c88:	699b      	ldr	r3, [r3, #24]
 8009c8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c92:	69db      	ldr	r3, [r3, #28]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	4013      	ands	r3, r2
 8009c98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	b29b      	uxth	r3, r3
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc6:	689b      	ldr	r3, [r3, #8]
 8009cc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4013      	ands	r3, r2
 8009cd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cd8:	68bb      	ldr	r3, [r7, #8]
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3714      	adds	r7, #20
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b087      	sub	sp, #28
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cfc:	691b      	ldr	r3, [r3, #16]
 8009cfe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009d0a:	78fb      	ldrb	r3, [r7, #3]
 8009d0c:	f003 030f 	and.w	r3, r3, #15
 8009d10:	68fa      	ldr	r2, [r7, #12]
 8009d12:	fa22 f303 	lsr.w	r3, r2, r3
 8009d16:	01db      	lsls	r3, r3, #7
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	693a      	ldr	r2, [r7, #16]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	015a      	lsls	r2, r3, #5
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	4413      	add	r3, r2
 8009d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	693a      	ldr	r2, [r7, #16]
 8009d30:	4013      	ands	r3, r2
 8009d32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009d34:	68bb      	ldr	r3, [r7, #8]
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	371c      	adds	r7, #28
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009d42:	b480      	push	{r7}
 8009d44:	b083      	sub	sp, #12
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009d5e:	b480      	push	{r7}
 8009d60:	b085      	sub	sp, #20
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d78:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b087      	sub	sp, #28
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	460b      	mov	r3, r1
 8009dae:	607a      	str	r2, [r7, #4]
 8009db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	333c      	adds	r3, #60	; 0x3c
 8009dba:	3304      	adds	r3, #4
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	4a26      	ldr	r2, [pc, #152]	; (8009e5c <USB_EP0_OutStart+0xb8>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d90a      	bls.n	8009dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009dd8:	d101      	bne.n	8009dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009dda:	2300      	movs	r3, #0
 8009ddc:	e037      	b.n	8009e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de4:	461a      	mov	r2, r3
 8009de6:	2300      	movs	r3, #0
 8009de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	697a      	ldr	r2, [r7, #20]
 8009df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	697a      	ldr	r2, [r7, #20]
 8009e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e0c:	f043 0318 	orr.w	r3, r3, #24
 8009e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	697a      	ldr	r2, [r7, #20]
 8009e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d10f      	bne.n	8009e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e32:	461a      	mov	r2, r3
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	697a      	ldr	r2, [r7, #20]
 8009e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	371c      	adds	r7, #28
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	4f54300a 	.word	0x4f54300a

08009e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3301      	adds	r3, #1
 8009e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	4a13      	ldr	r2, [pc, #76]	; (8009ec4 <USB_CoreReset+0x64>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d901      	bls.n	8009e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e01b      	b.n	8009eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	daf2      	bge.n	8009e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	f043 0201 	orr.w	r2, r3, #1
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	4a09      	ldr	r2, [pc, #36]	; (8009ec4 <USB_CoreReset+0x64>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d901      	bls.n	8009ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009ea4:	2303      	movs	r3, #3
 8009ea6:	e006      	b.n	8009eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d0f0      	beq.n	8009e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	00030d40 	.word	0x00030d40

08009ec8 <__NVIC_SetPriority>:
{
 8009ec8:	b480      	push	{r7}
 8009eca:	b083      	sub	sp, #12
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	4603      	mov	r3, r0
 8009ed0:	6039      	str	r1, [r7, #0]
 8009ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	db0a      	blt.n	8009ef2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	490c      	ldr	r1, [pc, #48]	; (8009f14 <__NVIC_SetPriority+0x4c>)
 8009ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee6:	0112      	lsls	r2, r2, #4
 8009ee8:	b2d2      	uxtb	r2, r2
 8009eea:	440b      	add	r3, r1
 8009eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ef0:	e00a      	b.n	8009f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	4908      	ldr	r1, [pc, #32]	; (8009f18 <__NVIC_SetPriority+0x50>)
 8009ef8:	79fb      	ldrb	r3, [r7, #7]
 8009efa:	f003 030f 	and.w	r3, r3, #15
 8009efe:	3b04      	subs	r3, #4
 8009f00:	0112      	lsls	r2, r2, #4
 8009f02:	b2d2      	uxtb	r2, r2
 8009f04:	440b      	add	r3, r1
 8009f06:	761a      	strb	r2, [r3, #24]
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr
 8009f14:	e000e100 	.word	0xe000e100
 8009f18:	e000ed00 	.word	0xe000ed00

08009f1c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009f20:	4b05      	ldr	r3, [pc, #20]	; (8009f38 <SysTick_Handler+0x1c>)
 8009f22:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009f24:	f002 f93a 	bl	800c19c <xTaskGetSchedulerState>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d001      	beq.n	8009f32 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009f2e:	f000 fd9b 	bl	800aa68 <xPortSysTickHandler>
  }
}
 8009f32:	bf00      	nop
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	e000e010 	.word	0xe000e010

08009f3c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009f40:	2100      	movs	r1, #0
 8009f42:	f06f 0004 	mvn.w	r0, #4
 8009f46:	f7ff ffbf 	bl	8009ec8 <__NVIC_SetPriority>
#endif
}
 8009f4a:	bf00      	nop
 8009f4c:	bd80      	pop	{r7, pc}
	...

08009f50 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f56:	f3ef 8305 	mrs	r3, IPSR
 8009f5a:	603b      	str	r3, [r7, #0]
  return(result);
 8009f5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009f62:	f06f 0305 	mvn.w	r3, #5
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	e00c      	b.n	8009f84 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009f6a:	4b0a      	ldr	r3, [pc, #40]	; (8009f94 <osKernelInitialize+0x44>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d105      	bne.n	8009f7e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009f72:	4b08      	ldr	r3, [pc, #32]	; (8009f94 <osKernelInitialize+0x44>)
 8009f74:	2201      	movs	r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	607b      	str	r3, [r7, #4]
 8009f7c:	e002      	b.n	8009f84 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f84:	687b      	ldr	r3, [r7, #4]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
 8009f92:	bf00      	nop
 8009f94:	2000064c 	.word	0x2000064c

08009f98 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b082      	sub	sp, #8
 8009f9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f9e:	f3ef 8305 	mrs	r3, IPSR
 8009fa2:	603b      	str	r3, [r7, #0]
  return(result);
 8009fa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d003      	beq.n	8009fb2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009faa:	f06f 0305 	mvn.w	r3, #5
 8009fae:	607b      	str	r3, [r7, #4]
 8009fb0:	e010      	b.n	8009fd4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009fb2:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <osKernelStart+0x48>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d109      	bne.n	8009fce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009fba:	f7ff ffbf 	bl	8009f3c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009fbe:	4b08      	ldr	r3, [pc, #32]	; (8009fe0 <osKernelStart+0x48>)
 8009fc0:	2202      	movs	r2, #2
 8009fc2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009fc4:	f001 fca2 	bl	800b90c <vTaskStartScheduler>
      stat = osOK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	607b      	str	r3, [r7, #4]
 8009fcc:	e002      	b.n	8009fd4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009fce:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009fd4:	687b      	ldr	r3, [r7, #4]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
 8009fde:	bf00      	nop
 8009fe0:	2000064c 	.word	0x2000064c

08009fe4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08e      	sub	sp, #56	; 0x38
 8009fe8:	af04      	add	r7, sp, #16
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff4:	f3ef 8305 	mrs	r3, IPSR
 8009ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8009ffa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d17e      	bne.n	800a0fe <osThreadNew+0x11a>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d07b      	beq.n	800a0fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a006:	2380      	movs	r3, #128	; 0x80
 800a008:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a00a:	2318      	movs	r3, #24
 800a00c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a00e:	2300      	movs	r3, #0
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d045      	beq.n	800a0aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d002      	beq.n	800a02c <osThreadNew+0x48>
        name = attr->name;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d002      	beq.n	800a03a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	699b      	ldr	r3, [r3, #24]
 800a038:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d008      	beq.n	800a052 <osThreadNew+0x6e>
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	2b38      	cmp	r3, #56	; 0x38
 800a044:	d805      	bhi.n	800a052 <osThreadNew+0x6e>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f003 0301 	and.w	r3, r3, #1
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <osThreadNew+0x72>
        return (NULL);
 800a052:	2300      	movs	r3, #0
 800a054:	e054      	b.n	800a100 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d003      	beq.n	800a066 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	695b      	ldr	r3, [r3, #20]
 800a062:	089b      	lsrs	r3, r3, #2
 800a064:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	689b      	ldr	r3, [r3, #8]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00e      	beq.n	800a08c <osThreadNew+0xa8>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	68db      	ldr	r3, [r3, #12]
 800a072:	2b5b      	cmp	r3, #91	; 0x5b
 800a074:	d90a      	bls.n	800a08c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d006      	beq.n	800a08c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <osThreadNew+0xa8>
        mem = 1;
 800a086:	2301      	movs	r3, #1
 800a088:	61bb      	str	r3, [r7, #24]
 800a08a:	e010      	b.n	800a0ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	689b      	ldr	r3, [r3, #8]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d10c      	bne.n	800a0ae <osThreadNew+0xca>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d108      	bne.n	800a0ae <osThreadNew+0xca>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	691b      	ldr	r3, [r3, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d104      	bne.n	800a0ae <osThreadNew+0xca>
          mem = 0;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	e001      	b.n	800a0ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a0ae:	69bb      	ldr	r3, [r7, #24]
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d110      	bne.n	800a0d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a0b8:	687a      	ldr	r2, [r7, #4]
 800a0ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a0bc:	9202      	str	r2, [sp, #8]
 800a0be:	9301      	str	r3, [sp, #4]
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	6a3a      	ldr	r2, [r7, #32]
 800a0c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f001 fa48 	bl	800b560 <xTaskCreateStatic>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	613b      	str	r3, [r7, #16]
 800a0d4:	e013      	b.n	800a0fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d110      	bne.n	800a0fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a0dc:	6a3b      	ldr	r3, [r7, #32]
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	f107 0310 	add.w	r3, r7, #16
 800a0e4:	9301      	str	r3, [sp, #4]
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f001 fa93 	bl	800b61a <xTaskCreate>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d001      	beq.n	800a0fe <osThreadNew+0x11a>
            hTask = NULL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a0fe:	693b      	ldr	r3, [r7, #16]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3728      	adds	r7, #40	; 0x28
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a110:	f3ef 8305 	mrs	r3, IPSR
 800a114:	60bb      	str	r3, [r7, #8]
  return(result);
 800a116:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <osDelay+0x1c>
    stat = osErrorISR;
 800a11c:	f06f 0305 	mvn.w	r3, #5
 800a120:	60fb      	str	r3, [r7, #12]
 800a122:	e007      	b.n	800a134 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a124:	2300      	movs	r3, #0
 800a126:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f001 fbb8 	bl	800b8a4 <vTaskDelay>
    }
  }

  return (stat);
 800a134:	68fb      	ldr	r3, [r7, #12]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
	...

0800a140 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a140:	b480      	push	{r7}
 800a142:	b085      	sub	sp, #20
 800a144:	af00      	add	r7, sp, #0
 800a146:	60f8      	str	r0, [r7, #12]
 800a148:	60b9      	str	r1, [r7, #8]
 800a14a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4a07      	ldr	r2, [pc, #28]	; (800a16c <vApplicationGetIdleTaskMemory+0x2c>)
 800a150:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	4a06      	ldr	r2, [pc, #24]	; (800a170 <vApplicationGetIdleTaskMemory+0x30>)
 800a156:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2280      	movs	r2, #128	; 0x80
 800a15c:	601a      	str	r2, [r3, #0]
}
 800a15e:	bf00      	nop
 800a160:	3714      	adds	r7, #20
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	20000650 	.word	0x20000650
 800a170:	200006ac 	.word	0x200006ac

0800a174 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a174:	b480      	push	{r7}
 800a176:	b085      	sub	sp, #20
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4a07      	ldr	r2, [pc, #28]	; (800a1a0 <vApplicationGetTimerTaskMemory+0x2c>)
 800a184:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	4a06      	ldr	r2, [pc, #24]	; (800a1a4 <vApplicationGetTimerTaskMemory+0x30>)
 800a18a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a192:	601a      	str	r2, [r3, #0]
}
 800a194:	bf00      	nop
 800a196:	3714      	adds	r7, #20
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	200008ac 	.word	0x200008ac
 800a1a4:	20000908 	.word	0x20000908

0800a1a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08a      	sub	sp, #40	; 0x28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a1b4:	f001 fc10 	bl	800b9d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a1b8:	4b5b      	ldr	r3, [pc, #364]	; (800a328 <pvPortMalloc+0x180>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d101      	bne.n	800a1c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1c0:	f000 f920 	bl	800a404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1c4:	4b59      	ldr	r3, [pc, #356]	; (800a32c <pvPortMalloc+0x184>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 8093 	bne.w	800a2f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d01d      	beq.n	800a214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a1d8:	2208      	movs	r2, #8
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4413      	add	r3, r2
 800a1de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f003 0307 	and.w	r3, r3, #7
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d014      	beq.n	800a214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f023 0307 	bic.w	r3, r3, #7
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d00a      	beq.n	800a214 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a202:	f383 8811 	msr	BASEPRI, r3
 800a206:	f3bf 8f6f 	isb	sy
 800a20a:	f3bf 8f4f 	dsb	sy
 800a20e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a210:	bf00      	nop
 800a212:	e7fe      	b.n	800a212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d06e      	beq.n	800a2f8 <pvPortMalloc+0x150>
 800a21a:	4b45      	ldr	r3, [pc, #276]	; (800a330 <pvPortMalloc+0x188>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	687a      	ldr	r2, [r7, #4]
 800a220:	429a      	cmp	r2, r3
 800a222:	d869      	bhi.n	800a2f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a224:	4b43      	ldr	r3, [pc, #268]	; (800a334 <pvPortMalloc+0x18c>)
 800a226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a228:	4b42      	ldr	r3, [pc, #264]	; (800a334 <pvPortMalloc+0x18c>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a22e:	e004      	b.n	800a23a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	429a      	cmp	r2, r3
 800a242:	d903      	bls.n	800a24c <pvPortMalloc+0xa4>
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1f1      	bne.n	800a230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a24c:	4b36      	ldr	r3, [pc, #216]	; (800a328 <pvPortMalloc+0x180>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a252:	429a      	cmp	r2, r3
 800a254:	d050      	beq.n	800a2f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2208      	movs	r2, #8
 800a25c:	4413      	add	r3, r2
 800a25e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	1ad2      	subs	r2, r2, r3
 800a270:	2308      	movs	r3, #8
 800a272:	005b      	lsls	r3, r3, #1
 800a274:	429a      	cmp	r2, r3
 800a276:	d91f      	bls.n	800a2b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4413      	add	r3, r2
 800a27e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	f003 0307 	and.w	r3, r3, #7
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00a      	beq.n	800a2a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a28e:	f383 8811 	msr	BASEPRI, r3
 800a292:	f3bf 8f6f 	isb	sy
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	613b      	str	r3, [r7, #16]
}
 800a29c:	bf00      	nop
 800a29e:	e7fe      	b.n	800a29e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	685a      	ldr	r2, [r3, #4]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	1ad2      	subs	r2, r2, r3
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a2b2:	69b8      	ldr	r0, [r7, #24]
 800a2b4:	f000 f908 	bl	800a4c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a2b8:	4b1d      	ldr	r3, [pc, #116]	; (800a330 <pvPortMalloc+0x188>)
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	4a1b      	ldr	r2, [pc, #108]	; (800a330 <pvPortMalloc+0x188>)
 800a2c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2c6:	4b1a      	ldr	r3, [pc, #104]	; (800a330 <pvPortMalloc+0x188>)
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <pvPortMalloc+0x190>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d203      	bcs.n	800a2da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2d2:	4b17      	ldr	r3, [pc, #92]	; (800a330 <pvPortMalloc+0x188>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a18      	ldr	r2, [pc, #96]	; (800a338 <pvPortMalloc+0x190>)
 800a2d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	685a      	ldr	r2, [r3, #4]
 800a2de:	4b13      	ldr	r3, [pc, #76]	; (800a32c <pvPortMalloc+0x184>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <pvPortMalloc+0x194>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	4a11      	ldr	r2, [pc, #68]	; (800a33c <pvPortMalloc+0x194>)
 800a2f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2f8:	f001 fb7c 	bl	800b9f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2fc:	69fb      	ldr	r3, [r7, #28]
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00a      	beq.n	800a31c <pvPortMalloc+0x174>
	__asm volatile
 800a306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a30a:	f383 8811 	msr	BASEPRI, r3
 800a30e:	f3bf 8f6f 	isb	sy
 800a312:	f3bf 8f4f 	dsb	sy
 800a316:	60fb      	str	r3, [r7, #12]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <pvPortMalloc+0x172>
	return pvReturn;
 800a31c:	69fb      	ldr	r3, [r7, #28]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3728      	adds	r7, #40	; 0x28
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	20004910 	.word	0x20004910
 800a32c:	20004924 	.word	0x20004924
 800a330:	20004914 	.word	0x20004914
 800a334:	20004908 	.word	0x20004908
 800a338:	20004918 	.word	0x20004918
 800a33c:	2000491c 	.word	0x2000491c

0800a340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d04d      	beq.n	800a3ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a352:	2308      	movs	r3, #8
 800a354:	425b      	negs	r3, r3
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	4413      	add	r3, r2
 800a35a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	685a      	ldr	r2, [r3, #4]
 800a364:	4b24      	ldr	r3, [pc, #144]	; (800a3f8 <vPortFree+0xb8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4013      	ands	r3, r2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d10a      	bne.n	800a384 <vPortFree+0x44>
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	60fb      	str	r3, [r7, #12]
}
 800a380:	bf00      	nop
 800a382:	e7fe      	b.n	800a382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00a      	beq.n	800a3a2 <vPortFree+0x62>
	__asm volatile
 800a38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a390:	f383 8811 	msr	BASEPRI, r3
 800a394:	f3bf 8f6f 	isb	sy
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	60bb      	str	r3, [r7, #8]
}
 800a39e:	bf00      	nop
 800a3a0:	e7fe      	b.n	800a3a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	685a      	ldr	r2, [r3, #4]
 800a3a6:	4b14      	ldr	r3, [pc, #80]	; (800a3f8 <vPortFree+0xb8>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4013      	ands	r3, r2
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d01e      	beq.n	800a3ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d11a      	bne.n	800a3ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	685a      	ldr	r2, [r3, #4]
 800a3bc:	4b0e      	ldr	r3, [pc, #56]	; (800a3f8 <vPortFree+0xb8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	43db      	mvns	r3, r3
 800a3c2:	401a      	ands	r2, r3
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a3c8:	f001 fb06 	bl	800b9d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	685a      	ldr	r2, [r3, #4]
 800a3d0:	4b0a      	ldr	r3, [pc, #40]	; (800a3fc <vPortFree+0xbc>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	4a09      	ldr	r2, [pc, #36]	; (800a3fc <vPortFree+0xbc>)
 800a3d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3da:	6938      	ldr	r0, [r7, #16]
 800a3dc:	f000 f874 	bl	800a4c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a3e0:	4b07      	ldr	r3, [pc, #28]	; (800a400 <vPortFree+0xc0>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	3301      	adds	r3, #1
 800a3e6:	4a06      	ldr	r2, [pc, #24]	; (800a400 <vPortFree+0xc0>)
 800a3e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a3ea:	f001 fb03 	bl	800b9f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3ee:	bf00      	nop
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20004924 	.word	0x20004924
 800a3fc:	20004914 	.word	0x20004914
 800a400:	20004920 	.word	0x20004920

0800a404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a404:	b480      	push	{r7}
 800a406:	b085      	sub	sp, #20
 800a408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a40a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a40e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a410:	4b27      	ldr	r3, [pc, #156]	; (800a4b0 <prvHeapInit+0xac>)
 800a412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f003 0307 	and.w	r3, r3, #7
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d00c      	beq.n	800a438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	3307      	adds	r3, #7
 800a422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	f023 0307 	bic.w	r3, r3, #7
 800a42a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1ad3      	subs	r3, r2, r3
 800a432:	4a1f      	ldr	r2, [pc, #124]	; (800a4b0 <prvHeapInit+0xac>)
 800a434:	4413      	add	r3, r2
 800a436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a43c:	4a1d      	ldr	r2, [pc, #116]	; (800a4b4 <prvHeapInit+0xb0>)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a442:	4b1c      	ldr	r3, [pc, #112]	; (800a4b4 <prvHeapInit+0xb0>)
 800a444:	2200      	movs	r2, #0
 800a446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68ba      	ldr	r2, [r7, #8]
 800a44c:	4413      	add	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a450:	2208      	movs	r2, #8
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	1a9b      	subs	r3, r3, r2
 800a456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f023 0307 	bic.w	r3, r3, #7
 800a45e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <prvHeapInit+0xb4>)
 800a464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a466:	4b14      	ldr	r3, [pc, #80]	; (800a4b8 <prvHeapInit+0xb4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2200      	movs	r2, #0
 800a46c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a46e:	4b12      	ldr	r3, [pc, #72]	; (800a4b8 <prvHeapInit+0xb4>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2200      	movs	r2, #0
 800a474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	1ad2      	subs	r2, r2, r3
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <prvHeapInit+0xb4>)
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	4a0a      	ldr	r2, [pc, #40]	; (800a4bc <prvHeapInit+0xb8>)
 800a492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4a09      	ldr	r2, [pc, #36]	; (800a4c0 <prvHeapInit+0xbc>)
 800a49a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a49c:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <prvHeapInit+0xc0>)
 800a49e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a4a2:	601a      	str	r2, [r3, #0]
}
 800a4a4:	bf00      	nop
 800a4a6:	3714      	adds	r7, #20
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr
 800a4b0:	20000d08 	.word	0x20000d08
 800a4b4:	20004908 	.word	0x20004908
 800a4b8:	20004910 	.word	0x20004910
 800a4bc:	20004918 	.word	0x20004918
 800a4c0:	20004914 	.word	0x20004914
 800a4c4:	20004924 	.word	0x20004924

0800a4c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a4d0:	4b28      	ldr	r3, [pc, #160]	; (800a574 <prvInsertBlockIntoFreeList+0xac>)
 800a4d2:	60fb      	str	r3, [r7, #12]
 800a4d4:	e002      	b.n	800a4dc <prvInsertBlockIntoFreeList+0x14>
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	687a      	ldr	r2, [r7, #4]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d8f7      	bhi.n	800a4d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	68ba      	ldr	r2, [r7, #8]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d108      	bne.n	800a50a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	685a      	ldr	r2, [r3, #4]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	441a      	add	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	68ba      	ldr	r2, [r7, #8]
 800a514:	441a      	add	r2, r3
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	429a      	cmp	r2, r3
 800a51c:	d118      	bne.n	800a550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	4b15      	ldr	r3, [pc, #84]	; (800a578 <prvInsertBlockIntoFreeList+0xb0>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d00d      	beq.n	800a546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685a      	ldr	r2, [r3, #4]
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	441a      	add	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	601a      	str	r2, [r3, #0]
 800a544:	e008      	b.n	800a558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a546:	4b0c      	ldr	r3, [pc, #48]	; (800a578 <prvInsertBlockIntoFreeList+0xb0>)
 800a548:	681a      	ldr	r2, [r3, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e003      	b.n	800a558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d002      	beq.n	800a566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a566:	bf00      	nop
 800a568:	3714      	adds	r7, #20
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	20004908 	.word	0x20004908
 800a578:	20004910 	.word	0x20004910

0800a57c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f103 0208 	add.w	r2, r3, #8
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f103 0208 	add.w	r2, r3, #8
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f103 0208 	add.w	r2, r3, #8
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5ca:	bf00      	nop
 800a5cc:	370c      	adds	r7, #12
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr

0800a5d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5d6:	b480      	push	{r7}
 800a5d8:	b085      	sub	sp, #20
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	6078      	str	r0, [r7, #4]
 800a5de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	685b      	ldr	r3, [r3, #4]
 800a5e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	689a      	ldr	r2, [r3, #8]
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	687a      	ldr	r2, [r7, #4]
 800a606:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	1c5a      	adds	r2, r3, #1
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	601a      	str	r2, [r3, #0]
}
 800a612:	bf00      	nop
 800a614:	3714      	adds	r7, #20
 800a616:	46bd      	mov	sp, r7
 800a618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61c:	4770      	bx	lr

0800a61e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a61e:	b480      	push	{r7}
 800a620:	b085      	sub	sp, #20
 800a622:	af00      	add	r7, sp, #0
 800a624:	6078      	str	r0, [r7, #4]
 800a626:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a634:	d103      	bne.n	800a63e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	60fb      	str	r3, [r7, #12]
 800a63c:	e00c      	b.n	800a658 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	3308      	adds	r3, #8
 800a642:	60fb      	str	r3, [r7, #12]
 800a644:	e002      	b.n	800a64c <vListInsert+0x2e>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	60fb      	str	r3, [r7, #12]
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685b      	ldr	r3, [r3, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	429a      	cmp	r2, r3
 800a656:	d2f6      	bcs.n	800a646 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	685a      	ldr	r2, [r3, #4]
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	683a      	ldr	r2, [r7, #0]
 800a666:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	68fa      	ldr	r2, [r7, #12]
 800a66c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	1c5a      	adds	r2, r3, #1
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	601a      	str	r2, [r3, #0]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	691b      	ldr	r3, [r3, #16]
 800a69c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	6892      	ldr	r2, [r2, #8]
 800a6a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	687a      	ldr	r2, [r7, #4]
 800a6ae:	6852      	ldr	r2, [r2, #4]
 800a6b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d103      	bne.n	800a6c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689a      	ldr	r2, [r3, #8]
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	1e5a      	subs	r2, r3, #1
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3714      	adds	r7, #20
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	3b04      	subs	r3, #4
 800a6f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	3b04      	subs	r3, #4
 800a702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f023 0201 	bic.w	r2, r3, #1
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3b04      	subs	r3, #4
 800a712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a714:	4a0c      	ldr	r2, [pc, #48]	; (800a748 <pxPortInitialiseStack+0x64>)
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	3b14      	subs	r3, #20
 800a71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a720:	687a      	ldr	r2, [r7, #4]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	3b04      	subs	r3, #4
 800a72a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f06f 0202 	mvn.w	r2, #2
 800a732:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	3b20      	subs	r3, #32
 800a738:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a73a:	68fb      	ldr	r3, [r7, #12]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3714      	adds	r7, #20
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr
 800a748:	0800a74d 	.word	0x0800a74d

0800a74c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a74c:	b480      	push	{r7}
 800a74e:	b085      	sub	sp, #20
 800a750:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a752:	2300      	movs	r3, #0
 800a754:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a756:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <prvTaskExitError+0x54>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75e:	d00a      	beq.n	800a776 <prvTaskExitError+0x2a>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	60fb      	str	r3, [r7, #12]
}
 800a772:	bf00      	nop
 800a774:	e7fe      	b.n	800a774 <prvTaskExitError+0x28>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	60bb      	str	r3, [r7, #8]
}
 800a788:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a78a:	bf00      	nop
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d0fc      	beq.n	800a78c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr
 800a7a0:	20000088 	.word	0x20000088
	...

0800a7b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a7b0:	4b07      	ldr	r3, [pc, #28]	; (800a7d0 <pxCurrentTCBConst2>)
 800a7b2:	6819      	ldr	r1, [r3, #0]
 800a7b4:	6808      	ldr	r0, [r1, #0]
 800a7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ba:	f380 8809 	msr	PSP, r0
 800a7be:	f3bf 8f6f 	isb	sy
 800a7c2:	f04f 0000 	mov.w	r0, #0
 800a7c6:	f380 8811 	msr	BASEPRI, r0
 800a7ca:	4770      	bx	lr
 800a7cc:	f3af 8000 	nop.w

0800a7d0 <pxCurrentTCBConst2>:
 800a7d0:	20004970 	.word	0x20004970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a7d4:	bf00      	nop
 800a7d6:	bf00      	nop

0800a7d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a7d8:	4808      	ldr	r0, [pc, #32]	; (800a7fc <prvPortStartFirstTask+0x24>)
 800a7da:	6800      	ldr	r0, [r0, #0]
 800a7dc:	6800      	ldr	r0, [r0, #0]
 800a7de:	f380 8808 	msr	MSP, r0
 800a7e2:	f04f 0000 	mov.w	r0, #0
 800a7e6:	f380 8814 	msr	CONTROL, r0
 800a7ea:	b662      	cpsie	i
 800a7ec:	b661      	cpsie	f
 800a7ee:	f3bf 8f4f 	dsb	sy
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	df00      	svc	0
 800a7f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7fa:	bf00      	nop
 800a7fc:	e000ed08 	.word	0xe000ed08

0800a800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b086      	sub	sp, #24
 800a804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a806:	4b46      	ldr	r3, [pc, #280]	; (800a920 <xPortStartScheduler+0x120>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a46      	ldr	r2, [pc, #280]	; (800a924 <xPortStartScheduler+0x124>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d10a      	bne.n	800a826 <xPortStartScheduler+0x26>
	__asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	613b      	str	r3, [r7, #16]
}
 800a822:	bf00      	nop
 800a824:	e7fe      	b.n	800a824 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a826:	4b3e      	ldr	r3, [pc, #248]	; (800a920 <xPortStartScheduler+0x120>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a3f      	ldr	r2, [pc, #252]	; (800a928 <xPortStartScheduler+0x128>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d10a      	bne.n	800a846 <xPortStartScheduler+0x46>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	60fb      	str	r3, [r7, #12]
}
 800a842:	bf00      	nop
 800a844:	e7fe      	b.n	800a844 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a846:	4b39      	ldr	r3, [pc, #228]	; (800a92c <xPortStartScheduler+0x12c>)
 800a848:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	22ff      	movs	r2, #255	; 0xff
 800a856:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	b2db      	uxtb	r3, r3
 800a85e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	b2db      	uxtb	r3, r3
 800a864:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a868:	b2da      	uxtb	r2, r3
 800a86a:	4b31      	ldr	r3, [pc, #196]	; (800a930 <xPortStartScheduler+0x130>)
 800a86c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a86e:	4b31      	ldr	r3, [pc, #196]	; (800a934 <xPortStartScheduler+0x134>)
 800a870:	2207      	movs	r2, #7
 800a872:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a874:	e009      	b.n	800a88a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a876:	4b2f      	ldr	r3, [pc, #188]	; (800a934 <xPortStartScheduler+0x134>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3b01      	subs	r3, #1
 800a87c:	4a2d      	ldr	r2, [pc, #180]	; (800a934 <xPortStartScheduler+0x134>)
 800a87e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a880:	78fb      	ldrb	r3, [r7, #3]
 800a882:	b2db      	uxtb	r3, r3
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	b2db      	uxtb	r3, r3
 800a888:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a88a:	78fb      	ldrb	r3, [r7, #3]
 800a88c:	b2db      	uxtb	r3, r3
 800a88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a892:	2b80      	cmp	r3, #128	; 0x80
 800a894:	d0ef      	beq.n	800a876 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a896:	4b27      	ldr	r3, [pc, #156]	; (800a934 <xPortStartScheduler+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f1c3 0307 	rsb	r3, r3, #7
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d00a      	beq.n	800a8b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800a8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a6:	f383 8811 	msr	BASEPRI, r3
 800a8aa:	f3bf 8f6f 	isb	sy
 800a8ae:	f3bf 8f4f 	dsb	sy
 800a8b2:	60bb      	str	r3, [r7, #8]
}
 800a8b4:	bf00      	nop
 800a8b6:	e7fe      	b.n	800a8b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a8b8:	4b1e      	ldr	r3, [pc, #120]	; (800a934 <xPortStartScheduler+0x134>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	021b      	lsls	r3, r3, #8
 800a8be:	4a1d      	ldr	r2, [pc, #116]	; (800a934 <xPortStartScheduler+0x134>)
 800a8c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a8c2:	4b1c      	ldr	r3, [pc, #112]	; (800a934 <xPortStartScheduler+0x134>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8ca:	4a1a      	ldr	r2, [pc, #104]	; (800a934 <xPortStartScheduler+0x134>)
 800a8cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	b2da      	uxtb	r2, r3
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a8d6:	4b18      	ldr	r3, [pc, #96]	; (800a938 <xPortStartScheduler+0x138>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4a17      	ldr	r2, [pc, #92]	; (800a938 <xPortStartScheduler+0x138>)
 800a8dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8e2:	4b15      	ldr	r3, [pc, #84]	; (800a938 <xPortStartScheduler+0x138>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a14      	ldr	r2, [pc, #80]	; (800a938 <xPortStartScheduler+0x138>)
 800a8e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8ee:	f000 f8dd 	bl	800aaac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8f2:	4b12      	ldr	r3, [pc, #72]	; (800a93c <xPortStartScheduler+0x13c>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8f8:	f000 f8fc 	bl	800aaf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8fc:	4b10      	ldr	r3, [pc, #64]	; (800a940 <xPortStartScheduler+0x140>)
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a0f      	ldr	r2, [pc, #60]	; (800a940 <xPortStartScheduler+0x140>)
 800a902:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a906:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a908:	f7ff ff66 	bl	800a7d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a90c:	f001 f9da 	bl	800bcc4 <vTaskSwitchContext>
	prvTaskExitError();
 800a910:	f7ff ff1c 	bl	800a74c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a914:	2300      	movs	r3, #0
}
 800a916:	4618      	mov	r0, r3
 800a918:	3718      	adds	r7, #24
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	e000ed00 	.word	0xe000ed00
 800a924:	410fc271 	.word	0x410fc271
 800a928:	410fc270 	.word	0x410fc270
 800a92c:	e000e400 	.word	0xe000e400
 800a930:	20004928 	.word	0x20004928
 800a934:	2000492c 	.word	0x2000492c
 800a938:	e000ed20 	.word	0xe000ed20
 800a93c:	20000088 	.word	0x20000088
 800a940:	e000ef34 	.word	0xe000ef34

0800a944 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
	__asm volatile
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	607b      	str	r3, [r7, #4]
}
 800a95c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a95e:	4b0f      	ldr	r3, [pc, #60]	; (800a99c <vPortEnterCritical+0x58>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	3301      	adds	r3, #1
 800a964:	4a0d      	ldr	r2, [pc, #52]	; (800a99c <vPortEnterCritical+0x58>)
 800a966:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <vPortEnterCritical+0x58>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d10f      	bne.n	800a990 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a970:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <vPortEnterCritical+0x5c>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <vPortEnterCritical+0x4c>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	603b      	str	r3, [r7, #0]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <vPortEnterCritical+0x4a>
	}
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	20000088 	.word	0x20000088
 800a9a0:	e000ed04 	.word	0xe000ed04

0800a9a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a9aa:	4b12      	ldr	r3, [pc, #72]	; (800a9f4 <vPortExitCritical+0x50>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <vPortExitCritical+0x24>
	__asm volatile
 800a9b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b6:	f383 8811 	msr	BASEPRI, r3
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	f3bf 8f4f 	dsb	sy
 800a9c2:	607b      	str	r3, [r7, #4]
}
 800a9c4:	bf00      	nop
 800a9c6:	e7fe      	b.n	800a9c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a9c8:	4b0a      	ldr	r3, [pc, #40]	; (800a9f4 <vPortExitCritical+0x50>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	4a09      	ldr	r2, [pc, #36]	; (800a9f4 <vPortExitCritical+0x50>)
 800a9d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a9d2:	4b08      	ldr	r3, [pc, #32]	; (800a9f4 <vPortExitCritical+0x50>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d105      	bne.n	800a9e6 <vPortExitCritical+0x42>
 800a9da:	2300      	movs	r3, #0
 800a9dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a9e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9e6:	bf00      	nop
 800a9e8:	370c      	adds	r7, #12
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f0:	4770      	bx	lr
 800a9f2:	bf00      	nop
 800a9f4:	20000088 	.word	0x20000088
	...

0800aa00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aa00:	f3ef 8009 	mrs	r0, PSP
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	4b15      	ldr	r3, [pc, #84]	; (800aa60 <pxCurrentTCBConst>)
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	f01e 0f10 	tst.w	lr, #16
 800aa10:	bf08      	it	eq
 800aa12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aa16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	6010      	str	r0, [r2, #0]
 800aa1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aa20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aa24:	f380 8811 	msr	BASEPRI, r0
 800aa28:	f3bf 8f4f 	dsb	sy
 800aa2c:	f3bf 8f6f 	isb	sy
 800aa30:	f001 f948 	bl	800bcc4 <vTaskSwitchContext>
 800aa34:	f04f 0000 	mov.w	r0, #0
 800aa38:	f380 8811 	msr	BASEPRI, r0
 800aa3c:	bc09      	pop	{r0, r3}
 800aa3e:	6819      	ldr	r1, [r3, #0]
 800aa40:	6808      	ldr	r0, [r1, #0]
 800aa42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa46:	f01e 0f10 	tst.w	lr, #16
 800aa4a:	bf08      	it	eq
 800aa4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa50:	f380 8809 	msr	PSP, r0
 800aa54:	f3bf 8f6f 	isb	sy
 800aa58:	4770      	bx	lr
 800aa5a:	bf00      	nop
 800aa5c:	f3af 8000 	nop.w

0800aa60 <pxCurrentTCBConst>:
 800aa60:	20004970 	.word	0x20004970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop

0800aa68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	607b      	str	r3, [r7, #4]
}
 800aa80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa82:	f001 f865 	bl	800bb50 <xTaskIncrementTick>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d003      	beq.n	800aa94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <xPortSysTickHandler+0x40>)
 800aa8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa92:	601a      	str	r2, [r3, #0]
 800aa94:	2300      	movs	r3, #0
 800aa96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	f383 8811 	msr	BASEPRI, r3
}
 800aa9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aaa0:	bf00      	nop
 800aaa2:	3708      	adds	r7, #8
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}
 800aaa8:	e000ed04 	.word	0xe000ed04

0800aaac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aaac:	b480      	push	{r7}
 800aaae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aab0:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <vPortSetupTimerInterrupt+0x34>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aab6:	4b0b      	ldr	r3, [pc, #44]	; (800aae4 <vPortSetupTimerInterrupt+0x38>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aabc:	4b0a      	ldr	r3, [pc, #40]	; (800aae8 <vPortSetupTimerInterrupt+0x3c>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0a      	ldr	r2, [pc, #40]	; (800aaec <vPortSetupTimerInterrupt+0x40>)
 800aac2:	fba2 2303 	umull	r2, r3, r2, r3
 800aac6:	099b      	lsrs	r3, r3, #6
 800aac8:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <vPortSetupTimerInterrupt+0x44>)
 800aaca:	3b01      	subs	r3, #1
 800aacc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aace:	4b04      	ldr	r3, [pc, #16]	; (800aae0 <vPortSetupTimerInterrupt+0x34>)
 800aad0:	2207      	movs	r2, #7
 800aad2:	601a      	str	r2, [r3, #0]
}
 800aad4:	bf00      	nop
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	e000e010 	.word	0xe000e010
 800aae4:	e000e018 	.word	0xe000e018
 800aae8:	20000000 	.word	0x20000000
 800aaec:	10624dd3 	.word	0x10624dd3
 800aaf0:	e000e014 	.word	0xe000e014

0800aaf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aaf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ab04 <vPortEnableVFP+0x10>
 800aaf8:	6801      	ldr	r1, [r0, #0]
 800aafa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aafe:	6001      	str	r1, [r0, #0]
 800ab00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ab02:	bf00      	nop
 800ab04:	e000ed88 	.word	0xe000ed88

0800ab08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab08:	b480      	push	{r7}
 800ab0a:	b085      	sub	sp, #20
 800ab0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ab0e:	f3ef 8305 	mrs	r3, IPSR
 800ab12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2b0f      	cmp	r3, #15
 800ab18:	d914      	bls.n	800ab44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ab1a:	4a17      	ldr	r2, [pc, #92]	; (800ab78 <vPortValidateInterruptPriority+0x70>)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ab24:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <vPortValidateInterruptPriority+0x74>)
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	7afa      	ldrb	r2, [r7, #11]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	d20a      	bcs.n	800ab44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	607b      	str	r3, [r7, #4]
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab44:	4b0e      	ldr	r3, [pc, #56]	; (800ab80 <vPortValidateInterruptPriority+0x78>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab4c:	4b0d      	ldr	r3, [pc, #52]	; (800ab84 <vPortValidateInterruptPriority+0x7c>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d90a      	bls.n	800ab6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	603b      	str	r3, [r7, #0]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <vPortValidateInterruptPriority+0x60>
	}
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	e000e3f0 	.word	0xe000e3f0
 800ab7c:	20004928 	.word	0x20004928
 800ab80:	e000ed0c 	.word	0xe000ed0c
 800ab84:	2000492c 	.word	0x2000492c

0800ab88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10a      	bne.n	800abb2 <xQueueGenericReset+0x2a>
	__asm volatile
 800ab9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba0:	f383 8811 	msr	BASEPRI, r3
 800aba4:	f3bf 8f6f 	isb	sy
 800aba8:	f3bf 8f4f 	dsb	sy
 800abac:	60bb      	str	r3, [r7, #8]
}
 800abae:	bf00      	nop
 800abb0:	e7fe      	b.n	800abb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abb2:	f7ff fec7 	bl	800a944 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbe:	68f9      	ldr	r1, [r7, #12]
 800abc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abc2:	fb01 f303 	mul.w	r3, r1, r3
 800abc6:	441a      	add	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2200      	movs	r2, #0
 800abd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe2:	3b01      	subs	r3, #1
 800abe4:	68f9      	ldr	r1, [r7, #12]
 800abe6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abe8:	fb01 f303 	mul.w	r3, r1, r3
 800abec:	441a      	add	r2, r3
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	22ff      	movs	r2, #255	; 0xff
 800abf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	22ff      	movs	r2, #255	; 0xff
 800abfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac02:	683b      	ldr	r3, [r7, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d114      	bne.n	800ac32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d01a      	beq.n	800ac46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3310      	adds	r3, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	f001 f903 	bl	800be20 <xTaskRemoveFromEventList>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d012      	beq.n	800ac46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac20:	4b0c      	ldr	r3, [pc, #48]	; (800ac54 <xQueueGenericReset+0xcc>)
 800ac22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac26:	601a      	str	r2, [r3, #0]
 800ac28:	f3bf 8f4f 	dsb	sy
 800ac2c:	f3bf 8f6f 	isb	sy
 800ac30:	e009      	b.n	800ac46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	3310      	adds	r3, #16
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff fca0 	bl	800a57c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3324      	adds	r3, #36	; 0x24
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fc9b 	bl	800a57c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac46:	f7ff fead 	bl	800a9a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac4a:	2301      	movs	r3, #1
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	e000ed04 	.word	0xe000ed04

0800ac58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b08e      	sub	sp, #56	; 0x38
 800ac5c:	af02      	add	r7, sp, #8
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
 800ac64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10a      	bne.n	800ac82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac7e:	bf00      	nop
 800ac80:	e7fe      	b.n	800ac80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10a      	bne.n	800ac9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	f383 8811 	msr	BASEPRI, r3
 800ac90:	f3bf 8f6f 	isb	sy
 800ac94:	f3bf 8f4f 	dsb	sy
 800ac98:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ac9a:	bf00      	nop
 800ac9c:	e7fe      	b.n	800ac9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d002      	beq.n	800acaa <xQueueGenericCreateStatic+0x52>
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <xQueueGenericCreateStatic+0x56>
 800acaa:	2301      	movs	r3, #1
 800acac:	e000      	b.n	800acb0 <xQueueGenericCreateStatic+0x58>
 800acae:	2300      	movs	r3, #0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d10a      	bne.n	800acca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acb8:	f383 8811 	msr	BASEPRI, r3
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	f3bf 8f4f 	dsb	sy
 800acc4:	623b      	str	r3, [r7, #32]
}
 800acc6:	bf00      	nop
 800acc8:	e7fe      	b.n	800acc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <xQueueGenericCreateStatic+0x7e>
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <xQueueGenericCreateStatic+0x82>
 800acd6:	2301      	movs	r3, #1
 800acd8:	e000      	b.n	800acdc <xQueueGenericCreateStatic+0x84>
 800acda:	2300      	movs	r3, #0
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10a      	bne.n	800acf6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	61fb      	str	r3, [r7, #28]
}
 800acf2:	bf00      	nop
 800acf4:	e7fe      	b.n	800acf4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800acf6:	2350      	movs	r3, #80	; 0x50
 800acf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	2b50      	cmp	r3, #80	; 0x50
 800acfe:	d00a      	beq.n	800ad16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	61bb      	str	r3, [r7, #24]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d00d      	beq.n	800ad3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad24:	2201      	movs	r2, #1
 800ad26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	4613      	mov	r3, r2
 800ad34:	687a      	ldr	r2, [r7, #4]
 800ad36:	68b9      	ldr	r1, [r7, #8]
 800ad38:	68f8      	ldr	r0, [r7, #12]
 800ad3a:	f000 f805 	bl	800ad48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad40:	4618      	mov	r0, r3
 800ad42:	3730      	adds	r7, #48	; 0x30
 800ad44:	46bd      	mov	sp, r7
 800ad46:	bd80      	pop	{r7, pc}

0800ad48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	60f8      	str	r0, [r7, #12]
 800ad50:	60b9      	str	r1, [r7, #8]
 800ad52:	607a      	str	r2, [r7, #4]
 800ad54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d103      	bne.n	800ad64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	601a      	str	r2, [r3, #0]
 800ad62:	e002      	b.n	800ad6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ad6a:	69bb      	ldr	r3, [r7, #24]
 800ad6c:	68fa      	ldr	r2, [r7, #12]
 800ad6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	68ba      	ldr	r2, [r7, #8]
 800ad74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ad76:	2101      	movs	r1, #1
 800ad78:	69b8      	ldr	r0, [r7, #24]
 800ad7a:	f7ff ff05 	bl	800ab88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	78fa      	ldrb	r2, [r7, #3]
 800ad82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ad86:	bf00      	nop
 800ad88:	3710      	adds	r7, #16
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b08e      	sub	sp, #56	; 0x38
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
 800ad9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ada6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <xQueueGenericSend+0x32>
	__asm volatile
 800adac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb0:	f383 8811 	msr	BASEPRI, r3
 800adb4:	f3bf 8f6f 	isb	sy
 800adb8:	f3bf 8f4f 	dsb	sy
 800adbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800adbe:	bf00      	nop
 800adc0:	e7fe      	b.n	800adc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d103      	bne.n	800add0 <xQueueGenericSend+0x40>
 800adc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d101      	bne.n	800add4 <xQueueGenericSend+0x44>
 800add0:	2301      	movs	r3, #1
 800add2:	e000      	b.n	800add6 <xQueueGenericSend+0x46>
 800add4:	2300      	movs	r3, #0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <xQueueGenericSend+0x60>
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adec:	bf00      	nop
 800adee:	e7fe      	b.n	800adee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b02      	cmp	r3, #2
 800adf4:	d103      	bne.n	800adfe <xQueueGenericSend+0x6e>
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adfa:	2b01      	cmp	r3, #1
 800adfc:	d101      	bne.n	800ae02 <xQueueGenericSend+0x72>
 800adfe:	2301      	movs	r3, #1
 800ae00:	e000      	b.n	800ae04 <xQueueGenericSend+0x74>
 800ae02:	2300      	movs	r3, #0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10a      	bne.n	800ae1e <xQueueGenericSend+0x8e>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	623b      	str	r3, [r7, #32]
}
 800ae1a:	bf00      	nop
 800ae1c:	e7fe      	b.n	800ae1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ae1e:	f001 f9bd 	bl	800c19c <xTaskGetSchedulerState>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d102      	bne.n	800ae2e <xQueueGenericSend+0x9e>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <xQueueGenericSend+0xa2>
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e000      	b.n	800ae34 <xQueueGenericSend+0xa4>
 800ae32:	2300      	movs	r3, #0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10a      	bne.n	800ae4e <xQueueGenericSend+0xbe>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3c:	f383 8811 	msr	BASEPRI, r3
 800ae40:	f3bf 8f6f 	isb	sy
 800ae44:	f3bf 8f4f 	dsb	sy
 800ae48:	61fb      	str	r3, [r7, #28]
}
 800ae4a:	bf00      	nop
 800ae4c:	e7fe      	b.n	800ae4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae4e:	f7ff fd79 	bl	800a944 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5a:	429a      	cmp	r2, r3
 800ae5c:	d302      	bcc.n	800ae64 <xQueueGenericSend+0xd4>
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b02      	cmp	r3, #2
 800ae62:	d129      	bne.n	800aeb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae64:	683a      	ldr	r2, [r7, #0]
 800ae66:	68b9      	ldr	r1, [r7, #8]
 800ae68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae6a:	f000 fa0b 	bl	800b284 <prvCopyDataToQueue>
 800ae6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d010      	beq.n	800ae9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7a:	3324      	adds	r3, #36	; 0x24
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 ffcf 	bl	800be20 <xTaskRemoveFromEventList>
 800ae82:	4603      	mov	r3, r0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d013      	beq.n	800aeb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae88:	4b3f      	ldr	r3, [pc, #252]	; (800af88 <xQueueGenericSend+0x1f8>)
 800ae8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae8e:	601a      	str	r2, [r3, #0]
 800ae90:	f3bf 8f4f 	dsb	sy
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	e00a      	b.n	800aeb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d007      	beq.n	800aeb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aea0:	4b39      	ldr	r3, [pc, #228]	; (800af88 <xQueueGenericSend+0x1f8>)
 800aea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea6:	601a      	str	r2, [r3, #0]
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aeb0:	f7ff fd78 	bl	800a9a4 <vPortExitCritical>
				return pdPASS;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e063      	b.n	800af80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d103      	bne.n	800aec6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aebe:	f7ff fd71 	bl	800a9a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aec2:	2300      	movs	r3, #0
 800aec4:	e05c      	b.n	800af80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d106      	bne.n	800aeda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aecc:	f107 0314 	add.w	r3, r7, #20
 800aed0:	4618      	mov	r0, r3
 800aed2:	f001 f809 	bl	800bee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aed6:	2301      	movs	r3, #1
 800aed8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aeda:	f7ff fd63 	bl	800a9a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aede:	f000 fd7b 	bl	800b9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aee2:	f7ff fd2f 	bl	800a944 <vPortEnterCritical>
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aeec:	b25b      	sxtb	r3, r3
 800aeee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef2:	d103      	bne.n	800aefc <xQueueGenericSend+0x16c>
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	2200      	movs	r2, #0
 800aef8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af02:	b25b      	sxtb	r3, r3
 800af04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af08:	d103      	bne.n	800af12 <xQueueGenericSend+0x182>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	2200      	movs	r2, #0
 800af0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af12:	f7ff fd47 	bl	800a9a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800af16:	1d3a      	adds	r2, r7, #4
 800af18:	f107 0314 	add.w	r3, r7, #20
 800af1c:	4611      	mov	r1, r2
 800af1e:	4618      	mov	r0, r3
 800af20:	f000 fff8 	bl	800bf14 <xTaskCheckForTimeOut>
 800af24:	4603      	mov	r3, r0
 800af26:	2b00      	cmp	r3, #0
 800af28:	d124      	bne.n	800af74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800af2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2c:	f000 faa2 	bl	800b474 <prvIsQueueFull>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d018      	beq.n	800af68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	3310      	adds	r3, #16
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	4611      	mov	r1, r2
 800af3e:	4618      	mov	r0, r3
 800af40:	f000 ff1e 	bl	800bd80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800af44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af46:	f000 fa2d 	bl	800b3a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af4a:	f000 fd53 	bl	800b9f4 <xTaskResumeAll>
 800af4e:	4603      	mov	r3, r0
 800af50:	2b00      	cmp	r3, #0
 800af52:	f47f af7c 	bne.w	800ae4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800af56:	4b0c      	ldr	r3, [pc, #48]	; (800af88 <xQueueGenericSend+0x1f8>)
 800af58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	e772      	b.n	800ae4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af6a:	f000 fa1b 	bl	800b3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af6e:	f000 fd41 	bl	800b9f4 <xTaskResumeAll>
 800af72:	e76c      	b.n	800ae4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af76:	f000 fa15 	bl	800b3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af7a:	f000 fd3b 	bl	800b9f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af80:	4618      	mov	r0, r3
 800af82:	3738      	adds	r7, #56	; 0x38
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}
 800af88:	e000ed04 	.word	0xe000ed04

0800af8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b090      	sub	sp, #64	; 0x40
 800af90:	af00      	add	r7, sp, #0
 800af92:	60f8      	str	r0, [r7, #12]
 800af94:	60b9      	str	r1, [r7, #8]
 800af96:	607a      	str	r2, [r7, #4]
 800af98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800af9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d10a      	bne.n	800afba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	f383 8811 	msr	BASEPRI, r3
 800afac:	f3bf 8f6f 	isb	sy
 800afb0:	f3bf 8f4f 	dsb	sy
 800afb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800afb6:	bf00      	nop
 800afb8:	e7fe      	b.n	800afb8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d103      	bne.n	800afc8 <xQueueGenericSendFromISR+0x3c>
 800afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <xQueueGenericSendFromISR+0x40>
 800afc8:	2301      	movs	r3, #1
 800afca:	e000      	b.n	800afce <xQueueGenericSendFromISR+0x42>
 800afcc:	2300      	movs	r3, #0
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10a      	bne.n	800afe8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800afd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd6:	f383 8811 	msr	BASEPRI, r3
 800afda:	f3bf 8f6f 	isb	sy
 800afde:	f3bf 8f4f 	dsb	sy
 800afe2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800afe4:	bf00      	nop
 800afe6:	e7fe      	b.n	800afe6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2b02      	cmp	r3, #2
 800afec:	d103      	bne.n	800aff6 <xQueueGenericSendFromISR+0x6a>
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d101      	bne.n	800affa <xQueueGenericSendFromISR+0x6e>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <xQueueGenericSendFromISR+0x70>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d10a      	bne.n	800b016 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b004:	f383 8811 	msr	BASEPRI, r3
 800b008:	f3bf 8f6f 	isb	sy
 800b00c:	f3bf 8f4f 	dsb	sy
 800b010:	623b      	str	r3, [r7, #32]
}
 800b012:	bf00      	nop
 800b014:	e7fe      	b.n	800b014 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b016:	f7ff fd77 	bl	800ab08 <vPortValidateInterruptPriority>
	__asm volatile
 800b01a:	f3ef 8211 	mrs	r2, BASEPRI
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	61fa      	str	r2, [r7, #28]
 800b030:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800b032:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b034:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b03e:	429a      	cmp	r2, r3
 800b040:	d302      	bcc.n	800b048 <xQueueGenericSendFromISR+0xbc>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	2b02      	cmp	r3, #2
 800b046:	d12f      	bne.n	800b0a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b04e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b058:	683a      	ldr	r2, [r7, #0]
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b05e:	f000 f911 	bl	800b284 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b062:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b06a:	d112      	bne.n	800b092 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	2b00      	cmp	r3, #0
 800b072:	d016      	beq.n	800b0a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	3324      	adds	r3, #36	; 0x24
 800b078:	4618      	mov	r0, r3
 800b07a:	f000 fed1 	bl	800be20 <xTaskRemoveFromEventList>
 800b07e:	4603      	mov	r3, r0
 800b080:	2b00      	cmp	r3, #0
 800b082:	d00e      	beq.n	800b0a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00b      	beq.n	800b0a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2201      	movs	r2, #1
 800b08e:	601a      	str	r2, [r3, #0]
 800b090:	e007      	b.n	800b0a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b096:	3301      	adds	r3, #1
 800b098:	b2db      	uxtb	r3, r3
 800b09a:	b25a      	sxtb	r2, r3
 800b09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b0a6:	e001      	b.n	800b0ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 800b0b0:	697b      	ldr	r3, [r7, #20]
 800b0b2:	f383 8811 	msr	BASEPRI, r3
}
 800b0b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	3740      	adds	r7, #64	; 0x40
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	bd80      	pop	{r7, pc}
	...

0800b0c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b08c      	sub	sp, #48	; 0x30
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	60f8      	str	r0, [r7, #12]
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10a      	bne.n	800b0f4 <xQueueReceive+0x30>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	623b      	str	r3, [r7, #32]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d103      	bne.n	800b102 <xQueueReceive+0x3e>
 800b0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d101      	bne.n	800b106 <xQueueReceive+0x42>
 800b102:	2301      	movs	r3, #1
 800b104:	e000      	b.n	800b108 <xQueueReceive+0x44>
 800b106:	2300      	movs	r3, #0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10a      	bne.n	800b122 <xQueueReceive+0x5e>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	f383 8811 	msr	BASEPRI, r3
 800b114:	f3bf 8f6f 	isb	sy
 800b118:	f3bf 8f4f 	dsb	sy
 800b11c:	61fb      	str	r3, [r7, #28]
}
 800b11e:	bf00      	nop
 800b120:	e7fe      	b.n	800b120 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b122:	f001 f83b 	bl	800c19c <xTaskGetSchedulerState>
 800b126:	4603      	mov	r3, r0
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <xQueueReceive+0x6e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d101      	bne.n	800b136 <xQueueReceive+0x72>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <xQueueReceive+0x74>
 800b136:	2300      	movs	r3, #0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d10a      	bne.n	800b152 <xQueueReceive+0x8e>
	__asm volatile
 800b13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b140:	f383 8811 	msr	BASEPRI, r3
 800b144:	f3bf 8f6f 	isb	sy
 800b148:	f3bf 8f4f 	dsb	sy
 800b14c:	61bb      	str	r3, [r7, #24]
}
 800b14e:	bf00      	nop
 800b150:	e7fe      	b.n	800b150 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b152:	f7ff fbf7 	bl	800a944 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d01f      	beq.n	800b1a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b162:	68b9      	ldr	r1, [r7, #8]
 800b164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b166:	f000 f8f7 	bl	800b358 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16c:	1e5a      	subs	r2, r3, #1
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00f      	beq.n	800b19a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17c:	3310      	adds	r3, #16
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fe4e 	bl	800be20 <xTaskRemoveFromEventList>
 800b184:	4603      	mov	r3, r0
 800b186:	2b00      	cmp	r3, #0
 800b188:	d007      	beq.n	800b19a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b18a:	4b3d      	ldr	r3, [pc, #244]	; (800b280 <xQueueReceive+0x1bc>)
 800b18c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b190:	601a      	str	r2, [r3, #0]
 800b192:	f3bf 8f4f 	dsb	sy
 800b196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b19a:	f7ff fc03 	bl	800a9a4 <vPortExitCritical>
				return pdPASS;
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e069      	b.n	800b276 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d103      	bne.n	800b1b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1a8:	f7ff fbfc 	bl	800a9a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e062      	b.n	800b276 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1b6:	f107 0310 	add.w	r3, r7, #16
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f000 fe94 	bl	800bee8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1c4:	f7ff fbee 	bl	800a9a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b1c8:	f000 fc06 	bl	800b9d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b1cc:	f7ff fbba 	bl	800a944 <vPortEnterCritical>
 800b1d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1dc:	d103      	bne.n	800b1e6 <xQueueReceive+0x122>
 800b1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b1ec:	b25b      	sxtb	r3, r3
 800b1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1f2:	d103      	bne.n	800b1fc <xQueueReceive+0x138>
 800b1f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b1fc:	f7ff fbd2 	bl	800a9a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b200:	1d3a      	adds	r2, r7, #4
 800b202:	f107 0310 	add.w	r3, r7, #16
 800b206:	4611      	mov	r1, r2
 800b208:	4618      	mov	r0, r3
 800b20a:	f000 fe83 	bl	800bf14 <xTaskCheckForTimeOut>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d123      	bne.n	800b25c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b216:	f000 f917 	bl	800b448 <prvIsQueueEmpty>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d017      	beq.n	800b250 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b222:	3324      	adds	r3, #36	; 0x24
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	4611      	mov	r1, r2
 800b228:	4618      	mov	r0, r3
 800b22a:	f000 fda9 	bl	800bd80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b22e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b230:	f000 f8b8 	bl	800b3a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b234:	f000 fbde 	bl	800b9f4 <xTaskResumeAll>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d189      	bne.n	800b152 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b23e:	4b10      	ldr	r3, [pc, #64]	; (800b280 <xQueueReceive+0x1bc>)
 800b240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	f3bf 8f4f 	dsb	sy
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	e780      	b.n	800b152 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b252:	f000 f8a7 	bl	800b3a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b256:	f000 fbcd 	bl	800b9f4 <xTaskResumeAll>
 800b25a:	e77a      	b.n	800b152 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b25c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b25e:	f000 f8a1 	bl	800b3a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b262:	f000 fbc7 	bl	800b9f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b268:	f000 f8ee 	bl	800b448 <prvIsQueueEmpty>
 800b26c:	4603      	mov	r3, r0
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f43f af6f 	beq.w	800b152 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b274:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b276:	4618      	mov	r0, r3
 800b278:	3730      	adds	r7, #48	; 0x30
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}
 800b27e:	bf00      	nop
 800b280:	e000ed04 	.word	0xe000ed04

0800b284 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b290:	2300      	movs	r3, #0
 800b292:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b298:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d10d      	bne.n	800b2be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d14d      	bne.n	800b346 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 ff92 	bl	800c1d8 <xTaskPriorityDisinherit>
 800b2b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	609a      	str	r2, [r3, #8]
 800b2bc:	e043      	b.n	800b346 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d119      	bne.n	800b2f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6858      	ldr	r0, [r3, #4]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	68b9      	ldr	r1, [r7, #8]
 800b2d0:	f004 f8a0 	bl	800f414 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2dc:	441a      	add	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	685a      	ldr	r2, [r3, #4]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d32b      	bcc.n	800b346 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681a      	ldr	r2, [r3, #0]
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	605a      	str	r2, [r3, #4]
 800b2f6:	e026      	b.n	800b346 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	68d8      	ldr	r0, [r3, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b300:	461a      	mov	r2, r3
 800b302:	68b9      	ldr	r1, [r7, #8]
 800b304:	f004 f886 	bl	800f414 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	68da      	ldr	r2, [r3, #12]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b310:	425b      	negs	r3, r3
 800b312:	441a      	add	r2, r3
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68da      	ldr	r2, [r3, #12]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	429a      	cmp	r2, r3
 800b322:	d207      	bcs.n	800b334 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	689a      	ldr	r2, [r3, #8]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b32c:	425b      	negs	r3, r3
 800b32e:	441a      	add	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d105      	bne.n	800b346 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d002      	beq.n	800b346 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	3b01      	subs	r3, #1
 800b344:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	1c5a      	adds	r2, r3, #1
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b34e:	697b      	ldr	r3, [r7, #20]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3718      	adds	r7, #24
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b366:	2b00      	cmp	r3, #0
 800b368:	d018      	beq.n	800b39c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	68da      	ldr	r2, [r3, #12]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	441a      	add	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	68da      	ldr	r2, [r3, #12]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	429a      	cmp	r2, r3
 800b382:	d303      	bcc.n	800b38c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	68d9      	ldr	r1, [r3, #12]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	461a      	mov	r2, r3
 800b396:	6838      	ldr	r0, [r7, #0]
 800b398:	f004 f83c 	bl	800f414 <memcpy>
	}
}
 800b39c:	bf00      	nop
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b084      	sub	sp, #16
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b3ac:	f7ff faca 	bl	800a944 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b3b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3b8:	e011      	b.n	800b3de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d012      	beq.n	800b3e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	3324      	adds	r3, #36	; 0x24
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f000 fd2a 	bl	800be20 <xTaskRemoveFromEventList>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b3d2:	f000 fe01 	bl	800bfd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b3d6:	7bfb      	ldrb	r3, [r7, #15]
 800b3d8:	3b01      	subs	r3, #1
 800b3da:	b2db      	uxtb	r3, r3
 800b3dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	dce9      	bgt.n	800b3ba <prvUnlockQueue+0x16>
 800b3e6:	e000      	b.n	800b3ea <prvUnlockQueue+0x46>
					break;
 800b3e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	22ff      	movs	r2, #255	; 0xff
 800b3ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b3f2:	f7ff fad7 	bl	800a9a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b3f6:	f7ff faa5 	bl	800a944 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b400:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b402:	e011      	b.n	800b428 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d012      	beq.n	800b432 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	3310      	adds	r3, #16
 800b410:	4618      	mov	r0, r3
 800b412:	f000 fd05 	bl	800be20 <xTaskRemoveFromEventList>
 800b416:	4603      	mov	r3, r0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b41c:	f000 fddc 	bl	800bfd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b420:	7bbb      	ldrb	r3, [r7, #14]
 800b422:	3b01      	subs	r3, #1
 800b424:	b2db      	uxtb	r3, r3
 800b426:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b428:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dce9      	bgt.n	800b404 <prvUnlockQueue+0x60>
 800b430:	e000      	b.n	800b434 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b432:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	22ff      	movs	r2, #255	; 0xff
 800b438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b43c:	f7ff fab2 	bl	800a9a4 <vPortExitCritical>
}
 800b440:	bf00      	nop
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b084      	sub	sp, #16
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b450:	f7ff fa78 	bl	800a944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d102      	bne.n	800b462 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b45c:	2301      	movs	r3, #1
 800b45e:	60fb      	str	r3, [r7, #12]
 800b460:	e001      	b.n	800b466 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b462:	2300      	movs	r3, #0
 800b464:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b466:	f7ff fa9d 	bl	800a9a4 <vPortExitCritical>

	return xReturn;
 800b46a:	68fb      	ldr	r3, [r7, #12]
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3710      	adds	r7, #16
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}

0800b474 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b47c:	f7ff fa62 	bl	800a944 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b488:	429a      	cmp	r2, r3
 800b48a:	d102      	bne.n	800b492 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b48c:	2301      	movs	r3, #1
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	e001      	b.n	800b496 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b492:	2300      	movs	r3, #0
 800b494:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b496:	f7ff fa85 	bl	800a9a4 <vPortExitCritical>

	return xReturn;
 800b49a:	68fb      	ldr	r3, [r7, #12]
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3710      	adds	r7, #16
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	60fb      	str	r3, [r7, #12]
 800b4b2:	e014      	b.n	800b4de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b4b4:	4a0f      	ldr	r2, [pc, #60]	; (800b4f4 <vQueueAddToRegistry+0x50>)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d10b      	bne.n	800b4d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b4c0:	490c      	ldr	r1, [pc, #48]	; (800b4f4 <vQueueAddToRegistry+0x50>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b4ca:	4a0a      	ldr	r2, [pc, #40]	; (800b4f4 <vQueueAddToRegistry+0x50>)
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	4413      	add	r3, r2
 800b4d2:	687a      	ldr	r2, [r7, #4]
 800b4d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b4d6:	e006      	b.n	800b4e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	3301      	adds	r3, #1
 800b4dc:	60fb      	str	r3, [r7, #12]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2b07      	cmp	r3, #7
 800b4e2:	d9e7      	bls.n	800b4b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	20004930 	.word	0x20004930

0800b4f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	60f8      	str	r0, [r7, #12]
 800b500:	60b9      	str	r1, [r7, #8]
 800b502:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b508:	f7ff fa1c 	bl	800a944 <vPortEnterCritical>
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b512:	b25b      	sxtb	r3, r3
 800b514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b518:	d103      	bne.n	800b522 <vQueueWaitForMessageRestricted+0x2a>
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	2200      	movs	r2, #0
 800b51e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b528:	b25b      	sxtb	r3, r3
 800b52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52e:	d103      	bne.n	800b538 <vQueueWaitForMessageRestricted+0x40>
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b538:	f7ff fa34 	bl	800a9a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	3324      	adds	r3, #36	; 0x24
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68b9      	ldr	r1, [r7, #8]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 fc3b 	bl	800bdc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f7ff ff26 	bl	800b3a4 <prvUnlockQueue>
	}
 800b558:	bf00      	nop
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b560:	b580      	push	{r7, lr}
 800b562:	b08e      	sub	sp, #56	; 0x38
 800b564:	af04      	add	r7, sp, #16
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	607a      	str	r2, [r7, #4]
 800b56c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	2b00      	cmp	r3, #0
 800b572:	d10a      	bne.n	800b58a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b578:	f383 8811 	msr	BASEPRI, r3
 800b57c:	f3bf 8f6f 	isb	sy
 800b580:	f3bf 8f4f 	dsb	sy
 800b584:	623b      	str	r3, [r7, #32]
}
 800b586:	bf00      	nop
 800b588:	e7fe      	b.n	800b588 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d10a      	bne.n	800b5a6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b594:	f383 8811 	msr	BASEPRI, r3
 800b598:	f3bf 8f6f 	isb	sy
 800b59c:	f3bf 8f4f 	dsb	sy
 800b5a0:	61fb      	str	r3, [r7, #28]
}
 800b5a2:	bf00      	nop
 800b5a4:	e7fe      	b.n	800b5a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b5a6:	235c      	movs	r3, #92	; 0x5c
 800b5a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b5c      	cmp	r3, #92	; 0x5c
 800b5ae:	d00a      	beq.n	800b5c6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	61bb      	str	r3, [r7, #24]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b5c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d01e      	beq.n	800b60c <xTaskCreateStatic+0xac>
 800b5ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d01b      	beq.n	800b60c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e0:	2202      	movs	r2, #2
 800b5e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	9303      	str	r3, [sp, #12]
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	9302      	str	r3, [sp, #8]
 800b5ee:	f107 0314 	add.w	r3, r7, #20
 800b5f2:	9301      	str	r3, [sp, #4]
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f6:	9300      	str	r3, [sp, #0]
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	68b9      	ldr	r1, [r7, #8]
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f000 f850 	bl	800b6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b604:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b606:	f000 f8dd 	bl	800b7c4 <prvAddNewTaskToReadyList>
 800b60a:	e001      	b.n	800b610 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b60c:	2300      	movs	r3, #0
 800b60e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b610:	697b      	ldr	r3, [r7, #20]
	}
 800b612:	4618      	mov	r0, r3
 800b614:	3728      	adds	r7, #40	; 0x28
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b08c      	sub	sp, #48	; 0x30
 800b61e:	af04      	add	r7, sp, #16
 800b620:	60f8      	str	r0, [r7, #12]
 800b622:	60b9      	str	r1, [r7, #8]
 800b624:	603b      	str	r3, [r7, #0]
 800b626:	4613      	mov	r3, r2
 800b628:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b62a:	88fb      	ldrh	r3, [r7, #6]
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	4618      	mov	r0, r3
 800b630:	f7fe fdba 	bl	800a1a8 <pvPortMalloc>
 800b634:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b63c:	205c      	movs	r0, #92	; 0x5c
 800b63e:	f7fe fdb3 	bl	800a1a8 <pvPortMalloc>
 800b642:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b644:	69fb      	ldr	r3, [r7, #28]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d003      	beq.n	800b652 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b64a:	69fb      	ldr	r3, [r7, #28]
 800b64c:	697a      	ldr	r2, [r7, #20]
 800b64e:	631a      	str	r2, [r3, #48]	; 0x30
 800b650:	e005      	b.n	800b65e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b652:	6978      	ldr	r0, [r7, #20]
 800b654:	f7fe fe74 	bl	800a340 <vPortFree>
 800b658:	e001      	b.n	800b65e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d017      	beq.n	800b694 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	2200      	movs	r2, #0
 800b668:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b66c:	88fa      	ldrh	r2, [r7, #6]
 800b66e:	2300      	movs	r3, #0
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	9302      	str	r3, [sp, #8]
 800b676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b678:	9301      	str	r3, [sp, #4]
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 f80e 	bl	800b6a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b688:	69f8      	ldr	r0, [r7, #28]
 800b68a:	f000 f89b 	bl	800b7c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b68e:	2301      	movs	r3, #1
 800b690:	61bb      	str	r3, [r7, #24]
 800b692:	e002      	b.n	800b69a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b694:	f04f 33ff 	mov.w	r3, #4294967295
 800b698:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b69a:	69bb      	ldr	r3, [r7, #24]
	}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3720      	adds	r7, #32
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
 800b6b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b6b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	21a5      	movs	r1, #165	; 0xa5
 800b6be:	f003 feb7 	bl	800f430 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b6cc:	3b01      	subs	r3, #1
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	f023 0307 	bic.w	r3, r3, #7
 800b6da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b6dc:	69bb      	ldr	r3, [r7, #24]
 800b6de:	f003 0307 	and.w	r3, r3, #7
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00a      	beq.n	800b6fc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	f383 8811 	msr	BASEPRI, r3
 800b6ee:	f3bf 8f6f 	isb	sy
 800b6f2:	f3bf 8f4f 	dsb	sy
 800b6f6:	617b      	str	r3, [r7, #20]
}
 800b6f8:	bf00      	nop
 800b6fa:	e7fe      	b.n	800b6fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d01f      	beq.n	800b742 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b702:	2300      	movs	r3, #0
 800b704:	61fb      	str	r3, [r7, #28]
 800b706:	e012      	b.n	800b72e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	7819      	ldrb	r1, [r3, #0]
 800b710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	4413      	add	r3, r2
 800b716:	3334      	adds	r3, #52	; 0x34
 800b718:	460a      	mov	r2, r1
 800b71a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	69fb      	ldr	r3, [r7, #28]
 800b720:	4413      	add	r3, r2
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d006      	beq.n	800b736 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	3301      	adds	r3, #1
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	2b0f      	cmp	r3, #15
 800b732:	d9e9      	bls.n	800b708 <prvInitialiseNewTask+0x64>
 800b734:	e000      	b.n	800b738 <prvInitialiseNewTask+0x94>
			{
				break;
 800b736:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b740:	e003      	b.n	800b74a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b744:	2200      	movs	r2, #0
 800b746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74c:	2b37      	cmp	r3, #55	; 0x37
 800b74e:	d901      	bls.n	800b754 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b750:	2337      	movs	r3, #55	; 0x37
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b758:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b75a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b75c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b75e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b762:	2200      	movs	r2, #0
 800b764:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b768:	3304      	adds	r3, #4
 800b76a:	4618      	mov	r0, r3
 800b76c:	f7fe ff26 	bl	800a5bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b772:	3318      	adds	r3, #24
 800b774:	4618      	mov	r0, r3
 800b776:	f7fe ff21 	bl	800a5bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b77e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b782:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b788:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b78e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b792:	2200      	movs	r2, #0
 800b794:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b798:	2200      	movs	r2, #0
 800b79a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b79e:	683a      	ldr	r2, [r7, #0]
 800b7a0:	68f9      	ldr	r1, [r7, #12]
 800b7a2:	69b8      	ldr	r0, [r7, #24]
 800b7a4:	f7fe ff9e 	bl	800a6e4 <pxPortInitialiseStack>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
	...

0800b7c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b7cc:	f7ff f8ba 	bl	800a944 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b7d0:	4b2d      	ldr	r3, [pc, #180]	; (800b888 <prvAddNewTaskToReadyList+0xc4>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	4a2c      	ldr	r2, [pc, #176]	; (800b888 <prvAddNewTaskToReadyList+0xc4>)
 800b7d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b7da:	4b2c      	ldr	r3, [pc, #176]	; (800b88c <prvAddNewTaskToReadyList+0xc8>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d109      	bne.n	800b7f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b7e2:	4a2a      	ldr	r2, [pc, #168]	; (800b88c <prvAddNewTaskToReadyList+0xc8>)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b7e8:	4b27      	ldr	r3, [pc, #156]	; (800b888 <prvAddNewTaskToReadyList+0xc4>)
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d110      	bne.n	800b812 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b7f0:	f000 fc16 	bl	800c020 <prvInitialiseTaskLists>
 800b7f4:	e00d      	b.n	800b812 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b7f6:	4b26      	ldr	r3, [pc, #152]	; (800b890 <prvAddNewTaskToReadyList+0xcc>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d109      	bne.n	800b812 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b7fe:	4b23      	ldr	r3, [pc, #140]	; (800b88c <prvAddNewTaskToReadyList+0xc8>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	429a      	cmp	r2, r3
 800b80a:	d802      	bhi.n	800b812 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b80c:	4a1f      	ldr	r2, [pc, #124]	; (800b88c <prvAddNewTaskToReadyList+0xc8>)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b812:	4b20      	ldr	r3, [pc, #128]	; (800b894 <prvAddNewTaskToReadyList+0xd0>)
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	3301      	adds	r3, #1
 800b818:	4a1e      	ldr	r2, [pc, #120]	; (800b894 <prvAddNewTaskToReadyList+0xd0>)
 800b81a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b81c:	4b1d      	ldr	r3, [pc, #116]	; (800b894 <prvAddNewTaskToReadyList+0xd0>)
 800b81e:	681a      	ldr	r2, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <prvAddNewTaskToReadyList+0xd4>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d903      	bls.n	800b838 <prvAddNewTaskToReadyList+0x74>
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b834:	4a18      	ldr	r2, [pc, #96]	; (800b898 <prvAddNewTaskToReadyList+0xd4>)
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4a15      	ldr	r2, [pc, #84]	; (800b89c <prvAddNewTaskToReadyList+0xd8>)
 800b846:	441a      	add	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	3304      	adds	r3, #4
 800b84c:	4619      	mov	r1, r3
 800b84e:	4610      	mov	r0, r2
 800b850:	f7fe fec1 	bl	800a5d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b854:	f7ff f8a6 	bl	800a9a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b858:	4b0d      	ldr	r3, [pc, #52]	; (800b890 <prvAddNewTaskToReadyList+0xcc>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00e      	beq.n	800b87e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b860:	4b0a      	ldr	r3, [pc, #40]	; (800b88c <prvAddNewTaskToReadyList+0xc8>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d207      	bcs.n	800b87e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b86e:	4b0c      	ldr	r3, [pc, #48]	; (800b8a0 <prvAddNewTaskToReadyList+0xdc>)
 800b870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b87e:	bf00      	nop
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	20004e44 	.word	0x20004e44
 800b88c:	20004970 	.word	0x20004970
 800b890:	20004e50 	.word	0x20004e50
 800b894:	20004e60 	.word	0x20004e60
 800b898:	20004e4c 	.word	0x20004e4c
 800b89c:	20004974 	.word	0x20004974
 800b8a0:	e000ed04 	.word	0xe000ed04

0800b8a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d017      	beq.n	800b8e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b8b6:	4b13      	ldr	r3, [pc, #76]	; (800b904 <vTaskDelay+0x60>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00a      	beq.n	800b8d4 <vTaskDelay+0x30>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60bb      	str	r3, [r7, #8]
}
 800b8d0:	bf00      	nop
 800b8d2:	e7fe      	b.n	800b8d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b8d4:	f000 f880 	bl	800b9d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b8d8:	2100      	movs	r1, #0
 800b8da:	6878      	ldr	r0, [r7, #4]
 800b8dc:	f000 fcea 	bl	800c2b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b8e0:	f000 f888 	bl	800b9f4 <xTaskResumeAll>
 800b8e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d107      	bne.n	800b8fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b8ec:	4b06      	ldr	r3, [pc, #24]	; (800b908 <vTaskDelay+0x64>)
 800b8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8f2:	601a      	str	r2, [r3, #0]
 800b8f4:	f3bf 8f4f 	dsb	sy
 800b8f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b8fc:	bf00      	nop
 800b8fe:	3710      	adds	r7, #16
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	20004e6c 	.word	0x20004e6c
 800b908:	e000ed04 	.word	0xe000ed04

0800b90c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b08a      	sub	sp, #40	; 0x28
 800b910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b912:	2300      	movs	r3, #0
 800b914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b91a:	463a      	mov	r2, r7
 800b91c:	1d39      	adds	r1, r7, #4
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	4618      	mov	r0, r3
 800b924:	f7fe fc0c 	bl	800a140 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	9202      	str	r2, [sp, #8]
 800b930:	9301      	str	r3, [sp, #4]
 800b932:	2300      	movs	r3, #0
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	2300      	movs	r3, #0
 800b938:	460a      	mov	r2, r1
 800b93a:	4921      	ldr	r1, [pc, #132]	; (800b9c0 <vTaskStartScheduler+0xb4>)
 800b93c:	4821      	ldr	r0, [pc, #132]	; (800b9c4 <vTaskStartScheduler+0xb8>)
 800b93e:	f7ff fe0f 	bl	800b560 <xTaskCreateStatic>
 800b942:	4603      	mov	r3, r0
 800b944:	4a20      	ldr	r2, [pc, #128]	; (800b9c8 <vTaskStartScheduler+0xbc>)
 800b946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b948:	4b1f      	ldr	r3, [pc, #124]	; (800b9c8 <vTaskStartScheduler+0xbc>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d002      	beq.n	800b956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b950:	2301      	movs	r3, #1
 800b952:	617b      	str	r3, [r7, #20]
 800b954:	e001      	b.n	800b95a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b956:	2300      	movs	r3, #0
 800b958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d102      	bne.n	800b966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b960:	f000 fcfc 	bl	800c35c <xTimerCreateTimerTask>
 800b964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d116      	bne.n	800b99a <vTaskStartScheduler+0x8e>
	__asm volatile
 800b96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b970:	f383 8811 	msr	BASEPRI, r3
 800b974:	f3bf 8f6f 	isb	sy
 800b978:	f3bf 8f4f 	dsb	sy
 800b97c:	613b      	str	r3, [r7, #16]
}
 800b97e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b980:	4b12      	ldr	r3, [pc, #72]	; (800b9cc <vTaskStartScheduler+0xc0>)
 800b982:	f04f 32ff 	mov.w	r2, #4294967295
 800b986:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b988:	4b11      	ldr	r3, [pc, #68]	; (800b9d0 <vTaskStartScheduler+0xc4>)
 800b98a:	2201      	movs	r2, #1
 800b98c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b98e:	4b11      	ldr	r3, [pc, #68]	; (800b9d4 <vTaskStartScheduler+0xc8>)
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b994:	f7fe ff34 	bl	800a800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b998:	e00e      	b.n	800b9b8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9a0:	d10a      	bne.n	800b9b8 <vTaskStartScheduler+0xac>
	__asm volatile
 800b9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a6:	f383 8811 	msr	BASEPRI, r3
 800b9aa:	f3bf 8f6f 	isb	sy
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	60fb      	str	r3, [r7, #12]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <vTaskStartScheduler+0xaa>
}
 800b9b8:	bf00      	nop
 800b9ba:	3718      	adds	r7, #24
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	08013d84 	.word	0x08013d84
 800b9c4:	0800bff1 	.word	0x0800bff1
 800b9c8:	20004e68 	.word	0x20004e68
 800b9cc:	20004e64 	.word	0x20004e64
 800b9d0:	20004e50 	.word	0x20004e50
 800b9d4:	20004e48 	.word	0x20004e48

0800b9d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b9dc:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <vTaskSuspendAll+0x18>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	4a03      	ldr	r2, [pc, #12]	; (800b9f0 <vTaskSuspendAll+0x18>)
 800b9e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b9e6:	bf00      	nop
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ee:	4770      	bx	lr
 800b9f0:	20004e6c 	.word	0x20004e6c

0800b9f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ba02:	4b42      	ldr	r3, [pc, #264]	; (800bb0c <xTaskResumeAll+0x118>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d10a      	bne.n	800ba20 <xTaskResumeAll+0x2c>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	603b      	str	r3, [r7, #0]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ba20:	f7fe ff90 	bl	800a944 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ba24:	4b39      	ldr	r3, [pc, #228]	; (800bb0c <xTaskResumeAll+0x118>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	4a38      	ldr	r2, [pc, #224]	; (800bb0c <xTaskResumeAll+0x118>)
 800ba2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba2e:	4b37      	ldr	r3, [pc, #220]	; (800bb0c <xTaskResumeAll+0x118>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d162      	bne.n	800bafc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ba36:	4b36      	ldr	r3, [pc, #216]	; (800bb10 <xTaskResumeAll+0x11c>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d05e      	beq.n	800bafc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba3e:	e02f      	b.n	800baa0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba40:	4b34      	ldr	r3, [pc, #208]	; (800bb14 <xTaskResumeAll+0x120>)
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	3318      	adds	r3, #24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe fe1f 	bl	800a690 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	3304      	adds	r3, #4
 800ba56:	4618      	mov	r0, r3
 800ba58:	f7fe fe1a 	bl	800a690 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba60:	4b2d      	ldr	r3, [pc, #180]	; (800bb18 <xTaskResumeAll+0x124>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d903      	bls.n	800ba70 <xTaskResumeAll+0x7c>
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba6c:	4a2a      	ldr	r2, [pc, #168]	; (800bb18 <xTaskResumeAll+0x124>)
 800ba6e:	6013      	str	r3, [r2, #0]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba74:	4613      	mov	r3, r2
 800ba76:	009b      	lsls	r3, r3, #2
 800ba78:	4413      	add	r3, r2
 800ba7a:	009b      	lsls	r3, r3, #2
 800ba7c:	4a27      	ldr	r2, [pc, #156]	; (800bb1c <xTaskResumeAll+0x128>)
 800ba7e:	441a      	add	r2, r3
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	3304      	adds	r3, #4
 800ba84:	4619      	mov	r1, r3
 800ba86:	4610      	mov	r0, r2
 800ba88:	f7fe fda5 	bl	800a5d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba90:	4b23      	ldr	r3, [pc, #140]	; (800bb20 <xTaskResumeAll+0x12c>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d302      	bcc.n	800baa0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ba9a:	4b22      	ldr	r3, [pc, #136]	; (800bb24 <xTaskResumeAll+0x130>)
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800baa0:	4b1c      	ldr	r3, [pc, #112]	; (800bb14 <xTaskResumeAll+0x120>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d1cb      	bne.n	800ba40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d001      	beq.n	800bab2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800baae:	f000 fb55 	bl	800c15c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bab2:	4b1d      	ldr	r3, [pc, #116]	; (800bb28 <xTaskResumeAll+0x134>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d010      	beq.n	800bae0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800babe:	f000 f847 	bl	800bb50 <xTaskIncrementTick>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bac8:	4b16      	ldr	r3, [pc, #88]	; (800bb24 <xTaskResumeAll+0x130>)
 800baca:	2201      	movs	r2, #1
 800bacc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d1f1      	bne.n	800babe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bada:	4b13      	ldr	r3, [pc, #76]	; (800bb28 <xTaskResumeAll+0x134>)
 800badc:	2200      	movs	r2, #0
 800bade:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bae0:	4b10      	ldr	r3, [pc, #64]	; (800bb24 <xTaskResumeAll+0x130>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d009      	beq.n	800bafc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bae8:	2301      	movs	r3, #1
 800baea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800baec:	4b0f      	ldr	r3, [pc, #60]	; (800bb2c <xTaskResumeAll+0x138>)
 800baee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800baf2:	601a      	str	r2, [r3, #0]
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bafc:	f7fe ff52 	bl	800a9a4 <vPortExitCritical>

	return xAlreadyYielded;
 800bb00:	68bb      	ldr	r3, [r7, #8]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3710      	adds	r7, #16
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20004e6c 	.word	0x20004e6c
 800bb10:	20004e44 	.word	0x20004e44
 800bb14:	20004e04 	.word	0x20004e04
 800bb18:	20004e4c 	.word	0x20004e4c
 800bb1c:	20004974 	.word	0x20004974
 800bb20:	20004970 	.word	0x20004970
 800bb24:	20004e58 	.word	0x20004e58
 800bb28:	20004e54 	.word	0x20004e54
 800bb2c:	e000ed04 	.word	0xe000ed04

0800bb30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bb36:	4b05      	ldr	r3, [pc, #20]	; (800bb4c <xTaskGetTickCount+0x1c>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bb3c:	687b      	ldr	r3, [r7, #4]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	370c      	adds	r7, #12
 800bb42:	46bd      	mov	sp, r7
 800bb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb48:	4770      	bx	lr
 800bb4a:	bf00      	nop
 800bb4c:	20004e48 	.word	0x20004e48

0800bb50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b086      	sub	sp, #24
 800bb54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bb56:	2300      	movs	r3, #0
 800bb58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bb5a:	4b4f      	ldr	r3, [pc, #316]	; (800bc98 <xTaskIncrementTick+0x148>)
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	f040 808f 	bne.w	800bc82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb64:	4b4d      	ldr	r3, [pc, #308]	; (800bc9c <xTaskIncrementTick+0x14c>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bb6c:	4a4b      	ldr	r2, [pc, #300]	; (800bc9c <xTaskIncrementTick+0x14c>)
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d120      	bne.n	800bbba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bb78:	4b49      	ldr	r3, [pc, #292]	; (800bca0 <xTaskIncrementTick+0x150>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00a      	beq.n	800bb98 <xTaskIncrementTick+0x48>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	603b      	str	r3, [r7, #0]
}
 800bb94:	bf00      	nop
 800bb96:	e7fe      	b.n	800bb96 <xTaskIncrementTick+0x46>
 800bb98:	4b41      	ldr	r3, [pc, #260]	; (800bca0 <xTaskIncrementTick+0x150>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60fb      	str	r3, [r7, #12]
 800bb9e:	4b41      	ldr	r3, [pc, #260]	; (800bca4 <xTaskIncrementTick+0x154>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a3f      	ldr	r2, [pc, #252]	; (800bca0 <xTaskIncrementTick+0x150>)
 800bba4:	6013      	str	r3, [r2, #0]
 800bba6:	4a3f      	ldr	r2, [pc, #252]	; (800bca4 <xTaskIncrementTick+0x154>)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	6013      	str	r3, [r2, #0]
 800bbac:	4b3e      	ldr	r3, [pc, #248]	; (800bca8 <xTaskIncrementTick+0x158>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	3301      	adds	r3, #1
 800bbb2:	4a3d      	ldr	r2, [pc, #244]	; (800bca8 <xTaskIncrementTick+0x158>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	f000 fad1 	bl	800c15c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bbba:	4b3c      	ldr	r3, [pc, #240]	; (800bcac <xTaskIncrementTick+0x15c>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	429a      	cmp	r2, r3
 800bbc2:	d349      	bcc.n	800bc58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbc4:	4b36      	ldr	r3, [pc, #216]	; (800bca0 <xTaskIncrementTick+0x150>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d104      	bne.n	800bbd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbce:	4b37      	ldr	r3, [pc, #220]	; (800bcac <xTaskIncrementTick+0x15c>)
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	601a      	str	r2, [r3, #0]
					break;
 800bbd6:	e03f      	b.n	800bc58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd8:	4b31      	ldr	r3, [pc, #196]	; (800bca0 <xTaskIncrementTick+0x150>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	68db      	ldr	r3, [r3, #12]
 800bbde:	68db      	ldr	r3, [r3, #12]
 800bbe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bbe2:	68bb      	ldr	r3, [r7, #8]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bbe8:	693a      	ldr	r2, [r7, #16]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d203      	bcs.n	800bbf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bbf0:	4a2e      	ldr	r2, [pc, #184]	; (800bcac <xTaskIncrementTick+0x15c>)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bbf6:	e02f      	b.n	800bc58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f7fe fd47 	bl	800a690 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bc02:	68bb      	ldr	r3, [r7, #8]
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d004      	beq.n	800bc14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	3318      	adds	r3, #24
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe fd3e 	bl	800a690 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc18:	4b25      	ldr	r3, [pc, #148]	; (800bcb0 <xTaskIncrementTick+0x160>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	429a      	cmp	r2, r3
 800bc1e:	d903      	bls.n	800bc28 <xTaskIncrementTick+0xd8>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	4a22      	ldr	r2, [pc, #136]	; (800bcb0 <xTaskIncrementTick+0x160>)
 800bc26:	6013      	str	r3, [r2, #0]
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	4413      	add	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4a1f      	ldr	r2, [pc, #124]	; (800bcb4 <xTaskIncrementTick+0x164>)
 800bc36:	441a      	add	r2, r3
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	3304      	adds	r3, #4
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	4610      	mov	r0, r2
 800bc40:	f7fe fcc9 	bl	800a5d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc48:	4b1b      	ldr	r3, [pc, #108]	; (800bcb8 <xTaskIncrementTick+0x168>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d3b8      	bcc.n	800bbc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bc52:	2301      	movs	r3, #1
 800bc54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc56:	e7b5      	b.n	800bbc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bc58:	4b17      	ldr	r3, [pc, #92]	; (800bcb8 <xTaskIncrementTick+0x168>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5e:	4915      	ldr	r1, [pc, #84]	; (800bcb4 <xTaskIncrementTick+0x164>)
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	440b      	add	r3, r1
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d901      	bls.n	800bc74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bc70:	2301      	movs	r3, #1
 800bc72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bc74:	4b11      	ldr	r3, [pc, #68]	; (800bcbc <xTaskIncrementTick+0x16c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d007      	beq.n	800bc8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	e004      	b.n	800bc8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bc82:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <xTaskIncrementTick+0x170>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3301      	adds	r3, #1
 800bc88:	4a0d      	ldr	r2, [pc, #52]	; (800bcc0 <xTaskIncrementTick+0x170>)
 800bc8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bc8c:	697b      	ldr	r3, [r7, #20]
}
 800bc8e:	4618      	mov	r0, r3
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	20004e6c 	.word	0x20004e6c
 800bc9c:	20004e48 	.word	0x20004e48
 800bca0:	20004dfc 	.word	0x20004dfc
 800bca4:	20004e00 	.word	0x20004e00
 800bca8:	20004e5c 	.word	0x20004e5c
 800bcac:	20004e64 	.word	0x20004e64
 800bcb0:	20004e4c 	.word	0x20004e4c
 800bcb4:	20004974 	.word	0x20004974
 800bcb8:	20004970 	.word	0x20004970
 800bcbc:	20004e58 	.word	0x20004e58
 800bcc0:	20004e54 	.word	0x20004e54

0800bcc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bcca:	4b28      	ldr	r3, [pc, #160]	; (800bd6c <vTaskSwitchContext+0xa8>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d003      	beq.n	800bcda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bcd2:	4b27      	ldr	r3, [pc, #156]	; (800bd70 <vTaskSwitchContext+0xac>)
 800bcd4:	2201      	movs	r2, #1
 800bcd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bcd8:	e041      	b.n	800bd5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bcda:	4b25      	ldr	r3, [pc, #148]	; (800bd70 <vTaskSwitchContext+0xac>)
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bce0:	4b24      	ldr	r3, [pc, #144]	; (800bd74 <vTaskSwitchContext+0xb0>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	60fb      	str	r3, [r7, #12]
 800bce6:	e010      	b.n	800bd0a <vTaskSwitchContext+0x46>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d10a      	bne.n	800bd04 <vTaskSwitchContext+0x40>
	__asm volatile
 800bcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcf2:	f383 8811 	msr	BASEPRI, r3
 800bcf6:	f3bf 8f6f 	isb	sy
 800bcfa:	f3bf 8f4f 	dsb	sy
 800bcfe:	607b      	str	r3, [r7, #4]
}
 800bd00:	bf00      	nop
 800bd02:	e7fe      	b.n	800bd02 <vTaskSwitchContext+0x3e>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	60fb      	str	r3, [r7, #12]
 800bd0a:	491b      	ldr	r1, [pc, #108]	; (800bd78 <vTaskSwitchContext+0xb4>)
 800bd0c:	68fa      	ldr	r2, [r7, #12]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	009b      	lsls	r3, r3, #2
 800bd12:	4413      	add	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	440b      	add	r3, r1
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d0e4      	beq.n	800bce8 <vTaskSwitchContext+0x24>
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	4613      	mov	r3, r2
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4a13      	ldr	r2, [pc, #76]	; (800bd78 <vTaskSwitchContext+0xb4>)
 800bd2a:	4413      	add	r3, r2
 800bd2c:	60bb      	str	r3, [r7, #8]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	685a      	ldr	r2, [r3, #4]
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	605a      	str	r2, [r3, #4]
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	685a      	ldr	r2, [r3, #4]
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d104      	bne.n	800bd4e <vTaskSwitchContext+0x8a>
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	605a      	str	r2, [r3, #4]
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4a09      	ldr	r2, [pc, #36]	; (800bd7c <vTaskSwitchContext+0xb8>)
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	4a06      	ldr	r2, [pc, #24]	; (800bd74 <vTaskSwitchContext+0xb0>)
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6013      	str	r3, [r2, #0]
}
 800bd5e:	bf00      	nop
 800bd60:	3714      	adds	r7, #20
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	20004e6c 	.word	0x20004e6c
 800bd70:	20004e58 	.word	0x20004e58
 800bd74:	20004e4c 	.word	0x20004e4c
 800bd78:	20004974 	.word	0x20004974
 800bd7c:	20004970 	.word	0x20004970

0800bd80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10a      	bne.n	800bda6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	60fb      	str	r3, [r7, #12]
}
 800bda2:	bf00      	nop
 800bda4:	e7fe      	b.n	800bda4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bda6:	4b07      	ldr	r3, [pc, #28]	; (800bdc4 <vTaskPlaceOnEventList+0x44>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	3318      	adds	r3, #24
 800bdac:	4619      	mov	r1, r3
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f7fe fc35 	bl	800a61e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	6838      	ldr	r0, [r7, #0]
 800bdb8:	f000 fa7c 	bl	800c2b4 <prvAddCurrentTaskToDelayedList>
}
 800bdbc:	bf00      	nop
 800bdbe:	3710      	adds	r7, #16
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20004970 	.word	0x20004970

0800bdc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	60f8      	str	r0, [r7, #12]
 800bdd0:	60b9      	str	r1, [r7, #8]
 800bdd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	617b      	str	r3, [r7, #20]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bdf0:	4b0a      	ldr	r3, [pc, #40]	; (800be1c <vTaskPlaceOnEventListRestricted+0x54>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	3318      	adds	r3, #24
 800bdf6:	4619      	mov	r1, r3
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	f7fe fbec 	bl	800a5d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d002      	beq.n	800be0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800be04:	f04f 33ff 	mov.w	r3, #4294967295
 800be08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800be0a:	6879      	ldr	r1, [r7, #4]
 800be0c:	68b8      	ldr	r0, [r7, #8]
 800be0e:	f000 fa51 	bl	800c2b4 <prvAddCurrentTaskToDelayedList>
	}
 800be12:	bf00      	nop
 800be14:	3718      	adds	r7, #24
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20004970 	.word	0x20004970

0800be20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b086      	sub	sp, #24
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68db      	ldr	r3, [r3, #12]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d10a      	bne.n	800be4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	3318      	adds	r3, #24
 800be50:	4618      	mov	r0, r3
 800be52:	f7fe fc1d 	bl	800a690 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be56:	4b1e      	ldr	r3, [pc, #120]	; (800bed0 <xTaskRemoveFromEventList+0xb0>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d11d      	bne.n	800be9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800be5e:	693b      	ldr	r3, [r7, #16]
 800be60:	3304      	adds	r3, #4
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fc14 	bl	800a690 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6c:	4b19      	ldr	r3, [pc, #100]	; (800bed4 <xTaskRemoveFromEventList+0xb4>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	429a      	cmp	r2, r3
 800be72:	d903      	bls.n	800be7c <xTaskRemoveFromEventList+0x5c>
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be78:	4a16      	ldr	r2, [pc, #88]	; (800bed4 <xTaskRemoveFromEventList+0xb4>)
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be80:	4613      	mov	r3, r2
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	4413      	add	r3, r2
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	4a13      	ldr	r2, [pc, #76]	; (800bed8 <xTaskRemoveFromEventList+0xb8>)
 800be8a:	441a      	add	r2, r3
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	3304      	adds	r3, #4
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f7fe fb9f 	bl	800a5d6 <vListInsertEnd>
 800be98:	e005      	b.n	800bea6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	3318      	adds	r3, #24
 800be9e:	4619      	mov	r1, r3
 800bea0:	480e      	ldr	r0, [pc, #56]	; (800bedc <xTaskRemoveFromEventList+0xbc>)
 800bea2:	f7fe fb98 	bl	800a5d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beaa:	4b0d      	ldr	r3, [pc, #52]	; (800bee0 <xTaskRemoveFromEventList+0xc0>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb0:	429a      	cmp	r2, r3
 800beb2:	d905      	bls.n	800bec0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800beb4:	2301      	movs	r3, #1
 800beb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800beb8:	4b0a      	ldr	r3, [pc, #40]	; (800bee4 <xTaskRemoveFromEventList+0xc4>)
 800beba:	2201      	movs	r2, #1
 800bebc:	601a      	str	r2, [r3, #0]
 800bebe:	e001      	b.n	800bec4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bec0:	2300      	movs	r3, #0
 800bec2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bec4:	697b      	ldr	r3, [r7, #20]
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3718      	adds	r7, #24
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	20004e6c 	.word	0x20004e6c
 800bed4:	20004e4c 	.word	0x20004e4c
 800bed8:	20004974 	.word	0x20004974
 800bedc:	20004e04 	.word	0x20004e04
 800bee0:	20004970 	.word	0x20004970
 800bee4:	20004e58 	.word	0x20004e58

0800bee8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bee8:	b480      	push	{r7}
 800beea:	b083      	sub	sp, #12
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bef0:	4b06      	ldr	r3, [pc, #24]	; (800bf0c <vTaskInternalSetTimeOutState+0x24>)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bef8:	4b05      	ldr	r3, [pc, #20]	; (800bf10 <vTaskInternalSetTimeOutState+0x28>)
 800befa:	681a      	ldr	r2, [r3, #0]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	605a      	str	r2, [r3, #4]
}
 800bf00:	bf00      	nop
 800bf02:	370c      	adds	r7, #12
 800bf04:	46bd      	mov	sp, r7
 800bf06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0a:	4770      	bx	lr
 800bf0c:	20004e5c 	.word	0x20004e5c
 800bf10:	20004e48 	.word	0x20004e48

0800bf14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d10a      	bne.n	800bf3a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bf24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf28:	f383 8811 	msr	BASEPRI, r3
 800bf2c:	f3bf 8f6f 	isb	sy
 800bf30:	f3bf 8f4f 	dsb	sy
 800bf34:	613b      	str	r3, [r7, #16]
}
 800bf36:	bf00      	nop
 800bf38:	e7fe      	b.n	800bf38 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d10a      	bne.n	800bf56 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	60fb      	str	r3, [r7, #12]
}
 800bf52:	bf00      	nop
 800bf54:	e7fe      	b.n	800bf54 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bf56:	f7fe fcf5 	bl	800a944 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bf5a:	4b1d      	ldr	r3, [pc, #116]	; (800bfd0 <xTaskCheckForTimeOut+0xbc>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	69ba      	ldr	r2, [r7, #24]
 800bf66:	1ad3      	subs	r3, r2, r3
 800bf68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf72:	d102      	bne.n	800bf7a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bf74:	2300      	movs	r3, #0
 800bf76:	61fb      	str	r3, [r7, #28]
 800bf78:	e023      	b.n	800bfc2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681a      	ldr	r2, [r3, #0]
 800bf7e:	4b15      	ldr	r3, [pc, #84]	; (800bfd4 <xTaskCheckForTimeOut+0xc0>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d007      	beq.n	800bf96 <xTaskCheckForTimeOut+0x82>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d302      	bcc.n	800bf96 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bf90:	2301      	movs	r3, #1
 800bf92:	61fb      	str	r3, [r7, #28]
 800bf94:	e015      	b.n	800bfc2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	697a      	ldr	r2, [r7, #20]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d20b      	bcs.n	800bfb8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	681a      	ldr	r2, [r3, #0]
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	1ad2      	subs	r2, r2, r3
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7ff ff9b 	bl	800bee8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	61fb      	str	r3, [r7, #28]
 800bfb6:	e004      	b.n	800bfc2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	2200      	movs	r2, #0
 800bfbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bfc2:	f7fe fcef 	bl	800a9a4 <vPortExitCritical>

	return xReturn;
 800bfc6:	69fb      	ldr	r3, [r7, #28]
}
 800bfc8:	4618      	mov	r0, r3
 800bfca:	3720      	adds	r7, #32
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20004e48 	.word	0x20004e48
 800bfd4:	20004e5c 	.word	0x20004e5c

0800bfd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bfd8:	b480      	push	{r7}
 800bfda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bfdc:	4b03      	ldr	r3, [pc, #12]	; (800bfec <vTaskMissedYield+0x14>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	601a      	str	r2, [r3, #0]
}
 800bfe2:	bf00      	nop
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	20004e58 	.word	0x20004e58

0800bff0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bff8:	f000 f852 	bl	800c0a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bffc:	4b06      	ldr	r3, [pc, #24]	; (800c018 <prvIdleTask+0x28>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	2b01      	cmp	r3, #1
 800c002:	d9f9      	bls.n	800bff8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c004:	4b05      	ldr	r3, [pc, #20]	; (800c01c <prvIdleTask+0x2c>)
 800c006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	f3bf 8f4f 	dsb	sy
 800c010:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c014:	e7f0      	b.n	800bff8 <prvIdleTask+0x8>
 800c016:	bf00      	nop
 800c018:	20004974 	.word	0x20004974
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c026:	2300      	movs	r3, #0
 800c028:	607b      	str	r3, [r7, #4]
 800c02a:	e00c      	b.n	800c046 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4a12      	ldr	r2, [pc, #72]	; (800c080 <prvInitialiseTaskLists+0x60>)
 800c038:	4413      	add	r3, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7fe fa9e 	bl	800a57c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	3301      	adds	r3, #1
 800c044:	607b      	str	r3, [r7, #4]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b37      	cmp	r3, #55	; 0x37
 800c04a:	d9ef      	bls.n	800c02c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c04c:	480d      	ldr	r0, [pc, #52]	; (800c084 <prvInitialiseTaskLists+0x64>)
 800c04e:	f7fe fa95 	bl	800a57c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c052:	480d      	ldr	r0, [pc, #52]	; (800c088 <prvInitialiseTaskLists+0x68>)
 800c054:	f7fe fa92 	bl	800a57c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c058:	480c      	ldr	r0, [pc, #48]	; (800c08c <prvInitialiseTaskLists+0x6c>)
 800c05a:	f7fe fa8f 	bl	800a57c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c05e:	480c      	ldr	r0, [pc, #48]	; (800c090 <prvInitialiseTaskLists+0x70>)
 800c060:	f7fe fa8c 	bl	800a57c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c064:	480b      	ldr	r0, [pc, #44]	; (800c094 <prvInitialiseTaskLists+0x74>)
 800c066:	f7fe fa89 	bl	800a57c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c06a:	4b0b      	ldr	r3, [pc, #44]	; (800c098 <prvInitialiseTaskLists+0x78>)
 800c06c:	4a05      	ldr	r2, [pc, #20]	; (800c084 <prvInitialiseTaskLists+0x64>)
 800c06e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c070:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <prvInitialiseTaskLists+0x7c>)
 800c072:	4a05      	ldr	r2, [pc, #20]	; (800c088 <prvInitialiseTaskLists+0x68>)
 800c074:	601a      	str	r2, [r3, #0]
}
 800c076:	bf00      	nop
 800c078:	3708      	adds	r7, #8
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	bf00      	nop
 800c080:	20004974 	.word	0x20004974
 800c084:	20004dd4 	.word	0x20004dd4
 800c088:	20004de8 	.word	0x20004de8
 800c08c:	20004e04 	.word	0x20004e04
 800c090:	20004e18 	.word	0x20004e18
 800c094:	20004e30 	.word	0x20004e30
 800c098:	20004dfc 	.word	0x20004dfc
 800c09c:	20004e00 	.word	0x20004e00

0800c0a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0a6:	e019      	b.n	800c0dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c0a8:	f7fe fc4c 	bl	800a944 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <prvCheckTasksWaitingTermination+0x50>)
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	68db      	ldr	r3, [r3, #12]
 800c0b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	f7fe fae9 	bl	800a690 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c0be:	4b0d      	ldr	r3, [pc, #52]	; (800c0f4 <prvCheckTasksWaitingTermination+0x54>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	4a0b      	ldr	r2, [pc, #44]	; (800c0f4 <prvCheckTasksWaitingTermination+0x54>)
 800c0c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c0c8:	4b0b      	ldr	r3, [pc, #44]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3b01      	subs	r3, #1
 800c0ce:	4a0a      	ldr	r2, [pc, #40]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c0d2:	f7fe fc67 	bl	800a9a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f810 	bl	800c0fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c0dc:	4b06      	ldr	r3, [pc, #24]	; (800c0f8 <prvCheckTasksWaitingTermination+0x58>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e1      	bne.n	800c0a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	20004e18 	.word	0x20004e18
 800c0f4:	20004e44 	.word	0x20004e44
 800c0f8:	20004e2c 	.word	0x20004e2c

0800c0fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d108      	bne.n	800c120 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c112:	4618      	mov	r0, r3
 800c114:	f7fe f914 	bl	800a340 <vPortFree>
				vPortFree( pxTCB );
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f7fe f911 	bl	800a340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c11e:	e018      	b.n	800c152 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c126:	2b01      	cmp	r3, #1
 800c128:	d103      	bne.n	800c132 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7fe f908 	bl	800a340 <vPortFree>
	}
 800c130:	e00f      	b.n	800c152 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d00a      	beq.n	800c152 <prvDeleteTCB+0x56>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <prvDeleteTCB+0x54>
	}
 800c152:	bf00      	nop
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
	...

0800c15c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c15c:	b480      	push	{r7}
 800c15e:	b083      	sub	sp, #12
 800c160:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c162:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <prvResetNextTaskUnblockTime+0x38>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d104      	bne.n	800c176 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c16c:	4b0a      	ldr	r3, [pc, #40]	; (800c198 <prvResetNextTaskUnblockTime+0x3c>)
 800c16e:	f04f 32ff 	mov.w	r2, #4294967295
 800c172:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c174:	e008      	b.n	800c188 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c176:	4b07      	ldr	r3, [pc, #28]	; (800c194 <prvResetNextTaskUnblockTime+0x38>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	4a04      	ldr	r2, [pc, #16]	; (800c198 <prvResetNextTaskUnblockTime+0x3c>)
 800c186:	6013      	str	r3, [r2, #0]
}
 800c188:	bf00      	nop
 800c18a:	370c      	adds	r7, #12
 800c18c:	46bd      	mov	sp, r7
 800c18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c192:	4770      	bx	lr
 800c194:	20004dfc 	.word	0x20004dfc
 800c198:	20004e64 	.word	0x20004e64

0800c19c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <xTaskGetSchedulerState+0x34>)
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d102      	bne.n	800c1b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	607b      	str	r3, [r7, #4]
 800c1ae:	e008      	b.n	800c1c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1b0:	4b08      	ldr	r3, [pc, #32]	; (800c1d4 <xTaskGetSchedulerState+0x38>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d102      	bne.n	800c1be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c1b8:	2302      	movs	r3, #2
 800c1ba:	607b      	str	r3, [r7, #4]
 800c1bc:	e001      	b.n	800c1c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c1c2:	687b      	ldr	r3, [r7, #4]
	}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	370c      	adds	r7, #12
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ce:	4770      	bx	lr
 800c1d0:	20004e50 	.word	0x20004e50
 800c1d4:	20004e6c 	.word	0x20004e6c

0800c1d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d056      	beq.n	800c29c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c1ee:	4b2e      	ldr	r3, [pc, #184]	; (800c2a8 <xTaskPriorityDisinherit+0xd0>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	693a      	ldr	r2, [r7, #16]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d00a      	beq.n	800c20e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c1f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fc:	f383 8811 	msr	BASEPRI, r3
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	f3bf 8f4f 	dsb	sy
 800c208:	60fb      	str	r3, [r7, #12]
}
 800c20a:	bf00      	nop
 800c20c:	e7fe      	b.n	800c20c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c212:	2b00      	cmp	r3, #0
 800c214:	d10a      	bne.n	800c22c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21a:	f383 8811 	msr	BASEPRI, r3
 800c21e:	f3bf 8f6f 	isb	sy
 800c222:	f3bf 8f4f 	dsb	sy
 800c226:	60bb      	str	r3, [r7, #8]
}
 800c228:	bf00      	nop
 800c22a:	e7fe      	b.n	800c22a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c230:	1e5a      	subs	r2, r3, #1
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23e:	429a      	cmp	r2, r3
 800c240:	d02c      	beq.n	800c29c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c246:	2b00      	cmp	r3, #0
 800c248:	d128      	bne.n	800c29c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	3304      	adds	r3, #4
 800c24e:	4618      	mov	r0, r3
 800c250:	f7fe fa1e 	bl	800a690 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c260:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c26c:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <xTaskPriorityDisinherit+0xd4>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d903      	bls.n	800c27c <xTaskPriorityDisinherit+0xa4>
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c278:	4a0c      	ldr	r2, [pc, #48]	; (800c2ac <xTaskPriorityDisinherit+0xd4>)
 800c27a:	6013      	str	r3, [r2, #0]
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c280:	4613      	mov	r3, r2
 800c282:	009b      	lsls	r3, r3, #2
 800c284:	4413      	add	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4a09      	ldr	r2, [pc, #36]	; (800c2b0 <xTaskPriorityDisinherit+0xd8>)
 800c28a:	441a      	add	r2, r3
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	3304      	adds	r3, #4
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f7fe f99f 	bl	800a5d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c298:	2301      	movs	r3, #1
 800c29a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c29c:	697b      	ldr	r3, [r7, #20]
	}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	3718      	adds	r7, #24
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20004970 	.word	0x20004970
 800c2ac:	20004e4c 	.word	0x20004e4c
 800c2b0:	20004974 	.word	0x20004974

0800c2b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c2be:	4b21      	ldr	r3, [pc, #132]	; (800c344 <prvAddCurrentTaskToDelayedList+0x90>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2c4:	4b20      	ldr	r3, [pc, #128]	; (800c348 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3304      	adds	r3, #4
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f7fe f9e0 	bl	800a690 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2d6:	d10a      	bne.n	800c2ee <prvAddCurrentTaskToDelayedList+0x3a>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d007      	beq.n	800c2ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2de:	4b1a      	ldr	r3, [pc, #104]	; (800c348 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	4819      	ldr	r0, [pc, #100]	; (800c34c <prvAddCurrentTaskToDelayedList+0x98>)
 800c2e8:	f7fe f975 	bl	800a5d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2ec:	e026      	b.n	800c33c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2f6:	4b14      	ldr	r3, [pc, #80]	; (800c348 <prvAddCurrentTaskToDelayedList+0x94>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2fe:	68ba      	ldr	r2, [r7, #8]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	429a      	cmp	r2, r3
 800c304:	d209      	bcs.n	800c31a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c306:	4b12      	ldr	r3, [pc, #72]	; (800c350 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <prvAddCurrentTaskToDelayedList+0x94>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3304      	adds	r3, #4
 800c310:	4619      	mov	r1, r3
 800c312:	4610      	mov	r0, r2
 800c314:	f7fe f983 	bl	800a61e <vListInsert>
}
 800c318:	e010      	b.n	800c33c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c31a:	4b0e      	ldr	r3, [pc, #56]	; (800c354 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c31c:	681a      	ldr	r2, [r3, #0]
 800c31e:	4b0a      	ldr	r3, [pc, #40]	; (800c348 <prvAddCurrentTaskToDelayedList+0x94>)
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3304      	adds	r3, #4
 800c324:	4619      	mov	r1, r3
 800c326:	4610      	mov	r0, r2
 800c328:	f7fe f979 	bl	800a61e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c32c:	4b0a      	ldr	r3, [pc, #40]	; (800c358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	429a      	cmp	r2, r3
 800c334:	d202      	bcs.n	800c33c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c336:	4a08      	ldr	r2, [pc, #32]	; (800c358 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	6013      	str	r3, [r2, #0]
}
 800c33c:	bf00      	nop
 800c33e:	3710      	adds	r7, #16
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	20004e48 	.word	0x20004e48
 800c348:	20004970 	.word	0x20004970
 800c34c:	20004e30 	.word	0x20004e30
 800c350:	20004e00 	.word	0x20004e00
 800c354:	20004dfc 	.word	0x20004dfc
 800c358:	20004e64 	.word	0x20004e64

0800c35c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b08a      	sub	sp, #40	; 0x28
 800c360:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c366:	f000 fb07 	bl	800c978 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c36a:	4b1c      	ldr	r3, [pc, #112]	; (800c3dc <xTimerCreateTimerTask+0x80>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d021      	beq.n	800c3b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c372:	2300      	movs	r3, #0
 800c374:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c376:	2300      	movs	r3, #0
 800c378:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c37a:	1d3a      	adds	r2, r7, #4
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	f107 030c 	add.w	r3, r7, #12
 800c384:	4618      	mov	r0, r3
 800c386:	f7fd fef5 	bl	800a174 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	9202      	str	r2, [sp, #8]
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	2302      	movs	r3, #2
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	2300      	movs	r3, #0
 800c39a:	460a      	mov	r2, r1
 800c39c:	4910      	ldr	r1, [pc, #64]	; (800c3e0 <xTimerCreateTimerTask+0x84>)
 800c39e:	4811      	ldr	r0, [pc, #68]	; (800c3e4 <xTimerCreateTimerTask+0x88>)
 800c3a0:	f7ff f8de 	bl	800b560 <xTaskCreateStatic>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4a10      	ldr	r2, [pc, #64]	; (800c3e8 <xTimerCreateTimerTask+0x8c>)
 800c3a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c3aa:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <xTimerCreateTimerTask+0x8c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d001      	beq.n	800c3b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d10a      	bne.n	800c3d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c0:	f383 8811 	msr	BASEPRI, r3
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	f3bf 8f4f 	dsb	sy
 800c3cc:	613b      	str	r3, [r7, #16]
}
 800c3ce:	bf00      	nop
 800c3d0:	e7fe      	b.n	800c3d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c3d2:	697b      	ldr	r3, [r7, #20]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}
 800c3dc:	20004ea0 	.word	0x20004ea0
 800c3e0:	08013d8c 	.word	0x08013d8c
 800c3e4:	0800c521 	.word	0x0800c521
 800c3e8:	20004ea4 	.word	0x20004ea4

0800c3ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08a      	sub	sp, #40	; 0x28
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10a      	bne.n	800c41a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	623b      	str	r3, [r7, #32]
}
 800c416:	bf00      	nop
 800c418:	e7fe      	b.n	800c418 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c41a:	4b1a      	ldr	r3, [pc, #104]	; (800c484 <xTimerGenericCommand+0x98>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d02a      	beq.n	800c478 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	2b05      	cmp	r3, #5
 800c432:	dc18      	bgt.n	800c466 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c434:	f7ff feb2 	bl	800c19c <xTaskGetSchedulerState>
 800c438:	4603      	mov	r3, r0
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d109      	bne.n	800c452 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c43e:	4b11      	ldr	r3, [pc, #68]	; (800c484 <xTimerGenericCommand+0x98>)
 800c440:	6818      	ldr	r0, [r3, #0]
 800c442:	f107 0110 	add.w	r1, r7, #16
 800c446:	2300      	movs	r3, #0
 800c448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c44a:	f7fe fca1 	bl	800ad90 <xQueueGenericSend>
 800c44e:	6278      	str	r0, [r7, #36]	; 0x24
 800c450:	e012      	b.n	800c478 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c452:	4b0c      	ldr	r3, [pc, #48]	; (800c484 <xTimerGenericCommand+0x98>)
 800c454:	6818      	ldr	r0, [r3, #0]
 800c456:	f107 0110 	add.w	r1, r7, #16
 800c45a:	2300      	movs	r3, #0
 800c45c:	2200      	movs	r2, #0
 800c45e:	f7fe fc97 	bl	800ad90 <xQueueGenericSend>
 800c462:	6278      	str	r0, [r7, #36]	; 0x24
 800c464:	e008      	b.n	800c478 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c466:	4b07      	ldr	r3, [pc, #28]	; (800c484 <xTimerGenericCommand+0x98>)
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f107 0110 	add.w	r1, r7, #16
 800c46e:	2300      	movs	r3, #0
 800c470:	683a      	ldr	r2, [r7, #0]
 800c472:	f7fe fd8b 	bl	800af8c <xQueueGenericSendFromISR>
 800c476:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3728      	adds	r7, #40	; 0x28
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20004ea0 	.word	0x20004ea0

0800c488 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b088      	sub	sp, #32
 800c48c:	af02      	add	r7, sp, #8
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c492:	4b22      	ldr	r3, [pc, #136]	; (800c51c <prvProcessExpiredTimer+0x94>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	3304      	adds	r3, #4
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe f8f5 	bl	800a690 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ac:	f003 0304 	and.w	r3, r3, #4
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d022      	beq.n	800c4fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	699a      	ldr	r2, [r3, #24]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	18d1      	adds	r1, r2, r3
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	6978      	ldr	r0, [r7, #20]
 800c4c2:	f000 f8d1 	bl	800c668 <prvInsertTimerInActiveList>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d01f      	beq.n	800c50c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	9300      	str	r3, [sp, #0]
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	2100      	movs	r1, #0
 800c4d6:	6978      	ldr	r0, [r7, #20]
 800c4d8:	f7ff ff88 	bl	800c3ec <xTimerGenericCommand>
 800c4dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d113      	bne.n	800c50c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	60fb      	str	r3, [r7, #12]
}
 800c4f6:	bf00      	nop
 800c4f8:	e7fe      	b.n	800c4f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4fa:	697b      	ldr	r3, [r7, #20]
 800c4fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c500:	f023 0301 	bic.w	r3, r3, #1
 800c504:	b2da      	uxtb	r2, r3
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6a1b      	ldr	r3, [r3, #32]
 800c510:	6978      	ldr	r0, [r7, #20]
 800c512:	4798      	blx	r3
}
 800c514:	bf00      	nop
 800c516:	3718      	adds	r7, #24
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	20004e98 	.word	0x20004e98

0800c520 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b084      	sub	sp, #16
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c528:	f107 0308 	add.w	r3, r7, #8
 800c52c:	4618      	mov	r0, r3
 800c52e:	f000 f857 	bl	800c5e0 <prvGetNextExpireTime>
 800c532:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	4619      	mov	r1, r3
 800c538:	68f8      	ldr	r0, [r7, #12]
 800c53a:	f000 f803 	bl	800c544 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c53e:	f000 f8d5 	bl	800c6ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c542:	e7f1      	b.n	800c528 <prvTimerTask+0x8>

0800c544 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
 800c54c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c54e:	f7ff fa43 	bl	800b9d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c552:	f107 0308 	add.w	r3, r7, #8
 800c556:	4618      	mov	r0, r3
 800c558:	f000 f866 	bl	800c628 <prvSampleTimeNow>
 800c55c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d130      	bne.n	800c5c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d10a      	bne.n	800c580 <prvProcessTimerOrBlockTask+0x3c>
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d806      	bhi.n	800c580 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c572:	f7ff fa3f 	bl	800b9f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c576:	68f9      	ldr	r1, [r7, #12]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f7ff ff85 	bl	800c488 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c57e:	e024      	b.n	800c5ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d008      	beq.n	800c598 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c586:	4b13      	ldr	r3, [pc, #76]	; (800c5d4 <prvProcessTimerOrBlockTask+0x90>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <prvProcessTimerOrBlockTask+0x50>
 800c590:	2301      	movs	r3, #1
 800c592:	e000      	b.n	800c596 <prvProcessTimerOrBlockTask+0x52>
 800c594:	2300      	movs	r3, #0
 800c596:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c598:	4b0f      	ldr	r3, [pc, #60]	; (800c5d8 <prvProcessTimerOrBlockTask+0x94>)
 800c59a:	6818      	ldr	r0, [r3, #0]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	1ad3      	subs	r3, r2, r3
 800c5a2:	683a      	ldr	r2, [r7, #0]
 800c5a4:	4619      	mov	r1, r3
 800c5a6:	f7fe ffa7 	bl	800b4f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c5aa:	f7ff fa23 	bl	800b9f4 <xTaskResumeAll>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d10a      	bne.n	800c5ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c5b4:	4b09      	ldr	r3, [pc, #36]	; (800c5dc <prvProcessTimerOrBlockTask+0x98>)
 800c5b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5ba:	601a      	str	r2, [r3, #0]
 800c5bc:	f3bf 8f4f 	dsb	sy
 800c5c0:	f3bf 8f6f 	isb	sy
}
 800c5c4:	e001      	b.n	800c5ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c5c6:	f7ff fa15 	bl	800b9f4 <xTaskResumeAll>
}
 800c5ca:	bf00      	nop
 800c5cc:	3710      	adds	r7, #16
 800c5ce:	46bd      	mov	sp, r7
 800c5d0:	bd80      	pop	{r7, pc}
 800c5d2:	bf00      	nop
 800c5d4:	20004e9c 	.word	0x20004e9c
 800c5d8:	20004ea0 	.word	0x20004ea0
 800c5dc:	e000ed04 	.word	0xe000ed04

0800c5e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b085      	sub	sp, #20
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5e8:	4b0e      	ldr	r3, [pc, #56]	; (800c624 <prvGetNextExpireTime+0x44>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <prvGetNextExpireTime+0x16>
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	e000      	b.n	800c5f8 <prvGetNextExpireTime+0x18>
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d105      	bne.n	800c610 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c604:	4b07      	ldr	r3, [pc, #28]	; (800c624 <prvGetNextExpireTime+0x44>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	e001      	b.n	800c614 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c610:	2300      	movs	r3, #0
 800c612:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c614:	68fb      	ldr	r3, [r7, #12]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	20004e98 	.word	0x20004e98

0800c628 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b084      	sub	sp, #16
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c630:	f7ff fa7e 	bl	800bb30 <xTaskGetTickCount>
 800c634:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c636:	4b0b      	ldr	r3, [pc, #44]	; (800c664 <prvSampleTimeNow+0x3c>)
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	68fa      	ldr	r2, [r7, #12]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d205      	bcs.n	800c64c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c640:	f000 f936 	bl	800c8b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2201      	movs	r2, #1
 800c648:	601a      	str	r2, [r3, #0]
 800c64a:	e002      	b.n	800c652 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2200      	movs	r2, #0
 800c650:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c652:	4a04      	ldr	r2, [pc, #16]	; (800c664 <prvSampleTimeNow+0x3c>)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c658:	68fb      	ldr	r3, [r7, #12]
}
 800c65a:	4618      	mov	r0, r3
 800c65c:	3710      	adds	r7, #16
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	20004ea8 	.word	0x20004ea8

0800c668 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b086      	sub	sp, #24
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c676:	2300      	movs	r3, #0
 800c678:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	68ba      	ldr	r2, [r7, #8]
 800c67e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	68fa      	ldr	r2, [r7, #12]
 800c684:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d812      	bhi.n	800c6b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c68e:	687a      	ldr	r2, [r7, #4]
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	1ad2      	subs	r2, r2, r3
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d302      	bcc.n	800c6a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c69c:	2301      	movs	r3, #1
 800c69e:	617b      	str	r3, [r7, #20]
 800c6a0:	e01b      	b.n	800c6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c6a2:	4b10      	ldr	r3, [pc, #64]	; (800c6e4 <prvInsertTimerInActiveList+0x7c>)
 800c6a4:	681a      	ldr	r2, [r3, #0]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	4610      	mov	r0, r2
 800c6ae:	f7fd ffb6 	bl	800a61e <vListInsert>
 800c6b2:	e012      	b.n	800c6da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	429a      	cmp	r2, r3
 800c6ba:	d206      	bcs.n	800c6ca <prvInsertTimerInActiveList+0x62>
 800c6bc:	68ba      	ldr	r2, [r7, #8]
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d302      	bcc.n	800c6ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c6c4:	2301      	movs	r3, #1
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	e007      	b.n	800c6da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c6ca:	4b07      	ldr	r3, [pc, #28]	; (800c6e8 <prvInsertTimerInActiveList+0x80>)
 800c6cc:	681a      	ldr	r2, [r3, #0]
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4610      	mov	r0, r2
 800c6d6:	f7fd ffa2 	bl	800a61e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c6da:	697b      	ldr	r3, [r7, #20]
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3718      	adds	r7, #24
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20004e9c 	.word	0x20004e9c
 800c6e8:	20004e98 	.word	0x20004e98

0800c6ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08e      	sub	sp, #56	; 0x38
 800c6f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6f2:	e0ca      	b.n	800c88a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	da18      	bge.n	800c72c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c6fa:	1d3b      	adds	r3, r7, #4
 800c6fc:	3304      	adds	r3, #4
 800c6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c702:	2b00      	cmp	r3, #0
 800c704:	d10a      	bne.n	800c71c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	61fb      	str	r3, [r7, #28]
}
 800c718:	bf00      	nop
 800c71a:	e7fe      	b.n	800c71a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c722:	6850      	ldr	r0, [r2, #4]
 800c724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c726:	6892      	ldr	r2, [r2, #8]
 800c728:	4611      	mov	r1, r2
 800c72a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	f2c0 80aa 	blt.w	800c888 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	695b      	ldr	r3, [r3, #20]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d004      	beq.n	800c74a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	3304      	adds	r3, #4
 800c744:	4618      	mov	r0, r3
 800c746:	f7fd ffa3 	bl	800a690 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c74a:	463b      	mov	r3, r7
 800c74c:	4618      	mov	r0, r3
 800c74e:	f7ff ff6b 	bl	800c628 <prvSampleTimeNow>
 800c752:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b09      	cmp	r3, #9
 800c758:	f200 8097 	bhi.w	800c88a <prvProcessReceivedCommands+0x19e>
 800c75c:	a201      	add	r2, pc, #4	; (adr r2, 800c764 <prvProcessReceivedCommands+0x78>)
 800c75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c762:	bf00      	nop
 800c764:	0800c78d 	.word	0x0800c78d
 800c768:	0800c78d 	.word	0x0800c78d
 800c76c:	0800c78d 	.word	0x0800c78d
 800c770:	0800c801 	.word	0x0800c801
 800c774:	0800c815 	.word	0x0800c815
 800c778:	0800c85f 	.word	0x0800c85f
 800c77c:	0800c78d 	.word	0x0800c78d
 800c780:	0800c78d 	.word	0x0800c78d
 800c784:	0800c801 	.word	0x0800c801
 800c788:	0800c815 	.word	0x0800c815
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c78e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c792:	f043 0301 	orr.w	r3, r3, #1
 800c796:	b2da      	uxtb	r2, r3
 800c798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c79a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	18d1      	adds	r1, r2, r3
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7ac:	f7ff ff5c 	bl	800c668 <prvInsertTimerInActiveList>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d069      	beq.n	800c88a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c7b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b8:	6a1b      	ldr	r3, [r3, #32]
 800c7ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c7c4:	f003 0304 	and.w	r3, r3, #4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d05e      	beq.n	800c88a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d0:	699b      	ldr	r3, [r3, #24]
 800c7d2:	441a      	add	r2, r3
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	2300      	movs	r3, #0
 800c7da:	2100      	movs	r1, #0
 800c7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7de:	f7ff fe05 	bl	800c3ec <xTimerGenericCommand>
 800c7e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c7e4:	6a3b      	ldr	r3, [r7, #32]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d14f      	bne.n	800c88a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ee:	f383 8811 	msr	BASEPRI, r3
 800c7f2:	f3bf 8f6f 	isb	sy
 800c7f6:	f3bf 8f4f 	dsb	sy
 800c7fa:	61bb      	str	r3, [r7, #24]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c806:	f023 0301 	bic.w	r3, r3, #1
 800c80a:	b2da      	uxtb	r2, r3
 800c80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c812:	e03a      	b.n	800c88a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c81a:	f043 0301 	orr.w	r3, r3, #1
 800c81e:	b2da      	uxtb	r2, r3
 800c820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c826:	68ba      	ldr	r2, [r7, #8]
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d10a      	bne.n	800c84a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c838:	f383 8811 	msr	BASEPRI, r3
 800c83c:	f3bf 8f6f 	isb	sy
 800c840:	f3bf 8f4f 	dsb	sy
 800c844:	617b      	str	r3, [r7, #20]
}
 800c846:	bf00      	nop
 800c848:	e7fe      	b.n	800c848 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	699a      	ldr	r2, [r3, #24]
 800c84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c850:	18d1      	adds	r1, r2, r3
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c856:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c858:	f7ff ff06 	bl	800c668 <prvInsertTimerInActiveList>
					break;
 800c85c:	e015      	b.n	800c88a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c860:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c864:	f003 0302 	and.w	r3, r3, #2
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d103      	bne.n	800c874 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c86c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c86e:	f7fd fd67 	bl	800a340 <vPortFree>
 800c872:	e00a      	b.n	800c88a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c87a:	f023 0301 	bic.w	r3, r3, #1
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c882:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c886:	e000      	b.n	800c88a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c888:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c88a:	4b08      	ldr	r3, [pc, #32]	; (800c8ac <prvProcessReceivedCommands+0x1c0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	1d39      	adds	r1, r7, #4
 800c890:	2200      	movs	r2, #0
 800c892:	4618      	mov	r0, r3
 800c894:	f7fe fc16 	bl	800b0c4 <xQueueReceive>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	f47f af2a 	bne.w	800c6f4 <prvProcessReceivedCommands+0x8>
	}
}
 800c8a0:	bf00      	nop
 800c8a2:	bf00      	nop
 800c8a4:	3730      	adds	r7, #48	; 0x30
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	20004ea0 	.word	0x20004ea0

0800c8b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b088      	sub	sp, #32
 800c8b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c8b6:	e048      	b.n	800c94a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c8b8:	4b2d      	ldr	r3, [pc, #180]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68db      	ldr	r3, [r3, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8c2:	4b2b      	ldr	r3, [pc, #172]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	3304      	adds	r3, #4
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f7fd fedd 	bl	800a690 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	6a1b      	ldr	r3, [r3, #32]
 800c8da:	68f8      	ldr	r0, [r7, #12]
 800c8dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8e4:	f003 0304 	and.w	r3, r3, #4
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d02e      	beq.n	800c94a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	699b      	ldr	r3, [r3, #24]
 800c8f0:	693a      	ldr	r2, [r7, #16]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c8f6:	68ba      	ldr	r2, [r7, #8]
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d90e      	bls.n	800c91c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	68ba      	ldr	r2, [r7, #8]
 800c902:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	68fa      	ldr	r2, [r7, #12]
 800c908:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c90a:	4b19      	ldr	r3, [pc, #100]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c90c:	681a      	ldr	r2, [r3, #0]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	3304      	adds	r3, #4
 800c912:	4619      	mov	r1, r3
 800c914:	4610      	mov	r0, r2
 800c916:	f7fd fe82 	bl	800a61e <vListInsert>
 800c91a:	e016      	b.n	800c94a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c91c:	2300      	movs	r3, #0
 800c91e:	9300      	str	r3, [sp, #0]
 800c920:	2300      	movs	r3, #0
 800c922:	693a      	ldr	r2, [r7, #16]
 800c924:	2100      	movs	r1, #0
 800c926:	68f8      	ldr	r0, [r7, #12]
 800c928:	f7ff fd60 	bl	800c3ec <xTimerGenericCommand>
 800c92c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d10a      	bne.n	800c94a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	f383 8811 	msr	BASEPRI, r3
 800c93c:	f3bf 8f6f 	isb	sy
 800c940:	f3bf 8f4f 	dsb	sy
 800c944:	603b      	str	r3, [r7, #0]
}
 800c946:	bf00      	nop
 800c948:	e7fe      	b.n	800c948 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c94a:	4b09      	ldr	r3, [pc, #36]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d1b1      	bne.n	800c8b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c954:	4b06      	ldr	r3, [pc, #24]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c95a:	4b06      	ldr	r3, [pc, #24]	; (800c974 <prvSwitchTimerLists+0xc4>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	4a04      	ldr	r2, [pc, #16]	; (800c970 <prvSwitchTimerLists+0xc0>)
 800c960:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c962:	4a04      	ldr	r2, [pc, #16]	; (800c974 <prvSwitchTimerLists+0xc4>)
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	6013      	str	r3, [r2, #0]
}
 800c968:	bf00      	nop
 800c96a:	3718      	adds	r7, #24
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	20004e98 	.word	0x20004e98
 800c974:	20004e9c 	.word	0x20004e9c

0800c978 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c97e:	f7fd ffe1 	bl	800a944 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c982:	4b15      	ldr	r3, [pc, #84]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d120      	bne.n	800c9cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c98a:	4814      	ldr	r0, [pc, #80]	; (800c9dc <prvCheckForValidListAndQueue+0x64>)
 800c98c:	f7fd fdf6 	bl	800a57c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c990:	4813      	ldr	r0, [pc, #76]	; (800c9e0 <prvCheckForValidListAndQueue+0x68>)
 800c992:	f7fd fdf3 	bl	800a57c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c996:	4b13      	ldr	r3, [pc, #76]	; (800c9e4 <prvCheckForValidListAndQueue+0x6c>)
 800c998:	4a10      	ldr	r2, [pc, #64]	; (800c9dc <prvCheckForValidListAndQueue+0x64>)
 800c99a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c99c:	4b12      	ldr	r3, [pc, #72]	; (800c9e8 <prvCheckForValidListAndQueue+0x70>)
 800c99e:	4a10      	ldr	r2, [pc, #64]	; (800c9e0 <prvCheckForValidListAndQueue+0x68>)
 800c9a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	9300      	str	r3, [sp, #0]
 800c9a6:	4b11      	ldr	r3, [pc, #68]	; (800c9ec <prvCheckForValidListAndQueue+0x74>)
 800c9a8:	4a11      	ldr	r2, [pc, #68]	; (800c9f0 <prvCheckForValidListAndQueue+0x78>)
 800c9aa:	2110      	movs	r1, #16
 800c9ac:	200a      	movs	r0, #10
 800c9ae:	f7fe f953 	bl	800ac58 <xQueueGenericCreateStatic>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4a08      	ldr	r2, [pc, #32]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c9b8:	4b07      	ldr	r3, [pc, #28]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d005      	beq.n	800c9cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c9c0:	4b05      	ldr	r3, [pc, #20]	; (800c9d8 <prvCheckForValidListAndQueue+0x60>)
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	490b      	ldr	r1, [pc, #44]	; (800c9f4 <prvCheckForValidListAndQueue+0x7c>)
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7fe fd6c 	bl	800b4a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c9cc:	f7fd ffea 	bl	800a9a4 <vPortExitCritical>
}
 800c9d0:	bf00      	nop
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	20004ea0 	.word	0x20004ea0
 800c9dc:	20004e70 	.word	0x20004e70
 800c9e0:	20004e84 	.word	0x20004e84
 800c9e4:	20004e98 	.word	0x20004e98
 800c9e8:	20004e9c 	.word	0x20004e9c
 800c9ec:	20004f4c 	.word	0x20004f4c
 800c9f0:	20004eac 	.word	0x20004eac
 800c9f4:	08013d94 	.word	0x08013d94

0800c9f8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	b084      	sub	sp, #16
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
 800ca00:	460b      	mov	r3, r1
 800ca02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca08:	f002 fc96 	bl	800f338 <USBD_static_malloc>
 800ca0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d109      	bne.n	800ca28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	32b0      	adds	r2, #176	; 0xb0
 800ca1e:	2100      	movs	r1, #0
 800ca20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ca24:	2302      	movs	r3, #2
 800ca26:	e0d4      	b.n	800cbd2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ca28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ca2c:	2100      	movs	r1, #0
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f002 fcfe 	bl	800f430 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	32b0      	adds	r2, #176	; 0xb0
 800ca3e:	68f9      	ldr	r1, [r7, #12]
 800ca40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	32b0      	adds	r2, #176	; 0xb0
 800ca4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	7c1b      	ldrb	r3, [r3, #16]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d138      	bne.n	800cad2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca60:	4b5e      	ldr	r3, [pc, #376]	; (800cbdc <USBD_CDC_Init+0x1e4>)
 800ca62:	7819      	ldrb	r1, [r3, #0]
 800ca64:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca68:	2202      	movs	r2, #2
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f002 fb41 	bl	800f0f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca70:	4b5a      	ldr	r3, [pc, #360]	; (800cbdc <USBD_CDC_Init+0x1e4>)
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	f003 020f 	and.w	r2, r3, #15
 800ca78:	6879      	ldr	r1, [r7, #4]
 800ca7a:	4613      	mov	r3, r2
 800ca7c:	009b      	lsls	r3, r3, #2
 800ca7e:	4413      	add	r3, r2
 800ca80:	009b      	lsls	r3, r3, #2
 800ca82:	440b      	add	r3, r1
 800ca84:	3324      	adds	r3, #36	; 0x24
 800ca86:	2201      	movs	r2, #1
 800ca88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca8a:	4b55      	ldr	r3, [pc, #340]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800ca8c:	7819      	ldrb	r1, [r3, #0]
 800ca8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca92:	2202      	movs	r2, #2
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f002 fb2c 	bl	800f0f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca9a:	4b51      	ldr	r3, [pc, #324]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	f003 020f 	and.w	r2, r3, #15
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	440b      	add	r3, r1
 800caae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cab2:	2201      	movs	r2, #1
 800cab4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cab6:	4b4b      	ldr	r3, [pc, #300]	; (800cbe4 <USBD_CDC_Init+0x1ec>)
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	f003 020f 	and.w	r2, r3, #15
 800cabe:	6879      	ldr	r1, [r7, #4]
 800cac0:	4613      	mov	r3, r2
 800cac2:	009b      	lsls	r3, r3, #2
 800cac4:	4413      	add	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	440b      	add	r3, r1
 800caca:	3326      	adds	r3, #38	; 0x26
 800cacc:	2210      	movs	r2, #16
 800cace:	801a      	strh	r2, [r3, #0]
 800cad0:	e035      	b.n	800cb3e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cad2:	4b42      	ldr	r3, [pc, #264]	; (800cbdc <USBD_CDC_Init+0x1e4>)
 800cad4:	7819      	ldrb	r1, [r3, #0]
 800cad6:	2340      	movs	r3, #64	; 0x40
 800cad8:	2202      	movs	r2, #2
 800cada:	6878      	ldr	r0, [r7, #4]
 800cadc:	f002 fb09 	bl	800f0f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cae0:	4b3e      	ldr	r3, [pc, #248]	; (800cbdc <USBD_CDC_Init+0x1e4>)
 800cae2:	781b      	ldrb	r3, [r3, #0]
 800cae4:	f003 020f 	and.w	r2, r3, #15
 800cae8:	6879      	ldr	r1, [r7, #4]
 800caea:	4613      	mov	r3, r2
 800caec:	009b      	lsls	r3, r3, #2
 800caee:	4413      	add	r3, r2
 800caf0:	009b      	lsls	r3, r3, #2
 800caf2:	440b      	add	r3, r1
 800caf4:	3324      	adds	r3, #36	; 0x24
 800caf6:	2201      	movs	r2, #1
 800caf8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cafa:	4b39      	ldr	r3, [pc, #228]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800cafc:	7819      	ldrb	r1, [r3, #0]
 800cafe:	2340      	movs	r3, #64	; 0x40
 800cb00:	2202      	movs	r2, #2
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f002 faf5 	bl	800f0f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb08:	4b35      	ldr	r3, [pc, #212]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	f003 020f 	and.w	r2, r3, #15
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	4613      	mov	r3, r2
 800cb14:	009b      	lsls	r3, r3, #2
 800cb16:	4413      	add	r3, r2
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	440b      	add	r3, r1
 800cb1c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cb20:	2201      	movs	r2, #1
 800cb22:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb24:	4b2f      	ldr	r3, [pc, #188]	; (800cbe4 <USBD_CDC_Init+0x1ec>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	f003 020f 	and.w	r2, r3, #15
 800cb2c:	6879      	ldr	r1, [r7, #4]
 800cb2e:	4613      	mov	r3, r2
 800cb30:	009b      	lsls	r3, r3, #2
 800cb32:	4413      	add	r3, r2
 800cb34:	009b      	lsls	r3, r3, #2
 800cb36:	440b      	add	r3, r1
 800cb38:	3326      	adds	r3, #38	; 0x26
 800cb3a:	2210      	movs	r2, #16
 800cb3c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cb3e:	4b29      	ldr	r3, [pc, #164]	; (800cbe4 <USBD_CDC_Init+0x1ec>)
 800cb40:	7819      	ldrb	r1, [r3, #0]
 800cb42:	2308      	movs	r3, #8
 800cb44:	2203      	movs	r2, #3
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f002 fad3 	bl	800f0f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cb4c:	4b25      	ldr	r3, [pc, #148]	; (800cbe4 <USBD_CDC_Init+0x1ec>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	f003 020f 	and.w	r2, r3, #15
 800cb54:	6879      	ldr	r1, [r7, #4]
 800cb56:	4613      	mov	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4413      	add	r3, r2
 800cb5c:	009b      	lsls	r3, r3, #2
 800cb5e:	440b      	add	r3, r1
 800cb60:	3324      	adds	r3, #36	; 0x24
 800cb62:	2201      	movs	r2, #1
 800cb64:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	33b0      	adds	r3, #176	; 0xb0
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2200      	movs	r2, #0
 800cb86:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb9c:	2302      	movs	r3, #2
 800cb9e:	e018      	b.n	800cbd2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	7c1b      	ldrb	r3, [r3, #16]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d10a      	bne.n	800cbbe <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cba8:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800cbaa:	7819      	ldrb	r1, [r3, #0]
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f002 fb8a 	bl	800f2d0 <USBD_LL_PrepareReceive>
 800cbbc:	e008      	b.n	800cbd0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cbbe:	4b08      	ldr	r3, [pc, #32]	; (800cbe0 <USBD_CDC_Init+0x1e8>)
 800cbc0:	7819      	ldrb	r1, [r3, #0]
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbc8:	2340      	movs	r3, #64	; 0x40
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f002 fb80 	bl	800f2d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbd0:	2300      	movs	r3, #0
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20000113 	.word	0x20000113
 800cbe0:	20000114 	.word	0x20000114
 800cbe4:	20000115 	.word	0x20000115

0800cbe8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b082      	sub	sp, #8
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
 800cbf0:	460b      	mov	r3, r1
 800cbf2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cbf4:	4b3a      	ldr	r3, [pc, #232]	; (800cce0 <USBD_CDC_DeInit+0xf8>)
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f002 fa9f 	bl	800f13e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cc00:	4b37      	ldr	r3, [pc, #220]	; (800cce0 <USBD_CDC_DeInit+0xf8>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	f003 020f 	and.w	r2, r3, #15
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	440b      	add	r3, r1
 800cc14:	3324      	adds	r3, #36	; 0x24
 800cc16:	2200      	movs	r2, #0
 800cc18:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cc1a:	4b32      	ldr	r3, [pc, #200]	; (800cce4 <USBD_CDC_DeInit+0xfc>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	4619      	mov	r1, r3
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f002 fa8c 	bl	800f13e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cc26:	4b2f      	ldr	r3, [pc, #188]	; (800cce4 <USBD_CDC_DeInit+0xfc>)
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	f003 020f 	and.w	r2, r3, #15
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	4613      	mov	r3, r2
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	440b      	add	r3, r1
 800cc3a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc3e:	2200      	movs	r2, #0
 800cc40:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cc42:	4b29      	ldr	r3, [pc, #164]	; (800cce8 <USBD_CDC_DeInit+0x100>)
 800cc44:	781b      	ldrb	r3, [r3, #0]
 800cc46:	4619      	mov	r1, r3
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f002 fa78 	bl	800f13e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cc4e:	4b26      	ldr	r3, [pc, #152]	; (800cce8 <USBD_CDC_DeInit+0x100>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	f003 020f 	and.w	r2, r3, #15
 800cc56:	6879      	ldr	r1, [r7, #4]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	440b      	add	r3, r1
 800cc62:	3324      	adds	r3, #36	; 0x24
 800cc64:	2200      	movs	r2, #0
 800cc66:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc68:	4b1f      	ldr	r3, [pc, #124]	; (800cce8 <USBD_CDC_DeInit+0x100>)
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	f003 020f 	and.w	r2, r3, #15
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	4613      	mov	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	440b      	add	r3, r1
 800cc7c:	3326      	adds	r3, #38	; 0x26
 800cc7e:	2200      	movs	r2, #0
 800cc80:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	32b0      	adds	r2, #176	; 0xb0
 800cc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01f      	beq.n	800ccd4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	33b0      	adds	r3, #176	; 0xb0
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	4413      	add	r3, r2
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	685b      	ldr	r3, [r3, #4]
 800cca6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	32b0      	adds	r2, #176	; 0xb0
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f002 fb4c 	bl	800f354 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	32b0      	adds	r2, #176	; 0xb0
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000113 	.word	0x20000113
 800cce4:	20000114 	.word	0x20000114
 800cce8:	20000115 	.word	0x20000115

0800ccec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b086      	sub	sp, #24
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	6078      	str	r0, [r7, #4]
 800ccf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	32b0      	adds	r2, #176	; 0xb0
 800cd00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd04:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cd06:	2300      	movs	r3, #0
 800cd08:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d101      	bne.n	800cd1c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cd18:	2303      	movs	r3, #3
 800cd1a:	e0bf      	b.n	800ce9c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d050      	beq.n	800cdca <USBD_CDC_Setup+0xde>
 800cd28:	2b20      	cmp	r3, #32
 800cd2a:	f040 80af 	bne.w	800ce8c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	88db      	ldrh	r3, [r3, #6]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d03a      	beq.n	800cdac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	b25b      	sxtb	r3, r3
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	da1b      	bge.n	800cd78 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd46:	687a      	ldr	r2, [r7, #4]
 800cd48:	33b0      	adds	r3, #176	; 0xb0
 800cd4a:	009b      	lsls	r3, r3, #2
 800cd4c:	4413      	add	r3, r2
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd56:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	88d2      	ldrh	r2, [r2, #6]
 800cd5c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	88db      	ldrh	r3, [r3, #6]
 800cd62:	2b07      	cmp	r3, #7
 800cd64:	bf28      	it	cs
 800cd66:	2307      	movcs	r3, #7
 800cd68:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	89fa      	ldrh	r2, [r7, #14]
 800cd6e:	4619      	mov	r1, r3
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f001 fd89 	bl	800e888 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd76:	e090      	b.n	800ce9a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	785a      	ldrb	r2, [r3, #1]
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	88db      	ldrh	r3, [r3, #6]
 800cd86:	2b3f      	cmp	r3, #63	; 0x3f
 800cd88:	d803      	bhi.n	800cd92 <USBD_CDC_Setup+0xa6>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	88db      	ldrh	r3, [r3, #6]
 800cd8e:	b2da      	uxtb	r2, r3
 800cd90:	e000      	b.n	800cd94 <USBD_CDC_Setup+0xa8>
 800cd92:	2240      	movs	r2, #64	; 0x40
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd9a:	6939      	ldr	r1, [r7, #16]
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cda2:	461a      	mov	r2, r3
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f001 fd9b 	bl	800e8e0 <USBD_CtlPrepareRx>
      break;
 800cdaa:	e076      	b.n	800ce9a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	33b0      	adds	r3, #176	; 0xb0
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4413      	add	r3, r2
 800cdba:	685b      	ldr	r3, [r3, #4]
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	7850      	ldrb	r0, [r2, #1]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	4798      	blx	r3
      break;
 800cdc8:	e067      	b.n	800ce9a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	785b      	ldrb	r3, [r3, #1]
 800cdce:	2b0b      	cmp	r3, #11
 800cdd0:	d851      	bhi.n	800ce76 <USBD_CDC_Setup+0x18a>
 800cdd2:	a201      	add	r2, pc, #4	; (adr r2, 800cdd8 <USBD_CDC_Setup+0xec>)
 800cdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdd8:	0800ce09 	.word	0x0800ce09
 800cddc:	0800ce85 	.word	0x0800ce85
 800cde0:	0800ce77 	.word	0x0800ce77
 800cde4:	0800ce77 	.word	0x0800ce77
 800cde8:	0800ce77 	.word	0x0800ce77
 800cdec:	0800ce77 	.word	0x0800ce77
 800cdf0:	0800ce77 	.word	0x0800ce77
 800cdf4:	0800ce77 	.word	0x0800ce77
 800cdf8:	0800ce77 	.word	0x0800ce77
 800cdfc:	0800ce77 	.word	0x0800ce77
 800ce00:	0800ce33 	.word	0x0800ce33
 800ce04:	0800ce5d 	.word	0x0800ce5d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce0e:	b2db      	uxtb	r3, r3
 800ce10:	2b03      	cmp	r3, #3
 800ce12:	d107      	bne.n	800ce24 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ce14:	f107 030a 	add.w	r3, r7, #10
 800ce18:	2202      	movs	r2, #2
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	f001 fd33 	bl	800e888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce22:	e032      	b.n	800ce8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f001 fcbd 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce2c:	2303      	movs	r3, #3
 800ce2e:	75fb      	strb	r3, [r7, #23]
          break;
 800ce30:	e02b      	b.n	800ce8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce38:	b2db      	uxtb	r3, r3
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d107      	bne.n	800ce4e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ce3e:	f107 030d 	add.w	r3, r7, #13
 800ce42:	2201      	movs	r2, #1
 800ce44:	4619      	mov	r1, r3
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f001 fd1e 	bl	800e888 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ce4c:	e01d      	b.n	800ce8a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 fca8 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce56:	2303      	movs	r3, #3
 800ce58:	75fb      	strb	r3, [r7, #23]
          break;
 800ce5a:	e016      	b.n	800ce8a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce62:	b2db      	uxtb	r3, r3
 800ce64:	2b03      	cmp	r3, #3
 800ce66:	d00f      	beq.n	800ce88 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ce68:	6839      	ldr	r1, [r7, #0]
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f001 fc9b 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce70:	2303      	movs	r3, #3
 800ce72:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce74:	e008      	b.n	800ce88 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce76:	6839      	ldr	r1, [r7, #0]
 800ce78:	6878      	ldr	r0, [r7, #4]
 800ce7a:	f001 fc94 	bl	800e7a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	75fb      	strb	r3, [r7, #23]
          break;
 800ce82:	e002      	b.n	800ce8a <USBD_CDC_Setup+0x19e>
          break;
 800ce84:	bf00      	nop
 800ce86:	e008      	b.n	800ce9a <USBD_CDC_Setup+0x1ae>
          break;
 800ce88:	bf00      	nop
      }
      break;
 800ce8a:	e006      	b.n	800ce9a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce8c:	6839      	ldr	r1, [r7, #0]
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 fc89 	bl	800e7a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce94:	2303      	movs	r3, #3
 800ce96:	75fb      	strb	r3, [r7, #23]
      break;
 800ce98:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce9a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	3718      	adds	r7, #24
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bd80      	pop	{r7, pc}

0800cea4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	460b      	mov	r3, r1
 800ceae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ceb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	32b0      	adds	r2, #176	; 0xb0
 800cec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d101      	bne.n	800cece <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ceca:	2303      	movs	r3, #3
 800cecc:	e065      	b.n	800cf9a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	32b0      	adds	r2, #176	; 0xb0
 800ced8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cedc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cede:	78fb      	ldrb	r3, [r7, #3]
 800cee0:	f003 020f 	and.w	r2, r3, #15
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	440b      	add	r3, r1
 800cef0:	3318      	adds	r3, #24
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d02f      	beq.n	800cf58 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	f003 020f 	and.w	r2, r3, #15
 800cefe:	6879      	ldr	r1, [r7, #4]
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	440b      	add	r3, r1
 800cf0a:	3318      	adds	r3, #24
 800cf0c:	681a      	ldr	r2, [r3, #0]
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	f003 010f 	and.w	r1, r3, #15
 800cf14:	68f8      	ldr	r0, [r7, #12]
 800cf16:	460b      	mov	r3, r1
 800cf18:	00db      	lsls	r3, r3, #3
 800cf1a:	440b      	add	r3, r1
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4403      	add	r3, r0
 800cf20:	3348      	adds	r3, #72	; 0x48
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	fbb2 f1f3 	udiv	r1, r2, r3
 800cf28:	fb01 f303 	mul.w	r3, r1, r3
 800cf2c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d112      	bne.n	800cf58 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cf32:	78fb      	ldrb	r3, [r7, #3]
 800cf34:	f003 020f 	and.w	r2, r3, #15
 800cf38:	6879      	ldr	r1, [r7, #4]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	4413      	add	r3, r2
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	440b      	add	r3, r1
 800cf44:	3318      	adds	r3, #24
 800cf46:	2200      	movs	r2, #0
 800cf48:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cf4a:	78f9      	ldrb	r1, [r7, #3]
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	2200      	movs	r2, #0
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f002 f99c 	bl	800f28e <USBD_LL_Transmit>
 800cf56:	e01f      	b.n	800cf98 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2200      	movs	r2, #0
 800cf5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf66:	687a      	ldr	r2, [r7, #4]
 800cf68:	33b0      	adds	r3, #176	; 0xb0
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	685b      	ldr	r3, [r3, #4]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d010      	beq.n	800cf98 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf7c:	687a      	ldr	r2, [r7, #4]
 800cf7e:	33b0      	adds	r3, #176	; 0xb0
 800cf80:	009b      	lsls	r3, r3, #2
 800cf82:	4413      	add	r3, r2
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cf8e:	68ba      	ldr	r2, [r7, #8]
 800cf90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf98:	2300      	movs	r3, #0
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}

0800cfa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfa2:	b580      	push	{r7, lr}
 800cfa4:	b084      	sub	sp, #16
 800cfa6:	af00      	add	r7, sp, #0
 800cfa8:	6078      	str	r0, [r7, #4]
 800cfaa:	460b      	mov	r3, r1
 800cfac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	32b0      	adds	r2, #176	; 0xb0
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32b0      	adds	r2, #176	; 0xb0
 800cfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d101      	bne.n	800cfd4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfd0:	2303      	movs	r3, #3
 800cfd2:	e01a      	b.n	800d00a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cfd4:	78fb      	ldrb	r3, [r7, #3]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	6878      	ldr	r0, [r7, #4]
 800cfda:	f002 f99a 	bl	800f312 <USBD_LL_GetRxDataSize>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	33b0      	adds	r3, #176	; 0xb0
 800cff0:	009b      	lsls	r3, r3, #2
 800cff2:	4413      	add	r3, r2
 800cff4:	685b      	ldr	r3, [r3, #4]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	68fa      	ldr	r2, [r7, #12]
 800cffa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d004:	4611      	mov	r1, r2
 800d006:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d008:	2300      	movs	r3, #0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}

0800d012 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d012:	b580      	push	{r7, lr}
 800d014:	b084      	sub	sp, #16
 800d016:	af00      	add	r7, sp, #0
 800d018:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	32b0      	adds	r2, #176	; 0xb0
 800d024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d028:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d101      	bne.n	800d034 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d030:	2303      	movs	r3, #3
 800d032:	e025      	b.n	800d080 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d03a:	687a      	ldr	r2, [r7, #4]
 800d03c:	33b0      	adds	r3, #176	; 0xb0
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	685b      	ldr	r3, [r3, #4]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d01a      	beq.n	800d07e <USBD_CDC_EP0_RxReady+0x6c>
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d04e:	2bff      	cmp	r3, #255	; 0xff
 800d050:	d015      	beq.n	800d07e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d058:	687a      	ldr	r2, [r7, #4]
 800d05a:	33b0      	adds	r3, #176	; 0xb0
 800d05c:	009b      	lsls	r3, r3, #2
 800d05e:	4413      	add	r3, r2
 800d060:	685b      	ldr	r3, [r3, #4]
 800d062:	689b      	ldr	r3, [r3, #8]
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d06a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d06c:	68fa      	ldr	r2, [r7, #12]
 800d06e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d072:	b292      	uxth	r2, r2
 800d074:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	22ff      	movs	r2, #255	; 0xff
 800d07a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b086      	sub	sp, #24
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d090:	2182      	movs	r1, #130	; 0x82
 800d092:	4818      	ldr	r0, [pc, #96]	; (800d0f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d094:	f000 fd4f 	bl	800db36 <USBD_GetEpDesc>
 800d098:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d09a:	2101      	movs	r1, #1
 800d09c:	4815      	ldr	r0, [pc, #84]	; (800d0f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d09e:	f000 fd4a 	bl	800db36 <USBD_GetEpDesc>
 800d0a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0a4:	2181      	movs	r1, #129	; 0x81
 800d0a6:	4813      	ldr	r0, [pc, #76]	; (800d0f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d0a8:	f000 fd45 	bl	800db36 <USBD_GetEpDesc>
 800d0ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	2210      	movs	r2, #16
 800d0b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d006      	beq.n	800d0ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0c8:	711a      	strb	r2, [r3, #4]
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d006      	beq.n	800d0e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d0dc:	711a      	strb	r2, [r3, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2243      	movs	r2, #67	; 0x43
 800d0e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d0e8:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3718      	adds	r7, #24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}
 800d0f2:	bf00      	nop
 800d0f4:	200000d0 	.word	0x200000d0

0800d0f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b086      	sub	sp, #24
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d100:	2182      	movs	r1, #130	; 0x82
 800d102:	4818      	ldr	r0, [pc, #96]	; (800d164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d104:	f000 fd17 	bl	800db36 <USBD_GetEpDesc>
 800d108:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d10a:	2101      	movs	r1, #1
 800d10c:	4815      	ldr	r0, [pc, #84]	; (800d164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d10e:	f000 fd12 	bl	800db36 <USBD_GetEpDesc>
 800d112:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d114:	2181      	movs	r1, #129	; 0x81
 800d116:	4813      	ldr	r0, [pc, #76]	; (800d164 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d118:	f000 fd0d 	bl	800db36 <USBD_GetEpDesc>
 800d11c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	2210      	movs	r2, #16
 800d128:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d006      	beq.n	800d13e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	2200      	movs	r2, #0
 800d134:	711a      	strb	r2, [r3, #4]
 800d136:	2200      	movs	r2, #0
 800d138:	f042 0202 	orr.w	r2, r2, #2
 800d13c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d006      	beq.n	800d152 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	711a      	strb	r2, [r3, #4]
 800d14a:	2200      	movs	r2, #0
 800d14c:	f042 0202 	orr.w	r2, r2, #2
 800d150:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2243      	movs	r2, #67	; 0x43
 800d156:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d158:	4b02      	ldr	r3, [pc, #8]	; (800d164 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3718      	adds	r7, #24
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	200000d0 	.word	0x200000d0

0800d168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b086      	sub	sp, #24
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d170:	2182      	movs	r1, #130	; 0x82
 800d172:	4818      	ldr	r0, [pc, #96]	; (800d1d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d174:	f000 fcdf 	bl	800db36 <USBD_GetEpDesc>
 800d178:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d17a:	2101      	movs	r1, #1
 800d17c:	4815      	ldr	r0, [pc, #84]	; (800d1d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d17e:	f000 fcda 	bl	800db36 <USBD_GetEpDesc>
 800d182:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d184:	2181      	movs	r1, #129	; 0x81
 800d186:	4813      	ldr	r0, [pc, #76]	; (800d1d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d188:	f000 fcd5 	bl	800db36 <USBD_GetEpDesc>
 800d18c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d002      	beq.n	800d19a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	2210      	movs	r2, #16
 800d198:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d19a:	693b      	ldr	r3, [r7, #16]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d006      	beq.n	800d1ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1a0:	693b      	ldr	r3, [r7, #16]
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1a8:	711a      	strb	r2, [r3, #4]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d006      	beq.n	800d1c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d1bc:	711a      	strb	r2, [r3, #4]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2243      	movs	r2, #67	; 0x43
 800d1c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1c8:	4b02      	ldr	r3, [pc, #8]	; (800d1d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3718      	adds	r7, #24
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}
 800d1d2:	bf00      	nop
 800d1d4:	200000d0 	.word	0x200000d0

0800d1d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b083      	sub	sp, #12
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	220a      	movs	r2, #10
 800d1e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d1e6:	4b03      	ldr	r3, [pc, #12]	; (800d1f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	370c      	adds	r7, #12
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f2:	4770      	bx	lr
 800d1f4:	2000008c 	.word	0x2000008c

0800d1f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b083      	sub	sp, #12
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d208:	2303      	movs	r3, #3
 800d20a:	e009      	b.n	800d220 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	33b0      	adds	r3, #176	; 0xb0
 800d216:	009b      	lsls	r3, r3, #2
 800d218:	4413      	add	r3, r2
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d21e:	2300      	movs	r3, #0
}
 800d220:	4618      	mov	r0, r3
 800d222:	370c      	adds	r7, #12
 800d224:	46bd      	mov	sp, r7
 800d226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d22c:	b480      	push	{r7}
 800d22e:	b087      	sub	sp, #28
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	32b0      	adds	r2, #176	; 0xb0
 800d242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d246:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d101      	bne.n	800d252 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d24e:	2303      	movs	r3, #3
 800d250:	e008      	b.n	800d264 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d252:	697b      	ldr	r3, [r7, #20]
 800d254:	68ba      	ldr	r2, [r7, #8]
 800d256:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	371c      	adds	r7, #28
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d270:	b480      	push	{r7}
 800d272:	b085      	sub	sp, #20
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	32b0      	adds	r2, #176	; 0xb0
 800d284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d288:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d101      	bne.n	800d294 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d290:	2303      	movs	r3, #3
 800d292:	e004      	b.n	800d29e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	683a      	ldr	r2, [r7, #0]
 800d298:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d29c:	2300      	movs	r3, #0
}
 800d29e:	4618      	mov	r0, r3
 800d2a0:	3714      	adds	r7, #20
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr
	...

0800d2ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	32b0      	adds	r2, #176	; 0xb0
 800d2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	32b0      	adds	r2, #176	; 0xb0
 800d2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e025      	b.n	800d32a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d11f      	bne.n	800d328 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d2e8:	68bb      	ldr	r3, [r7, #8]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d2f0:	4b10      	ldr	r3, [pc, #64]	; (800d334 <USBD_CDC_TransmitPacket+0x88>)
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	f003 020f 	and.w	r2, r3, #15
 800d2f8:	68bb      	ldr	r3, [r7, #8]
 800d2fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	4613      	mov	r3, r2
 800d302:	009b      	lsls	r3, r3, #2
 800d304:	4413      	add	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4403      	add	r3, r0
 800d30a:	3318      	adds	r3, #24
 800d30c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d30e:	4b09      	ldr	r3, [pc, #36]	; (800d334 <USBD_CDC_TransmitPacket+0x88>)
 800d310:	7819      	ldrb	r1, [r3, #0]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d318:	68bb      	ldr	r3, [r7, #8]
 800d31a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f001 ffb5 	bl	800f28e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d324:	2300      	movs	r3, #0
 800d326:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d328:	7bfb      	ldrb	r3, [r7, #15]
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20000113 	.word	0x20000113

0800d338 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b084      	sub	sp, #16
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	32b0      	adds	r2, #176	; 0xb0
 800d34a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	32b0      	adds	r2, #176	; 0xb0
 800d35a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d362:	2303      	movs	r3, #3
 800d364:	e018      	b.n	800d398 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	7c1b      	ldrb	r3, [r3, #16]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d10a      	bne.n	800d384 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d36e:	4b0c      	ldr	r3, [pc, #48]	; (800d3a0 <USBD_CDC_ReceivePacket+0x68>)
 800d370:	7819      	ldrb	r1, [r3, #0]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f001 ffa7 	bl	800f2d0 <USBD_LL_PrepareReceive>
 800d382:	e008      	b.n	800d396 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d384:	4b06      	ldr	r3, [pc, #24]	; (800d3a0 <USBD_CDC_ReceivePacket+0x68>)
 800d386:	7819      	ldrb	r1, [r3, #0]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d38e:	2340      	movs	r3, #64	; 0x40
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f001 ff9d 	bl	800f2d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3710      	adds	r7, #16
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}
 800d3a0:	20000114 	.word	0x20000114

0800d3a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3b8:	2303      	movs	r3, #3
 800d3ba:	e01f      	b.n	800d3fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d003      	beq.n	800d3e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	79fa      	ldrb	r2, [r7, #7]
 800d3ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f001 fe11 	bl	800f018 <USBD_LL_Init>
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3718      	adds	r7, #24
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b084      	sub	sp, #16
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
 800d40c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d40e:	2300      	movs	r3, #0
 800d410:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d101      	bne.n	800d41c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d418:	2303      	movs	r3, #3
 800d41a:	e025      	b.n	800d468 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	32ae      	adds	r2, #174	; 0xae
 800d42e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d00f      	beq.n	800d458 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	32ae      	adds	r2, #174	; 0xae
 800d442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d448:	f107 020e 	add.w	r2, r7, #14
 800d44c:	4610      	mov	r0, r2
 800d44e:	4798      	blx	r3
 800d450:	4602      	mov	r2, r0
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d466:	2300      	movs	r3, #0
}
 800d468:	4618      	mov	r0, r3
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b082      	sub	sp, #8
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d478:	6878      	ldr	r0, [r7, #4]
 800d47a:	f001 fe1f 	bl	800f0bc <USBD_LL_Start>
 800d47e:	4603      	mov	r3, r0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d488:	b480      	push	{r7}
 800d48a:	b083      	sub	sp, #12
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d492:	4618      	mov	r0, r3
 800d494:	370c      	adds	r7, #12
 800d496:	46bd      	mov	sp, r7
 800d498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d49c:	4770      	bx	lr

0800d49e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d49e:	b580      	push	{r7, lr}
 800d4a0:	b084      	sub	sp, #16
 800d4a2:	af00      	add	r7, sp, #0
 800d4a4:	6078      	str	r0, [r7, #4]
 800d4a6:	460b      	mov	r3, r1
 800d4a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d009      	beq.n	800d4cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	78fa      	ldrb	r2, [r7, #3]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	4798      	blx	r3
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b084      	sub	sp, #16
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	460b      	mov	r3, r1
 800d4e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	78fa      	ldrb	r2, [r7, #3]
 800d4f0:	4611      	mov	r1, r2
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	4798      	blx	r3
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d4fc:	2303      	movs	r3, #3
 800d4fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d500:	7bfb      	ldrb	r3, [r7, #15]
}
 800d502:	4618      	mov	r0, r3
 800d504:	3710      	adds	r7, #16
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
 800d512:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	4618      	mov	r0, r3
 800d51e:	f001 f908 	bl	800e732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d530:	461a      	mov	r2, r3
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d53e:	f003 031f 	and.w	r3, r3, #31
 800d542:	2b02      	cmp	r3, #2
 800d544:	d01a      	beq.n	800d57c <USBD_LL_SetupStage+0x72>
 800d546:	2b02      	cmp	r3, #2
 800d548:	d822      	bhi.n	800d590 <USBD_LL_SetupStage+0x86>
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <USBD_LL_SetupStage+0x4a>
 800d54e:	2b01      	cmp	r3, #1
 800d550:	d00a      	beq.n	800d568 <USBD_LL_SetupStage+0x5e>
 800d552:	e01d      	b.n	800d590 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fb5f 	bl	800dc20 <USBD_StdDevReq>
 800d562:	4603      	mov	r3, r0
 800d564:	73fb      	strb	r3, [r7, #15]
      break;
 800d566:	e020      	b.n	800d5aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fbc7 	bl	800dd04 <USBD_StdItfReq>
 800d576:	4603      	mov	r3, r0
 800d578:	73fb      	strb	r3, [r7, #15]
      break;
 800d57a:	e016      	b.n	800d5aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d582:	4619      	mov	r1, r3
 800d584:	6878      	ldr	r0, [r7, #4]
 800d586:	f000 fc29 	bl	800dddc <USBD_StdEPReq>
 800d58a:	4603      	mov	r3, r0
 800d58c:	73fb      	strb	r3, [r7, #15]
      break;
 800d58e:	e00c      	b.n	800d5aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d596:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f001 fdec 	bl	800f17c <USBD_LL_StallEP>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	73fb      	strb	r3, [r7, #15]
      break;
 800d5a8:	bf00      	nop
  }

  return ret;
 800d5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b086      	sub	sp, #24
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	60f8      	str	r0, [r7, #12]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	607a      	str	r2, [r7, #4]
 800d5c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d5c6:	7afb      	ldrb	r3, [r7, #11]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d16e      	bne.n	800d6aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d5d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d5da:	2b03      	cmp	r3, #3
 800d5dc:	f040 8098 	bne.w	800d710 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	689a      	ldr	r2, [r3, #8]
 800d5e4:	693b      	ldr	r3, [r7, #16]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d913      	bls.n	800d614 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	689a      	ldr	r2, [r3, #8]
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	1ad2      	subs	r2, r2, r3
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d5fa:	693b      	ldr	r3, [r7, #16]
 800d5fc:	68da      	ldr	r2, [r3, #12]
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	4293      	cmp	r3, r2
 800d604:	bf28      	it	cs
 800d606:	4613      	movcs	r3, r2
 800d608:	461a      	mov	r2, r3
 800d60a:	6879      	ldr	r1, [r7, #4]
 800d60c:	68f8      	ldr	r0, [r7, #12]
 800d60e:	f001 f984 	bl	800e91a <USBD_CtlContinueRx>
 800d612:	e07d      	b.n	800d710 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d61a:	f003 031f 	and.w	r3, r3, #31
 800d61e:	2b02      	cmp	r3, #2
 800d620:	d014      	beq.n	800d64c <USBD_LL_DataOutStage+0x98>
 800d622:	2b02      	cmp	r3, #2
 800d624:	d81d      	bhi.n	800d662 <USBD_LL_DataOutStage+0xae>
 800d626:	2b00      	cmp	r3, #0
 800d628:	d002      	beq.n	800d630 <USBD_LL_DataOutStage+0x7c>
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d003      	beq.n	800d636 <USBD_LL_DataOutStage+0x82>
 800d62e:	e018      	b.n	800d662 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d630:	2300      	movs	r3, #0
 800d632:	75bb      	strb	r3, [r7, #22]
            break;
 800d634:	e018      	b.n	800d668 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	4619      	mov	r1, r3
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 fa5e 	bl	800db02 <USBD_CoreFindIF>
 800d646:	4603      	mov	r3, r0
 800d648:	75bb      	strb	r3, [r7, #22]
            break;
 800d64a:	e00d      	b.n	800d668 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d652:	b2db      	uxtb	r3, r3
 800d654:	4619      	mov	r1, r3
 800d656:	68f8      	ldr	r0, [r7, #12]
 800d658:	f000 fa60 	bl	800db1c <USBD_CoreFindEP>
 800d65c:	4603      	mov	r3, r0
 800d65e:	75bb      	strb	r3, [r7, #22]
            break;
 800d660:	e002      	b.n	800d668 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d662:	2300      	movs	r3, #0
 800d664:	75bb      	strb	r3, [r7, #22]
            break;
 800d666:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d668:	7dbb      	ldrb	r3, [r7, #22]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d119      	bne.n	800d6a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b03      	cmp	r3, #3
 800d678:	d113      	bne.n	800d6a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d67a:	7dba      	ldrb	r2, [r7, #22]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	32ae      	adds	r2, #174	; 0xae
 800d680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00b      	beq.n	800d6a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d68a:	7dba      	ldrb	r2, [r7, #22]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d692:	7dba      	ldrb	r2, [r7, #22]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	32ae      	adds	r2, #174	; 0xae
 800d698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69c:	691b      	ldr	r3, [r3, #16]
 800d69e:	68f8      	ldr	r0, [r7, #12]
 800d6a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f001 f94a 	bl	800e93c <USBD_CtlSendStatus>
 800d6a8:	e032      	b.n	800d710 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d6aa:	7afb      	ldrb	r3, [r7, #11]
 800d6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	68f8      	ldr	r0, [r7, #12]
 800d6b6:	f000 fa31 	bl	800db1c <USBD_CoreFindEP>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6be:	7dbb      	ldrb	r3, [r7, #22]
 800d6c0:	2bff      	cmp	r3, #255	; 0xff
 800d6c2:	d025      	beq.n	800d710 <USBD_LL_DataOutStage+0x15c>
 800d6c4:	7dbb      	ldrb	r3, [r7, #22]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d122      	bne.n	800d710 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d117      	bne.n	800d706 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d6d6:	7dba      	ldrb	r2, [r7, #22]
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	32ae      	adds	r2, #174	; 0xae
 800d6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d00f      	beq.n	800d706 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d6e6:	7dba      	ldrb	r2, [r7, #22]
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d6ee:	7dba      	ldrb	r2, [r7, #22]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	32ae      	adds	r2, #174	; 0xae
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	699b      	ldr	r3, [r3, #24]
 800d6fa:	7afa      	ldrb	r2, [r7, #11]
 800d6fc:	4611      	mov	r1, r2
 800d6fe:	68f8      	ldr	r0, [r7, #12]
 800d700:	4798      	blx	r3
 800d702:	4603      	mov	r3, r0
 800d704:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d706:	7dfb      	ldrb	r3, [r7, #23]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d001      	beq.n	800d710 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d70c:	7dfb      	ldrb	r3, [r7, #23]
 800d70e:	e000      	b.n	800d712 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d710:	2300      	movs	r3, #0
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b086      	sub	sp, #24
 800d71e:	af00      	add	r7, sp, #0
 800d720:	60f8      	str	r0, [r7, #12]
 800d722:	460b      	mov	r3, r1
 800d724:	607a      	str	r2, [r7, #4]
 800d726:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d728:	7afb      	ldrb	r3, [r7, #11]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d16f      	bne.n	800d80e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	3314      	adds	r3, #20
 800d732:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d73a:	2b02      	cmp	r3, #2
 800d73c:	d15a      	bne.n	800d7f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	689a      	ldr	r2, [r3, #8]
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	68db      	ldr	r3, [r3, #12]
 800d746:	429a      	cmp	r2, r3
 800d748:	d914      	bls.n	800d774 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	689a      	ldr	r2, [r3, #8]
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	68db      	ldr	r3, [r3, #12]
 800d752:	1ad2      	subs	r2, r2, r3
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	461a      	mov	r2, r3
 800d75e:	6879      	ldr	r1, [r7, #4]
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f001 f8ac 	bl	800e8be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d766:	2300      	movs	r3, #0
 800d768:	2200      	movs	r2, #0
 800d76a:	2100      	movs	r1, #0
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f001 fdaf 	bl	800f2d0 <USBD_LL_PrepareReceive>
 800d772:	e03f      	b.n	800d7f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	68da      	ldr	r2, [r3, #12]
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	689b      	ldr	r3, [r3, #8]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d11c      	bne.n	800d7ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	685a      	ldr	r2, [r3, #4]
 800d784:	693b      	ldr	r3, [r7, #16]
 800d786:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d788:	429a      	cmp	r2, r3
 800d78a:	d316      	bcc.n	800d7ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	685a      	ldr	r2, [r3, #4]
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d796:	429a      	cmp	r2, r3
 800d798:	d20f      	bcs.n	800d7ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d79a:	2200      	movs	r2, #0
 800d79c:	2100      	movs	r1, #0
 800d79e:	68f8      	ldr	r0, [r7, #12]
 800d7a0:	f001 f88d 	bl	800e8be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2100      	movs	r1, #0
 800d7b2:	68f8      	ldr	r0, [r7, #12]
 800d7b4:	f001 fd8c 	bl	800f2d0 <USBD_LL_PrepareReceive>
 800d7b8:	e01c      	b.n	800d7f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d10f      	bne.n	800d7e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d009      	beq.n	800d7e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7e6:	2180      	movs	r1, #128	; 0x80
 800d7e8:	68f8      	ldr	r0, [r7, #12]
 800d7ea:	f001 fcc7 	bl	800f17c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f001 f8b7 	bl	800e962 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d03a      	beq.n	800d874 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d7fe:	68f8      	ldr	r0, [r7, #12]
 800d800:	f7ff fe42 	bl	800d488 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2200      	movs	r2, #0
 800d808:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d80c:	e032      	b.n	800d874 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d80e:	7afb      	ldrb	r3, [r7, #11]
 800d810:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d814:	b2db      	uxtb	r3, r3
 800d816:	4619      	mov	r1, r3
 800d818:	68f8      	ldr	r0, [r7, #12]
 800d81a:	f000 f97f 	bl	800db1c <USBD_CoreFindEP>
 800d81e:	4603      	mov	r3, r0
 800d820:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d822:	7dfb      	ldrb	r3, [r7, #23]
 800d824:	2bff      	cmp	r3, #255	; 0xff
 800d826:	d025      	beq.n	800d874 <USBD_LL_DataInStage+0x15a>
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d122      	bne.n	800d874 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b03      	cmp	r3, #3
 800d838:	d11c      	bne.n	800d874 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d83a:	7dfa      	ldrb	r2, [r7, #23]
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	32ae      	adds	r2, #174	; 0xae
 800d840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d844:	695b      	ldr	r3, [r3, #20]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d014      	beq.n	800d874 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d84a:	7dfa      	ldrb	r2, [r7, #23]
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d852:	7dfa      	ldrb	r2, [r7, #23]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	32ae      	adds	r2, #174	; 0xae
 800d858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d85c:	695b      	ldr	r3, [r3, #20]
 800d85e:	7afa      	ldrb	r2, [r7, #11]
 800d860:	4611      	mov	r1, r2
 800d862:	68f8      	ldr	r0, [r7, #12]
 800d864:	4798      	blx	r3
 800d866:	4603      	mov	r3, r0
 800d868:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d86a:	7dbb      	ldrb	r3, [r7, #22]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d001      	beq.n	800d874 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d870:	7dbb      	ldrb	r3, [r7, #22]
 800d872:	e000      	b.n	800d876 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d874:	2300      	movs	r3, #0
}
 800d876:	4618      	mov	r0, r3
 800d878:	3718      	adds	r7, #24
 800d87a:	46bd      	mov	sp, r7
 800d87c:	bd80      	pop	{r7, pc}

0800d87e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d87e:	b580      	push	{r7, lr}
 800d880:	b084      	sub	sp, #16
 800d882:	af00      	add	r7, sp, #0
 800d884:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d886:	2300      	movs	r3, #0
 800d888:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2201      	movs	r2, #1
 800d88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d014      	beq.n	800d8e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00e      	beq.n	800d8e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	687a      	ldr	r2, [r7, #4]
 800d8d0:	6852      	ldr	r2, [r2, #4]
 800d8d2:	b2d2      	uxtb	r2, r2
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	6878      	ldr	r0, [r7, #4]
 800d8d8:	4798      	blx	r3
 800d8da:	4603      	mov	r3, r0
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d001      	beq.n	800d8e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8e4:	2340      	movs	r3, #64	; 0x40
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	2100      	movs	r1, #0
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f001 fc01 	bl	800f0f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2240      	movs	r2, #64	; 0x40
 800d8fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	2200      	movs	r2, #0
 800d904:	2180      	movs	r1, #128	; 0x80
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 fbf3 	bl	800f0f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2201      	movs	r2, #1
 800d910:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	2240      	movs	r2, #64	; 0x40
 800d916:	621a      	str	r2, [r3, #32]

  return ret;
 800d918:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d922:	b480      	push	{r7}
 800d924:	b083      	sub	sp, #12
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	460b      	mov	r3, r1
 800d92c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	78fa      	ldrb	r2, [r7, #3]
 800d932:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d950:	b2da      	uxtb	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2204      	movs	r2, #4
 800d95c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96c:	4770      	bx	lr

0800d96e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d96e:	b480      	push	{r7}
 800d970:	b083      	sub	sp, #12
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	2b04      	cmp	r3, #4
 800d980:	d106      	bne.n	800d990 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d988:	b2da      	uxtb	r2, r3
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d990:	2300      	movs	r3, #0
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr

0800d99e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d110      	bne.n	800d9d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d00b      	beq.n	800d9d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c2:	69db      	ldr	r3, [r3, #28]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d005      	beq.n	800d9d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d9d4:	2300      	movs	r3, #0
}
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	3708      	adds	r7, #8
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}

0800d9de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b082      	sub	sp, #8
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	32ae      	adds	r2, #174	; 0xae
 800d9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d101      	bne.n	800da00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9fc:	2303      	movs	r3, #3
 800d9fe:	e01c      	b.n	800da3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da06:	b2db      	uxtb	r3, r3
 800da08:	2b03      	cmp	r3, #3
 800da0a:	d115      	bne.n	800da38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	32ae      	adds	r2, #174	; 0xae
 800da16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da1a:	6a1b      	ldr	r3, [r3, #32]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d00b      	beq.n	800da38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32ae      	adds	r2, #174	; 0xae
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	6a1b      	ldr	r3, [r3, #32]
 800da30:	78fa      	ldrb	r2, [r7, #3]
 800da32:	4611      	mov	r1, r2
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3708      	adds	r7, #8
 800da3e:	46bd      	mov	sp, r7
 800da40:	bd80      	pop	{r7, pc}

0800da42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da42:	b580      	push	{r7, lr}
 800da44:	b082      	sub	sp, #8
 800da46:	af00      	add	r7, sp, #0
 800da48:	6078      	str	r0, [r7, #4]
 800da4a:	460b      	mov	r3, r1
 800da4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	32ae      	adds	r2, #174	; 0xae
 800da58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d101      	bne.n	800da64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da60:	2303      	movs	r3, #3
 800da62:	e01c      	b.n	800da9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	2b03      	cmp	r3, #3
 800da6e:	d115      	bne.n	800da9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	32ae      	adds	r2, #174	; 0xae
 800da7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00b      	beq.n	800da9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	32ae      	adds	r2, #174	; 0xae
 800da8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da94:	78fa      	ldrb	r2, [r7, #3]
 800da96:	4611      	mov	r1, r2
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3708      	adds	r7, #8
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800daa6:	b480      	push	{r7}
 800daa8:	b083      	sub	sp, #12
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800daae:	2300      	movs	r3, #0
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	370c      	adds	r7, #12
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr

0800dabc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b084      	sub	sp, #16
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dac4:	2300      	movs	r3, #0
 800dac6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d00e      	beq.n	800daf8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	6852      	ldr	r2, [r2, #4]
 800dae6:	b2d2      	uxtb	r2, r2
 800dae8:	4611      	mov	r1, r2
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	4798      	blx	r3
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d001      	beq.n	800daf8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800daf4:	2303      	movs	r3, #3
 800daf6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800daf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3710      	adds	r7, #16
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db02:	b480      	push	{r7}
 800db04:	b083      	sub	sp, #12
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
 800db0a:	460b      	mov	r3, r1
 800db0c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db0e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	460b      	mov	r3, r1
 800db26:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db28:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	370c      	adds	r7, #12
 800db2e:	46bd      	mov	sp, r7
 800db30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db34:	4770      	bx	lr

0800db36 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db36:	b580      	push	{r7, lr}
 800db38:	b086      	sub	sp, #24
 800db3a:	af00      	add	r7, sp, #0
 800db3c:	6078      	str	r0, [r7, #4]
 800db3e:	460b      	mov	r3, r1
 800db40:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	885b      	ldrh	r3, [r3, #2]
 800db52:	b29a      	uxth	r2, r3
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	781b      	ldrb	r3, [r3, #0]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d920      	bls.n	800dba0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	781b      	ldrb	r3, [r3, #0]
 800db62:	b29b      	uxth	r3, r3
 800db64:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db66:	e013      	b.n	800db90 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db68:	f107 030a 	add.w	r3, r7, #10
 800db6c:	4619      	mov	r1, r3
 800db6e:	6978      	ldr	r0, [r7, #20]
 800db70:	f000 f81b 	bl	800dbaa <USBD_GetNextDesc>
 800db74:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db76:	697b      	ldr	r3, [r7, #20]
 800db78:	785b      	ldrb	r3, [r3, #1]
 800db7a:	2b05      	cmp	r3, #5
 800db7c:	d108      	bne.n	800db90 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db7e:	697b      	ldr	r3, [r7, #20]
 800db80:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db82:	693b      	ldr	r3, [r7, #16]
 800db84:	789b      	ldrb	r3, [r3, #2]
 800db86:	78fa      	ldrb	r2, [r7, #3]
 800db88:	429a      	cmp	r2, r3
 800db8a:	d008      	beq.n	800db9e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db8c:	2300      	movs	r3, #0
 800db8e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	885b      	ldrh	r3, [r3, #2]
 800db94:	b29a      	uxth	r2, r3
 800db96:	897b      	ldrh	r3, [r7, #10]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d8e5      	bhi.n	800db68 <USBD_GetEpDesc+0x32>
 800db9c:	e000      	b.n	800dba0 <USBD_GetEpDesc+0x6a>
          break;
 800db9e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dba0:	693b      	ldr	r3, [r7, #16]
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b085      	sub	sp, #20
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	881a      	ldrh	r2, [r3, #0]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	4413      	add	r3, r2
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	781b      	ldrb	r3, [r3, #0]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3714      	adds	r7, #20
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr

0800dbe4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbe4:	b480      	push	{r7}
 800dbe6:	b087      	sub	sp, #28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	3301      	adds	r3, #1
 800dbfa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc02:	8a3b      	ldrh	r3, [r7, #16]
 800dc04:	021b      	lsls	r3, r3, #8
 800dc06:	b21a      	sxth	r2, r3
 800dc08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	b21b      	sxth	r3, r3
 800dc10:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc12:	89fb      	ldrh	r3, [r7, #14]
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	371c      	adds	r7, #28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc36:	2b40      	cmp	r3, #64	; 0x40
 800dc38:	d005      	beq.n	800dc46 <USBD_StdDevReq+0x26>
 800dc3a:	2b40      	cmp	r3, #64	; 0x40
 800dc3c:	d857      	bhi.n	800dcee <USBD_StdDevReq+0xce>
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00f      	beq.n	800dc62 <USBD_StdDevReq+0x42>
 800dc42:	2b20      	cmp	r3, #32
 800dc44:	d153      	bne.n	800dcee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	32ae      	adds	r2, #174	; 0xae
 800dc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	6839      	ldr	r1, [r7, #0]
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	4798      	blx	r3
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]
      break;
 800dc60:	e04a      	b.n	800dcf8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	785b      	ldrb	r3, [r3, #1]
 800dc66:	2b09      	cmp	r3, #9
 800dc68:	d83b      	bhi.n	800dce2 <USBD_StdDevReq+0xc2>
 800dc6a:	a201      	add	r2, pc, #4	; (adr r2, 800dc70 <USBD_StdDevReq+0x50>)
 800dc6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc70:	0800dcc5 	.word	0x0800dcc5
 800dc74:	0800dcd9 	.word	0x0800dcd9
 800dc78:	0800dce3 	.word	0x0800dce3
 800dc7c:	0800dccf 	.word	0x0800dccf
 800dc80:	0800dce3 	.word	0x0800dce3
 800dc84:	0800dca3 	.word	0x0800dca3
 800dc88:	0800dc99 	.word	0x0800dc99
 800dc8c:	0800dce3 	.word	0x0800dce3
 800dc90:	0800dcbb 	.word	0x0800dcbb
 800dc94:	0800dcad 	.word	0x0800dcad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 fa3c 	bl	800e118 <USBD_GetDescriptor>
          break;
 800dca0:	e024      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fba1 	bl	800e3ec <USBD_SetAddress>
          break;
 800dcaa:	e01f      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fbe0 	bl	800e474 <USBD_SetConfig>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]
          break;
 800dcb8:	e018      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fc83 	bl	800e5c8 <USBD_GetConfig>
          break;
 800dcc2:	e013      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fcb4 	bl	800e634 <USBD_GetStatus>
          break;
 800dccc:	e00e      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dcce:	6839      	ldr	r1, [r7, #0]
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fce3 	bl	800e69c <USBD_SetFeature>
          break;
 800dcd6:	e009      	b.n	800dcec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fd07 	bl	800e6ee <USBD_ClrFeature>
          break;
 800dce0:	e004      	b.n	800dcec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fd5e 	bl	800e7a6 <USBD_CtlError>
          break;
 800dcea:	bf00      	nop
      }
      break;
 800dcec:	e004      	b.n	800dcf8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dcee:	6839      	ldr	r1, [r7, #0]
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f000 fd58 	bl	800e7a6 <USBD_CtlError>
      break;
 800dcf6:	bf00      	nop
  }

  return ret;
 800dcf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3710      	adds	r7, #16
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop

0800dd04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd1a:	2b40      	cmp	r3, #64	; 0x40
 800dd1c:	d005      	beq.n	800dd2a <USBD_StdItfReq+0x26>
 800dd1e:	2b40      	cmp	r3, #64	; 0x40
 800dd20:	d852      	bhi.n	800ddc8 <USBD_StdItfReq+0xc4>
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d001      	beq.n	800dd2a <USBD_StdItfReq+0x26>
 800dd26:	2b20      	cmp	r3, #32
 800dd28:	d14e      	bne.n	800ddc8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd30:	b2db      	uxtb	r3, r3
 800dd32:	3b01      	subs	r3, #1
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d840      	bhi.n	800ddba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	889b      	ldrh	r3, [r3, #4]
 800dd3c:	b2db      	uxtb	r3, r3
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d836      	bhi.n	800ddb0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	889b      	ldrh	r3, [r3, #4]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fed9 	bl	800db02 <USBD_CoreFindIF>
 800dd50:	4603      	mov	r3, r0
 800dd52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	2bff      	cmp	r3, #255	; 0xff
 800dd58:	d01d      	beq.n	800dd96 <USBD_StdItfReq+0x92>
 800dd5a:	7bbb      	ldrb	r3, [r7, #14]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d11a      	bne.n	800dd96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd60:	7bba      	ldrb	r2, [r7, #14]
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	32ae      	adds	r2, #174	; 0xae
 800dd66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd6a:	689b      	ldr	r3, [r3, #8]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d00f      	beq.n	800dd90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd70:	7bba      	ldrb	r2, [r7, #14]
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd78:	7bba      	ldrb	r2, [r7, #14]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	32ae      	adds	r2, #174	; 0xae
 800dd7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	4798      	blx	r3
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd8e:	e004      	b.n	800dd9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd90:	2303      	movs	r3, #3
 800dd92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd94:	e001      	b.n	800dd9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd96:	2303      	movs	r3, #3
 800dd98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	88db      	ldrh	r3, [r3, #6]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d110      	bne.n	800ddc4 <USBD_StdItfReq+0xc0>
 800dda2:	7bfb      	ldrb	r3, [r7, #15]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d10d      	bne.n	800ddc4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 fdc7 	bl	800e93c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ddae:	e009      	b.n	800ddc4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fcf7 	bl	800e7a6 <USBD_CtlError>
          break;
 800ddb8:	e004      	b.n	800ddc4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ddba:	6839      	ldr	r1, [r7, #0]
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f000 fcf2 	bl	800e7a6 <USBD_CtlError>
          break;
 800ddc2:	e000      	b.n	800ddc6 <USBD_StdItfReq+0xc2>
          break;
 800ddc4:	bf00      	nop
      }
      break;
 800ddc6:	e004      	b.n	800ddd2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fceb 	bl	800e7a6 <USBD_CtlError>
      break;
 800ddd0:	bf00      	nop
  }

  return ret;
 800ddd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dde6:	2300      	movs	r3, #0
 800dde8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	889b      	ldrh	r3, [r3, #4]
 800ddee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddf8:	2b40      	cmp	r3, #64	; 0x40
 800ddfa:	d007      	beq.n	800de0c <USBD_StdEPReq+0x30>
 800ddfc:	2b40      	cmp	r3, #64	; 0x40
 800ddfe:	f200 817f 	bhi.w	800e100 <USBD_StdEPReq+0x324>
 800de02:	2b00      	cmp	r3, #0
 800de04:	d02a      	beq.n	800de5c <USBD_StdEPReq+0x80>
 800de06:	2b20      	cmp	r3, #32
 800de08:	f040 817a 	bne.w	800e100 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
 800de0e:	4619      	mov	r1, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f7ff fe83 	bl	800db1c <USBD_CoreFindEP>
 800de16:	4603      	mov	r3, r0
 800de18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de1a:	7b7b      	ldrb	r3, [r7, #13]
 800de1c:	2bff      	cmp	r3, #255	; 0xff
 800de1e:	f000 8174 	beq.w	800e10a <USBD_StdEPReq+0x32e>
 800de22:	7b7b      	ldrb	r3, [r7, #13]
 800de24:	2b00      	cmp	r3, #0
 800de26:	f040 8170 	bne.w	800e10a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de2a:	7b7a      	ldrb	r2, [r7, #13]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de32:	7b7a      	ldrb	r2, [r7, #13]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	32ae      	adds	r2, #174	; 0xae
 800de38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 8163 	beq.w	800e10a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de44:	7b7a      	ldrb	r2, [r7, #13]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	32ae      	adds	r2, #174	; 0xae
 800de4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de4e:	689b      	ldr	r3, [r3, #8]
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
 800de56:	4603      	mov	r3, r0
 800de58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de5a:	e156      	b.n	800e10a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	785b      	ldrb	r3, [r3, #1]
 800de60:	2b03      	cmp	r3, #3
 800de62:	d008      	beq.n	800de76 <USBD_StdEPReq+0x9a>
 800de64:	2b03      	cmp	r3, #3
 800de66:	f300 8145 	bgt.w	800e0f4 <USBD_StdEPReq+0x318>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	f000 809b 	beq.w	800dfa6 <USBD_StdEPReq+0x1ca>
 800de70:	2b01      	cmp	r3, #1
 800de72:	d03c      	beq.n	800deee <USBD_StdEPReq+0x112>
 800de74:	e13e      	b.n	800e0f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de7c:	b2db      	uxtb	r3, r3
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d002      	beq.n	800de88 <USBD_StdEPReq+0xac>
 800de82:	2b03      	cmp	r3, #3
 800de84:	d016      	beq.n	800deb4 <USBD_StdEPReq+0xd8>
 800de86:	e02c      	b.n	800dee2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de88:	7bbb      	ldrb	r3, [r7, #14]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00d      	beq.n	800deaa <USBD_StdEPReq+0xce>
 800de8e:	7bbb      	ldrb	r3, [r7, #14]
 800de90:	2b80      	cmp	r3, #128	; 0x80
 800de92:	d00a      	beq.n	800deaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de94:	7bbb      	ldrb	r3, [r7, #14]
 800de96:	4619      	mov	r1, r3
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f001 f96f 	bl	800f17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de9e:	2180      	movs	r1, #128	; 0x80
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f001 f96b 	bl	800f17c <USBD_LL_StallEP>
 800dea6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dea8:	e020      	b.n	800deec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800deaa:	6839      	ldr	r1, [r7, #0]
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 fc7a 	bl	800e7a6 <USBD_CtlError>
              break;
 800deb2:	e01b      	b.n	800deec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	885b      	ldrh	r3, [r3, #2]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10e      	bne.n	800deda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800debc:	7bbb      	ldrb	r3, [r7, #14]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00b      	beq.n	800deda <USBD_StdEPReq+0xfe>
 800dec2:	7bbb      	ldrb	r3, [r7, #14]
 800dec4:	2b80      	cmp	r3, #128	; 0x80
 800dec6:	d008      	beq.n	800deda <USBD_StdEPReq+0xfe>
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	88db      	ldrh	r3, [r3, #6]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d104      	bne.n	800deda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f001 f951 	bl	800f17c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 fd2e 	bl	800e93c <USBD_CtlSendStatus>

              break;
 800dee0:	e004      	b.n	800deec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dee2:	6839      	ldr	r1, [r7, #0]
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f000 fc5e 	bl	800e7a6 <USBD_CtlError>
              break;
 800deea:	bf00      	nop
          }
          break;
 800deec:	e107      	b.n	800e0fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def4:	b2db      	uxtb	r3, r3
 800def6:	2b02      	cmp	r3, #2
 800def8:	d002      	beq.n	800df00 <USBD_StdEPReq+0x124>
 800defa:	2b03      	cmp	r3, #3
 800defc:	d016      	beq.n	800df2c <USBD_StdEPReq+0x150>
 800defe:	e04b      	b.n	800df98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df00:	7bbb      	ldrb	r3, [r7, #14]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00d      	beq.n	800df22 <USBD_StdEPReq+0x146>
 800df06:	7bbb      	ldrb	r3, [r7, #14]
 800df08:	2b80      	cmp	r3, #128	; 0x80
 800df0a:	d00a      	beq.n	800df22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f001 f933 	bl	800f17c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df16:	2180      	movs	r1, #128	; 0x80
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 f92f 	bl	800f17c <USBD_LL_StallEP>
 800df1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df20:	e040      	b.n	800dfa4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df22:	6839      	ldr	r1, [r7, #0]
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 fc3e 	bl	800e7a6 <USBD_CtlError>
              break;
 800df2a:	e03b      	b.n	800dfa4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df2c:	683b      	ldr	r3, [r7, #0]
 800df2e:	885b      	ldrh	r3, [r3, #2]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d136      	bne.n	800dfa2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df34:	7bbb      	ldrb	r3, [r7, #14]
 800df36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d004      	beq.n	800df48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df3e:	7bbb      	ldrb	r3, [r7, #14]
 800df40:	4619      	mov	r1, r3
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f001 f939 	bl	800f1ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 fcf7 	bl	800e93c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df4e:	7bbb      	ldrb	r3, [r7, #14]
 800df50:	4619      	mov	r1, r3
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f7ff fde2 	bl	800db1c <USBD_CoreFindEP>
 800df58:	4603      	mov	r3, r0
 800df5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df5c:	7b7b      	ldrb	r3, [r7, #13]
 800df5e:	2bff      	cmp	r3, #255	; 0xff
 800df60:	d01f      	beq.n	800dfa2 <USBD_StdEPReq+0x1c6>
 800df62:	7b7b      	ldrb	r3, [r7, #13]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d11c      	bne.n	800dfa2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df68:	7b7a      	ldrb	r2, [r7, #13]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df70:	7b7a      	ldrb	r2, [r7, #13]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	32ae      	adds	r2, #174	; 0xae
 800df76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d010      	beq.n	800dfa2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df80:	7b7a      	ldrb	r2, [r7, #13]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	32ae      	adds	r2, #174	; 0xae
 800df86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8a:	689b      	ldr	r3, [r3, #8]
 800df8c:	6839      	ldr	r1, [r7, #0]
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	4798      	blx	r3
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df96:	e004      	b.n	800dfa2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fc03 	bl	800e7a6 <USBD_CtlError>
              break;
 800dfa0:	e000      	b.n	800dfa4 <USBD_StdEPReq+0x1c8>
              break;
 800dfa2:	bf00      	nop
          }
          break;
 800dfa4:	e0ab      	b.n	800e0fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfac:	b2db      	uxtb	r3, r3
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d002      	beq.n	800dfb8 <USBD_StdEPReq+0x1dc>
 800dfb2:	2b03      	cmp	r3, #3
 800dfb4:	d032      	beq.n	800e01c <USBD_StdEPReq+0x240>
 800dfb6:	e097      	b.n	800e0e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dfb8:	7bbb      	ldrb	r3, [r7, #14]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d007      	beq.n	800dfce <USBD_StdEPReq+0x1f2>
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	2b80      	cmp	r3, #128	; 0x80
 800dfc2:	d004      	beq.n	800dfce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fbed 	bl	800e7a6 <USBD_CtlError>
                break;
 800dfcc:	e091      	b.n	800e0f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	da0b      	bge.n	800dfee <USBD_StdEPReq+0x212>
 800dfd6:	7bbb      	ldrb	r3, [r7, #14]
 800dfd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dfdc:	4613      	mov	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	4413      	add	r3, r2
 800dfe2:	009b      	lsls	r3, r3, #2
 800dfe4:	3310      	adds	r3, #16
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	4413      	add	r3, r2
 800dfea:	3304      	adds	r3, #4
 800dfec:	e00b      	b.n	800e006 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfee:	7bbb      	ldrb	r3, [r7, #14]
 800dff0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dff4:	4613      	mov	r3, r2
 800dff6:	009b      	lsls	r3, r3, #2
 800dff8:	4413      	add	r3, r2
 800dffa:	009b      	lsls	r3, r3, #2
 800dffc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e000:	687a      	ldr	r2, [r7, #4]
 800e002:	4413      	add	r3, r2
 800e004:	3304      	adds	r3, #4
 800e006:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	2200      	movs	r2, #0
 800e00c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	2202      	movs	r2, #2
 800e012:	4619      	mov	r1, r3
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fc37 	bl	800e888 <USBD_CtlSendData>
              break;
 800e01a:	e06a      	b.n	800e0f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e020:	2b00      	cmp	r3, #0
 800e022:	da11      	bge.n	800e048 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e024:	7bbb      	ldrb	r3, [r7, #14]
 800e026:	f003 020f 	and.w	r2, r3, #15
 800e02a:	6879      	ldr	r1, [r7, #4]
 800e02c:	4613      	mov	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	4413      	add	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	440b      	add	r3, r1
 800e036:	3324      	adds	r3, #36	; 0x24
 800e038:	881b      	ldrh	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d117      	bne.n	800e06e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e03e:	6839      	ldr	r1, [r7, #0]
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fbb0 	bl	800e7a6 <USBD_CtlError>
                  break;
 800e046:	e054      	b.n	800e0f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e048:	7bbb      	ldrb	r3, [r7, #14]
 800e04a:	f003 020f 	and.w	r2, r3, #15
 800e04e:	6879      	ldr	r1, [r7, #4]
 800e050:	4613      	mov	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	440b      	add	r3, r1
 800e05a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e05e:	881b      	ldrh	r3, [r3, #0]
 800e060:	2b00      	cmp	r3, #0
 800e062:	d104      	bne.n	800e06e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fb9d 	bl	800e7a6 <USBD_CtlError>
                  break;
 800e06c:	e041      	b.n	800e0f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e06e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e072:	2b00      	cmp	r3, #0
 800e074:	da0b      	bge.n	800e08e <USBD_StdEPReq+0x2b2>
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e07c:	4613      	mov	r3, r2
 800e07e:	009b      	lsls	r3, r3, #2
 800e080:	4413      	add	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	3310      	adds	r3, #16
 800e086:	687a      	ldr	r2, [r7, #4]
 800e088:	4413      	add	r3, r2
 800e08a:	3304      	adds	r3, #4
 800e08c:	e00b      	b.n	800e0a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e08e:	7bbb      	ldrb	r3, [r7, #14]
 800e090:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e094:	4613      	mov	r3, r2
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	4413      	add	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0a0:	687a      	ldr	r2, [r7, #4]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d002      	beq.n	800e0b4 <USBD_StdEPReq+0x2d8>
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	2b80      	cmp	r3, #128	; 0x80
 800e0b2:	d103      	bne.n	800e0bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	e00e      	b.n	800e0da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f001 f899 	bl	800f1f8 <USBD_LL_IsStallEP>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d003      	beq.n	800e0d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	601a      	str	r2, [r3, #0]
 800e0d2:	e002      	b.n	800e0da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	4619      	mov	r1, r3
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fbd1 	bl	800e888 <USBD_CtlSendData>
              break;
 800e0e6:	e004      	b.n	800e0f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e0e8:	6839      	ldr	r1, [r7, #0]
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f000 fb5b 	bl	800e7a6 <USBD_CtlError>
              break;
 800e0f0:	bf00      	nop
          }
          break;
 800e0f2:	e004      	b.n	800e0fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 fb55 	bl	800e7a6 <USBD_CtlError>
          break;
 800e0fc:	bf00      	nop
      }
      break;
 800e0fe:	e005      	b.n	800e10c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fb4f 	bl	800e7a6 <USBD_CtlError>
      break;
 800e108:	e000      	b.n	800e10c <USBD_StdEPReq+0x330>
      break;
 800e10a:	bf00      	nop
  }

  return ret;
 800e10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3710      	adds	r7, #16
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}
	...

0800e118 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b084      	sub	sp, #16
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e122:	2300      	movs	r3, #0
 800e124:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e126:	2300      	movs	r3, #0
 800e128:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e12a:	2300      	movs	r3, #0
 800e12c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	885b      	ldrh	r3, [r3, #2]
 800e132:	0a1b      	lsrs	r3, r3, #8
 800e134:	b29b      	uxth	r3, r3
 800e136:	3b01      	subs	r3, #1
 800e138:	2b06      	cmp	r3, #6
 800e13a:	f200 8128 	bhi.w	800e38e <USBD_GetDescriptor+0x276>
 800e13e:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <USBD_GetDescriptor+0x2c>)
 800e140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e144:	0800e161 	.word	0x0800e161
 800e148:	0800e179 	.word	0x0800e179
 800e14c:	0800e1b9 	.word	0x0800e1b9
 800e150:	0800e38f 	.word	0x0800e38f
 800e154:	0800e38f 	.word	0x0800e38f
 800e158:	0800e32f 	.word	0x0800e32f
 800e15c:	0800e35b 	.word	0x0800e35b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	7c12      	ldrb	r2, [r2, #16]
 800e16c:	f107 0108 	add.w	r1, r7, #8
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	60f8      	str	r0, [r7, #12]
      break;
 800e176:	e112      	b.n	800e39e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	7c1b      	ldrb	r3, [r3, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10d      	bne.n	800e19c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e188:	f107 0208 	add.w	r2, r7, #8
 800e18c:	4610      	mov	r0, r2
 800e18e:	4798      	blx	r3
 800e190:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3301      	adds	r3, #1
 800e196:	2202      	movs	r2, #2
 800e198:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e19a:	e100      	b.n	800e39e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a4:	f107 0208 	add.w	r2, r7, #8
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	4798      	blx	r3
 800e1ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	701a      	strb	r2, [r3, #0]
      break;
 800e1b6:	e0f2      	b.n	800e39e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	885b      	ldrh	r3, [r3, #2]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	f200 80ac 	bhi.w	800e31c <USBD_GetDescriptor+0x204>
 800e1c4:	a201      	add	r2, pc, #4	; (adr r2, 800e1cc <USBD_GetDescriptor+0xb4>)
 800e1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ca:	bf00      	nop
 800e1cc:	0800e1e5 	.word	0x0800e1e5
 800e1d0:	0800e219 	.word	0x0800e219
 800e1d4:	0800e24d 	.word	0x0800e24d
 800e1d8:	0800e281 	.word	0x0800e281
 800e1dc:	0800e2b5 	.word	0x0800e2b5
 800e1e0:	0800e2e9 	.word	0x0800e2e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00b      	beq.n	800e208 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e206:	e091      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 facb 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	3301      	adds	r3, #1
 800e214:	72fb      	strb	r3, [r7, #11]
          break;
 800e216:	e089      	b.n	800e32c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00b      	beq.n	800e23c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	7c12      	ldrb	r2, [r2, #16]
 800e230:	f107 0108 	add.w	r1, r7, #8
 800e234:	4610      	mov	r0, r2
 800e236:	4798      	blx	r3
 800e238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e23a:	e077      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fab1 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e244:	7afb      	ldrb	r3, [r7, #11]
 800e246:	3301      	adds	r3, #1
 800e248:	72fb      	strb	r3, [r7, #11]
          break;
 800e24a:	e06f      	b.n	800e32c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	7c12      	ldrb	r2, [r2, #16]
 800e264:	f107 0108 	add.w	r1, r7, #8
 800e268:	4610      	mov	r0, r2
 800e26a:	4798      	blx	r3
 800e26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e26e:	e05d      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fa97 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e278:	7afb      	ldrb	r3, [r7, #11]
 800e27a:	3301      	adds	r3, #1
 800e27c:	72fb      	strb	r3, [r7, #11]
          break;
 800e27e:	e055      	b.n	800e32c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00b      	beq.n	800e2a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	7c12      	ldrb	r2, [r2, #16]
 800e298:	f107 0108 	add.w	r1, r7, #8
 800e29c:	4610      	mov	r0, r2
 800e29e:	4798      	blx	r3
 800e2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2a2:	e043      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa7d 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e2ac:	7afb      	ldrb	r3, [r7, #11]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2b2:	e03b      	b.n	800e32c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	7c12      	ldrb	r2, [r2, #16]
 800e2cc:	f107 0108 	add.w	r1, r7, #8
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	4798      	blx	r3
 800e2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2d6:	e029      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa63 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e2e0:	7afb      	ldrb	r3, [r7, #11]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2e6:	e021      	b.n	800e32c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	7c12      	ldrb	r2, [r2, #16]
 800e300:	f107 0108 	add.w	r1, r7, #8
 800e304:	4610      	mov	r0, r2
 800e306:	4798      	blx	r3
 800e308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e30a:	e00f      	b.n	800e32c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fa49 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e314:	7afb      	ldrb	r3, [r7, #11]
 800e316:	3301      	adds	r3, #1
 800e318:	72fb      	strb	r3, [r7, #11]
          break;
 800e31a:	e007      	b.n	800e32c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 fa41 	bl	800e7a6 <USBD_CtlError>
          err++;
 800e324:	7afb      	ldrb	r3, [r7, #11]
 800e326:	3301      	adds	r3, #1
 800e328:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e32a:	bf00      	nop
      }
      break;
 800e32c:	e037      	b.n	800e39e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7c1b      	ldrb	r3, [r3, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e33c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e33e:	f107 0208 	add.w	r2, r7, #8
 800e342:	4610      	mov	r0, r2
 800e344:	4798      	blx	r3
 800e346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e348:	e029      	b.n	800e39e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e34a:	6839      	ldr	r1, [r7, #0]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fa2a 	bl	800e7a6 <USBD_CtlError>
        err++;
 800e352:	7afb      	ldrb	r3, [r7, #11]
 800e354:	3301      	adds	r3, #1
 800e356:	72fb      	strb	r3, [r7, #11]
      break;
 800e358:	e021      	b.n	800e39e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	7c1b      	ldrb	r3, [r3, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10d      	bne.n	800e37e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e36a:	f107 0208 	add.w	r2, r7, #8
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
 800e372:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3301      	adds	r3, #1
 800e378:	2207      	movs	r2, #7
 800e37a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e37c:	e00f      	b.n	800e39e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fa10 	bl	800e7a6 <USBD_CtlError>
        err++;
 800e386:	7afb      	ldrb	r3, [r7, #11]
 800e388:	3301      	adds	r3, #1
 800e38a:	72fb      	strb	r3, [r7, #11]
      break;
 800e38c:	e007      	b.n	800e39e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e38e:	6839      	ldr	r1, [r7, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fa08 	bl	800e7a6 <USBD_CtlError>
      err++;
 800e396:	7afb      	ldrb	r3, [r7, #11]
 800e398:	3301      	adds	r3, #1
 800e39a:	72fb      	strb	r3, [r7, #11]
      break;
 800e39c:	bf00      	nop
  }

  if (err != 0U)
 800e39e:	7afb      	ldrb	r3, [r7, #11]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d11e      	bne.n	800e3e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	88db      	ldrh	r3, [r3, #6]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d016      	beq.n	800e3da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e3ac:	893b      	ldrh	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00e      	beq.n	800e3d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	88da      	ldrh	r2, [r3, #6]
 800e3b6:	893b      	ldrh	r3, [r7, #8]
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	bf28      	it	cs
 800e3bc:	4613      	movcs	r3, r2
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3c2:	893b      	ldrh	r3, [r7, #8]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	68f9      	ldr	r1, [r7, #12]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fa5d 	bl	800e888 <USBD_CtlSendData>
 800e3ce:	e009      	b.n	800e3e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f9e7 	bl	800e7a6 <USBD_CtlError>
 800e3d8:	e004      	b.n	800e3e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 faae 	bl	800e93c <USBD_CtlSendStatus>
 800e3e0:	e000      	b.n	800e3e4 <USBD_GetDescriptor+0x2cc>
    return;
 800e3e2:	bf00      	nop
  }
}
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop

0800e3ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	889b      	ldrh	r3, [r3, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d131      	bne.n	800e462 <USBD_SetAddress+0x76>
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d12d      	bne.n	800e462 <USBD_SetAddress+0x76>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	885b      	ldrh	r3, [r3, #2]
 800e40a:	2b7f      	cmp	r3, #127	; 0x7f
 800e40c:	d829      	bhi.n	800e462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	885b      	ldrh	r3, [r3, #2]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b03      	cmp	r3, #3
 800e424:	d104      	bne.n	800e430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f9bc 	bl	800e7a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e42e:	e01d      	b.n	800e46c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	7bfa      	ldrb	r2, [r7, #15]
 800e434:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 ff07 	bl	800f250 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fa7a 	bl	800e93c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d004      	beq.n	800e458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2202      	movs	r2, #2
 800e452:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e456:	e009      	b.n	800e46c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e460:	e004      	b.n	800e46c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f99e 	bl	800e7a6 <USBD_CtlError>
  }
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	885b      	ldrh	r3, [r3, #2]
 800e486:	b2da      	uxtb	r2, r3
 800e488:	4b4e      	ldr	r3, [pc, #312]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e48a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e48c:	4b4d      	ldr	r3, [pc, #308]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d905      	bls.n	800e4a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f985 	bl	800e7a6 <USBD_CtlError>
    return USBD_FAIL;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e08c      	b.n	800e5ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d002      	beq.n	800e4b2 <USBD_SetConfig+0x3e>
 800e4ac:	2b03      	cmp	r3, #3
 800e4ae:	d029      	beq.n	800e504 <USBD_SetConfig+0x90>
 800e4b0:	e075      	b.n	800e59e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4b2:	4b44      	ldr	r3, [pc, #272]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d020      	beq.n	800e4fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4ba:	4b42      	ldr	r3, [pc, #264]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4c4:	4b3f      	ldr	r3, [pc, #252]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7fe ffe7 	bl	800d49e <USBD_SetClassConfig>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d008      	beq.n	800e4ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f962 	bl	800e7a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4ea:	e065      	b.n	800e5b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fa25 	bl	800e93c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e4fa:	e05d      	b.n	800e5b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fa1d 	bl	800e93c <USBD_CtlSendStatus>
      break;
 800e502:	e059      	b.n	800e5b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e504:	4b2f      	ldr	r3, [pc, #188]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d112      	bne.n	800e532 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e514:	4b2b      	ldr	r3, [pc, #172]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e51e:	4b29      	ldr	r3, [pc, #164]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7fe ffd6 	bl	800d4d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 fa06 	bl	800e93c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e530:	e042      	b.n	800e5b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e532:	4b24      	ldr	r3, [pc, #144]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d02a      	beq.n	800e596 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7fe ffc4 	bl	800d4d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e54e:	4b1d      	ldr	r3, [pc, #116]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e558:	4b1a      	ldr	r3, [pc, #104]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7fe ff9d 	bl	800d49e <USBD_SetClassConfig>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00f      	beq.n	800e58e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f918 	bl	800e7a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fe ffa9 	bl	800d4d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e58c:	e014      	b.n	800e5b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f9d4 	bl	800e93c <USBD_CtlSendStatus>
      break;
 800e594:	e010      	b.n	800e5b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f9d0 	bl	800e93c <USBD_CtlSendStatus>
      break;
 800e59c:	e00c      	b.n	800e5b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f900 	bl	800e7a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5a6:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <USBD_SetConfig+0x150>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7fe ff92 	bl	800d4d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b6:	bf00      	nop
  }

  return ret;
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20004f9c 	.word	0x20004f9c

0800e5c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	88db      	ldrh	r3, [r3, #6]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d004      	beq.n	800e5e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f8e2 	bl	800e7a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5e2:	e023      	b.n	800e62c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	dc02      	bgt.n	800e5f6 <USBD_GetConfig+0x2e>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dc03      	bgt.n	800e5fc <USBD_GetConfig+0x34>
 800e5f4:	e015      	b.n	800e622 <USBD_GetConfig+0x5a>
 800e5f6:	2b03      	cmp	r3, #3
 800e5f8:	d00b      	beq.n	800e612 <USBD_GetConfig+0x4a>
 800e5fa:	e012      	b.n	800e622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3308      	adds	r3, #8
 800e606:	2201      	movs	r2, #1
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f93c 	bl	800e888 <USBD_CtlSendData>
        break;
 800e610:	e00c      	b.n	800e62c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3304      	adds	r3, #4
 800e616:	2201      	movs	r2, #1
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f934 	bl	800e888 <USBD_CtlSendData>
        break;
 800e620:	e004      	b.n	800e62c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f8be 	bl	800e7a6 <USBD_CtlError>
        break;
 800e62a:	bf00      	nop
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	3b01      	subs	r3, #1
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d81e      	bhi.n	800e68a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	2b02      	cmp	r3, #2
 800e652:	d004      	beq.n	800e65e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f8a5 	bl	800e7a6 <USBD_CtlError>
        break;
 800e65c:	e01a      	b.n	800e694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	f043 0202 	orr.w	r2, r3, #2
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	330c      	adds	r3, #12
 800e67e:	2202      	movs	r2, #2
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f900 	bl	800e888 <USBD_CtlSendData>
      break;
 800e688:	e004      	b.n	800e694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f88a 	bl	800e7a6 <USBD_CtlError>
      break;
 800e692:	bf00      	nop
  }
}
 800e694:	bf00      	nop
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	885b      	ldrh	r3, [r3, #2]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d107      	bne.n	800e6be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f940 	bl	800e93c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6bc:	e013      	b.n	800e6e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d10b      	bne.n	800e6de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	889b      	ldrh	r3, [r3, #4]
 800e6ca:	0a1b      	lsrs	r3, r3, #8
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f930 	bl	800e93c <USBD_CtlSendStatus>
}
 800e6dc:	e003      	b.n	800e6e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f860 	bl	800e7a6 <USBD_CtlError>
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	3b01      	subs	r3, #1
 800e702:	2b02      	cmp	r3, #2
 800e704:	d80b      	bhi.n	800e71e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	885b      	ldrh	r3, [r3, #2]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d10c      	bne.n	800e728 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f910 	bl	800e93c <USBD_CtlSendStatus>
      }
      break;
 800e71c:	e004      	b.n	800e728 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f840 	bl	800e7a6 <USBD_CtlError>
      break;
 800e726:	e000      	b.n	800e72a <USBD_ClrFeature+0x3c>
      break;
 800e728:	bf00      	nop
  }
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	781a      	ldrb	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	781a      	ldrb	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3301      	adds	r3, #1
 800e75a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff fa41 	bl	800dbe4 <SWAPBYTE>
 800e762:	4603      	mov	r3, r0
 800e764:	461a      	mov	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3301      	adds	r3, #1
 800e76e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3301      	adds	r3, #1
 800e774:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff fa34 	bl	800dbe4 <SWAPBYTE>
 800e77c:	4603      	mov	r3, r0
 800e77e:	461a      	mov	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3301      	adds	r3, #1
 800e78e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff fa27 	bl	800dbe4 <SWAPBYTE>
 800e796:	4603      	mov	r3, r0
 800e798:	461a      	mov	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	80da      	strh	r2, [r3, #6]
}
 800e79e:	bf00      	nop
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7b0:	2180      	movs	r1, #128	; 0x80
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fce2 	bl	800f17c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fcde 	bl	800f17c <USBD_LL_StallEP>
}
 800e7c0:	bf00      	nop
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d036      	beq.n	800e84c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e7e2:	6938      	ldr	r0, [r7, #16]
 800e7e4:	f000 f836 	bl	800e854 <USBD_GetLen>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	005b      	lsls	r3, r3, #1
 800e7f0:	b29a      	uxth	r2, r3
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e7f6:	7dfb      	ldrb	r3, [r7, #23]
 800e7f8:	68ba      	ldr	r2, [r7, #8]
 800e7fa:	4413      	add	r3, r2
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	7812      	ldrb	r2, [r2, #0]
 800e800:	701a      	strb	r2, [r3, #0]
  idx++;
 800e802:	7dfb      	ldrb	r3, [r7, #23]
 800e804:	3301      	adds	r3, #1
 800e806:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e808:	7dfb      	ldrb	r3, [r7, #23]
 800e80a:	68ba      	ldr	r2, [r7, #8]
 800e80c:	4413      	add	r3, r2
 800e80e:	2203      	movs	r2, #3
 800e810:	701a      	strb	r2, [r3, #0]
  idx++;
 800e812:	7dfb      	ldrb	r3, [r7, #23]
 800e814:	3301      	adds	r3, #1
 800e816:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e818:	e013      	b.n	800e842 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	68ba      	ldr	r2, [r7, #8]
 800e81e:	4413      	add	r3, r2
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	7812      	ldrb	r2, [r2, #0]
 800e824:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	3301      	adds	r3, #1
 800e82a:	613b      	str	r3, [r7, #16]
    idx++;
 800e82c:	7dfb      	ldrb	r3, [r7, #23]
 800e82e:	3301      	adds	r3, #1
 800e830:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	4413      	add	r3, r2
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
    idx++;
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	3301      	adds	r3, #1
 800e840:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e842:	693b      	ldr	r3, [r7, #16]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d1e7      	bne.n	800e81a <USBD_GetString+0x52>
 800e84a:	e000      	b.n	800e84e <USBD_GetString+0x86>
    return;
 800e84c:	bf00      	nop
  }
}
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e854:	b480      	push	{r7}
 800e856:	b085      	sub	sp, #20
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e85c:	2300      	movs	r3, #0
 800e85e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e864:	e005      	b.n	800e872 <USBD_GetLen+0x1e>
  {
    len++;
 800e866:	7bfb      	ldrb	r3, [r7, #15]
 800e868:	3301      	adds	r3, #1
 800e86a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e86c:	68bb      	ldr	r3, [r7, #8]
 800e86e:	3301      	adds	r3, #1
 800e870:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e872:	68bb      	ldr	r3, [r7, #8]
 800e874:	781b      	ldrb	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1f5      	bne.n	800e866 <USBD_GetLen+0x12>
  }

  return len;
 800e87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3714      	adds	r7, #20
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	2202      	movs	r2, #2
 800e898:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	68ba      	ldr	r2, [r7, #8]
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	68f8      	ldr	r0, [r7, #12]
 800e8b0:	f000 fced 	bl	800f28e <USBD_LL_Transmit>

  return USBD_OK;
 800e8b4:	2300      	movs	r3, #0
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b084      	sub	sp, #16
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	60f8      	str	r0, [r7, #12]
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68ba      	ldr	r2, [r7, #8]
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	68f8      	ldr	r0, [r7, #12]
 800e8d2:	f000 fcdc 	bl	800f28e <USBD_LL_Transmit>

  return USBD_OK;
 800e8d6:	2300      	movs	r3, #0
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	3710      	adds	r7, #16
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b084      	sub	sp, #16
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2203      	movs	r2, #3
 800e8f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	687a      	ldr	r2, [r7, #4]
 800e8f8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	68ba      	ldr	r2, [r7, #8]
 800e908:	2100      	movs	r1, #0
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f000 fce0 	bl	800f2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e910:	2300      	movs	r3, #0
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b084      	sub	sp, #16
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68ba      	ldr	r2, [r7, #8]
 800e92a:	2100      	movs	r1, #0
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f000 fccf 	bl	800f2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e932:	2300      	movs	r3, #0
}
 800e934:	4618      	mov	r0, r3
 800e936:	3710      	adds	r7, #16
 800e938:	46bd      	mov	sp, r7
 800e93a:	bd80      	pop	{r7, pc}

0800e93c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b082      	sub	sp, #8
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	2204      	movs	r2, #4
 800e948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e94c:	2300      	movs	r3, #0
 800e94e:	2200      	movs	r2, #0
 800e950:	2100      	movs	r1, #0
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f000 fc9b 	bl	800f28e <USBD_LL_Transmit>

  return USBD_OK;
 800e958:	2300      	movs	r3, #0
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3708      	adds	r7, #8
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}

0800e962 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e962:	b580      	push	{r7, lr}
 800e964:	b082      	sub	sp, #8
 800e966:	af00      	add	r7, sp, #0
 800e968:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	2205      	movs	r2, #5
 800e96e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e972:	2300      	movs	r3, #0
 800e974:	2200      	movs	r2, #0
 800e976:	2100      	movs	r1, #0
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fca9 	bl	800f2d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3708      	adds	r7, #8
 800e984:	46bd      	mov	sp, r7
 800e986:	bd80      	pop	{r7, pc}

0800e988 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e98c:	2201      	movs	r2, #1
 800e98e:	4912      	ldr	r1, [pc, #72]	; (800e9d8 <MX_USB_DEVICE_Init+0x50>)
 800e990:	4812      	ldr	r0, [pc, #72]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e992:	f7fe fd07 	bl	800d3a4 <USBD_Init>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e99c:	f7f2 fff4 	bl	8001988 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e9a0:	490f      	ldr	r1, [pc, #60]	; (800e9e0 <MX_USB_DEVICE_Init+0x58>)
 800e9a2:	480e      	ldr	r0, [pc, #56]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9a4:	f7fe fd2e 	bl	800d404 <USBD_RegisterClass>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e9ae:	f7f2 ffeb 	bl	8001988 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e9b2:	490c      	ldr	r1, [pc, #48]	; (800e9e4 <MX_USB_DEVICE_Init+0x5c>)
 800e9b4:	4809      	ldr	r0, [pc, #36]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9b6:	f7fe fc1f 	bl	800d1f8 <USBD_CDC_RegisterInterface>
 800e9ba:	4603      	mov	r3, r0
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d001      	beq.n	800e9c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e9c0:	f7f2 ffe2 	bl	8001988 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e9c4:	4805      	ldr	r0, [pc, #20]	; (800e9dc <MX_USB_DEVICE_Init+0x54>)
 800e9c6:	f7fe fd53 	bl	800d470 <USBD_Start>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d001      	beq.n	800e9d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e9d0:	f7f2 ffda 	bl	8001988 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e9d4:	bf00      	nop
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	2000012c 	.word	0x2000012c
 800e9dc:	20004fa0 	.word	0x20004fa0
 800e9e0:	20000098 	.word	0x20000098
 800e9e4:	20000118 	.word	0x20000118

0800e9e8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	4905      	ldr	r1, [pc, #20]	; (800ea04 <CDC_Init_HS+0x1c>)
 800e9f0:	4805      	ldr	r0, [pc, #20]	; (800ea08 <CDC_Init_HS+0x20>)
 800e9f2:	f7fe fc1b 	bl	800d22c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e9f6:	4905      	ldr	r1, [pc, #20]	; (800ea0c <CDC_Init_HS+0x24>)
 800e9f8:	4803      	ldr	r0, [pc, #12]	; (800ea08 <CDC_Init_HS+0x20>)
 800e9fa:	f7fe fc39 	bl	800d270 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e9fe:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	20005a7c 	.word	0x20005a7c
 800ea08:	20004fa0 	.word	0x20004fa0
 800ea0c:	2000527c 	.word	0x2000527c

0800ea10 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ea10:	b480      	push	{r7}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ea14:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea20:	b480      	push	{r7}
 800ea22:	b083      	sub	sp, #12
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	4603      	mov	r3, r0
 800ea28:	6039      	str	r1, [r7, #0]
 800ea2a:	71fb      	strb	r3, [r7, #7]
 800ea2c:	4613      	mov	r3, r2
 800ea2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ea30:	79fb      	ldrb	r3, [r7, #7]
 800ea32:	2b23      	cmp	r3, #35	; 0x23
 800ea34:	d84a      	bhi.n	800eacc <CDC_Control_HS+0xac>
 800ea36:	a201      	add	r2, pc, #4	; (adr r2, 800ea3c <CDC_Control_HS+0x1c>)
 800ea38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea3c:	0800eacd 	.word	0x0800eacd
 800ea40:	0800eacd 	.word	0x0800eacd
 800ea44:	0800eacd 	.word	0x0800eacd
 800ea48:	0800eacd 	.word	0x0800eacd
 800ea4c:	0800eacd 	.word	0x0800eacd
 800ea50:	0800eacd 	.word	0x0800eacd
 800ea54:	0800eacd 	.word	0x0800eacd
 800ea58:	0800eacd 	.word	0x0800eacd
 800ea5c:	0800eacd 	.word	0x0800eacd
 800ea60:	0800eacd 	.word	0x0800eacd
 800ea64:	0800eacd 	.word	0x0800eacd
 800ea68:	0800eacd 	.word	0x0800eacd
 800ea6c:	0800eacd 	.word	0x0800eacd
 800ea70:	0800eacd 	.word	0x0800eacd
 800ea74:	0800eacd 	.word	0x0800eacd
 800ea78:	0800eacd 	.word	0x0800eacd
 800ea7c:	0800eacd 	.word	0x0800eacd
 800ea80:	0800eacd 	.word	0x0800eacd
 800ea84:	0800eacd 	.word	0x0800eacd
 800ea88:	0800eacd 	.word	0x0800eacd
 800ea8c:	0800eacd 	.word	0x0800eacd
 800ea90:	0800eacd 	.word	0x0800eacd
 800ea94:	0800eacd 	.word	0x0800eacd
 800ea98:	0800eacd 	.word	0x0800eacd
 800ea9c:	0800eacd 	.word	0x0800eacd
 800eaa0:	0800eacd 	.word	0x0800eacd
 800eaa4:	0800eacd 	.word	0x0800eacd
 800eaa8:	0800eacd 	.word	0x0800eacd
 800eaac:	0800eacd 	.word	0x0800eacd
 800eab0:	0800eacd 	.word	0x0800eacd
 800eab4:	0800eacd 	.word	0x0800eacd
 800eab8:	0800eacd 	.word	0x0800eacd
 800eabc:	0800eacd 	.word	0x0800eacd
 800eac0:	0800eacd 	.word	0x0800eacd
 800eac4:	0800eacd 	.word	0x0800eacd
 800eac8:	0800eacd 	.word	0x0800eacd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eacc:	bf00      	nop
  }

  return (USBD_OK);
 800eace:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b082      	sub	sp, #8
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
 800eae4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800eae6:	6879      	ldr	r1, [r7, #4]
 800eae8:	4805      	ldr	r0, [pc, #20]	; (800eb00 <CDC_Receive_HS+0x24>)
 800eaea:	f7fe fbc1 	bl	800d270 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800eaee:	4804      	ldr	r0, [pc, #16]	; (800eb00 <CDC_Receive_HS+0x24>)
 800eaf0:	f7fe fc22 	bl	800d338 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eaf4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
 800eafe:	bf00      	nop
 800eb00:	20004fa0 	.word	0x20004fa0

0800eb04 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b084      	sub	sp, #16
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	460b      	mov	r3, r1
 800eb0e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eb10:	2300      	movs	r3, #0
 800eb12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800eb14:	4b0d      	ldr	r3, [pc, #52]	; (800eb4c <CDC_Transmit_HS+0x48>)
 800eb16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb1a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eb1c:	68bb      	ldr	r3, [r7, #8]
 800eb1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800eb26:	2301      	movs	r3, #1
 800eb28:	e00b      	b.n	800eb42 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800eb2a:	887b      	ldrh	r3, [r7, #2]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	4806      	ldr	r0, [pc, #24]	; (800eb4c <CDC_Transmit_HS+0x48>)
 800eb32:	f7fe fb7b 	bl	800d22c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800eb36:	4805      	ldr	r0, [pc, #20]	; (800eb4c <CDC_Transmit_HS+0x48>)
 800eb38:	f7fe fbb8 	bl	800d2ac <USBD_CDC_TransmitPacket>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800eb40:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	20004fa0 	.word	0x20004fa0

0800eb50 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b087      	sub	sp, #28
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800eb62:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	371c      	adds	r7, #28
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
	...

0800eb74 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	6039      	str	r1, [r7, #0]
 800eb7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	2212      	movs	r2, #18
 800eb84:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800eb86:	4b03      	ldr	r3, [pc, #12]	; (800eb94 <USBD_HS_DeviceDescriptor+0x20>)
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	20000148 	.word	0x20000148

0800eb98 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	4603      	mov	r3, r0
 800eba0:	6039      	str	r1, [r7, #0]
 800eba2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eba4:	683b      	ldr	r3, [r7, #0]
 800eba6:	2204      	movs	r2, #4
 800eba8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ebaa:	4b03      	ldr	r3, [pc, #12]	; (800ebb8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	370c      	adds	r7, #12
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr
 800ebb8:	2000015c 	.word	0x2000015c

0800ebbc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b082      	sub	sp, #8
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	4603      	mov	r3, r0
 800ebc4:	6039      	str	r1, [r7, #0]
 800ebc6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebc8:	79fb      	ldrb	r3, [r7, #7]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d105      	bne.n	800ebda <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	4907      	ldr	r1, [pc, #28]	; (800ebf0 <USBD_HS_ProductStrDescriptor+0x34>)
 800ebd2:	4808      	ldr	r0, [pc, #32]	; (800ebf4 <USBD_HS_ProductStrDescriptor+0x38>)
 800ebd4:	f7ff fdf8 	bl	800e7c8 <USBD_GetString>
 800ebd8:	e004      	b.n	800ebe4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ebda:	683a      	ldr	r2, [r7, #0]
 800ebdc:	4904      	ldr	r1, [pc, #16]	; (800ebf0 <USBD_HS_ProductStrDescriptor+0x34>)
 800ebde:	4805      	ldr	r0, [pc, #20]	; (800ebf4 <USBD_HS_ProductStrDescriptor+0x38>)
 800ebe0:	f7ff fdf2 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebe4:	4b02      	ldr	r3, [pc, #8]	; (800ebf0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3708      	adds	r7, #8
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	2000627c 	.word	0x2000627c
 800ebf4:	08013d9c 	.word	0x08013d9c

0800ebf8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	6039      	str	r1, [r7, #0]
 800ec02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec04:	683a      	ldr	r2, [r7, #0]
 800ec06:	4904      	ldr	r1, [pc, #16]	; (800ec18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ec08:	4804      	ldr	r0, [pc, #16]	; (800ec1c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ec0a:	f7ff fddd 	bl	800e7c8 <USBD_GetString>
  return USBD_StrDesc;
 800ec0e:	4b02      	ldr	r3, [pc, #8]	; (800ec18 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	3708      	adds	r7, #8
 800ec14:	46bd      	mov	sp, r7
 800ec16:	bd80      	pop	{r7, pc}
 800ec18:	2000627c 	.word	0x2000627c
 800ec1c:	08013db4 	.word	0x08013db4

0800ec20 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b082      	sub	sp, #8
 800ec24:	af00      	add	r7, sp, #0
 800ec26:	4603      	mov	r3, r0
 800ec28:	6039      	str	r1, [r7, #0]
 800ec2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	221a      	movs	r2, #26
 800ec30:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec32:	f000 f843 	bl	800ecbc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ec36:	4b02      	ldr	r3, [pc, #8]	; (800ec40 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20000160 	.word	0x20000160

0800ec44 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b082      	sub	sp, #8
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	6039      	str	r1, [r7, #0]
 800ec4e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec50:	79fb      	ldrb	r3, [r7, #7]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d105      	bne.n	800ec62 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	4907      	ldr	r1, [pc, #28]	; (800ec78 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ec5a:	4808      	ldr	r0, [pc, #32]	; (800ec7c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ec5c:	f7ff fdb4 	bl	800e7c8 <USBD_GetString>
 800ec60:	e004      	b.n	800ec6c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ec62:	683a      	ldr	r2, [r7, #0]
 800ec64:	4904      	ldr	r1, [pc, #16]	; (800ec78 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ec66:	4805      	ldr	r0, [pc, #20]	; (800ec7c <USBD_HS_ConfigStrDescriptor+0x38>)
 800ec68:	f7ff fdae 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec6c:	4b02      	ldr	r3, [pc, #8]	; (800ec78 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	2000627c 	.word	0x2000627c
 800ec7c:	08013dc8 	.word	0x08013dc8

0800ec80 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	6039      	str	r1, [r7, #0]
 800ec8a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec8c:	79fb      	ldrb	r3, [r7, #7]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d105      	bne.n	800ec9e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec92:	683a      	ldr	r2, [r7, #0]
 800ec94:	4907      	ldr	r1, [pc, #28]	; (800ecb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ec96:	4808      	ldr	r0, [pc, #32]	; (800ecb8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ec98:	f7ff fd96 	bl	800e7c8 <USBD_GetString>
 800ec9c:	e004      	b.n	800eca8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	4904      	ldr	r1, [pc, #16]	; (800ecb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800eca2:	4805      	ldr	r0, [pc, #20]	; (800ecb8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800eca4:	f7ff fd90 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eca8:	4b02      	ldr	r3, [pc, #8]	; (800ecb4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3708      	adds	r7, #8
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	2000627c 	.word	0x2000627c
 800ecb8:	08013dd4 	.word	0x08013dd4

0800ecbc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ecc2:	4b0f      	ldr	r3, [pc, #60]	; (800ed00 <Get_SerialNum+0x44>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ecc8:	4b0e      	ldr	r3, [pc, #56]	; (800ed04 <Get_SerialNum+0x48>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ecce:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <Get_SerialNum+0x4c>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecd4:	68fa      	ldr	r2, [r7, #12]
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	4413      	add	r3, r2
 800ecda:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d009      	beq.n	800ecf6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ece2:	2208      	movs	r2, #8
 800ece4:	4909      	ldr	r1, [pc, #36]	; (800ed0c <Get_SerialNum+0x50>)
 800ece6:	68f8      	ldr	r0, [r7, #12]
 800ece8:	f000 f814 	bl	800ed14 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ecec:	2204      	movs	r2, #4
 800ecee:	4908      	ldr	r1, [pc, #32]	; (800ed10 <Get_SerialNum+0x54>)
 800ecf0:	68b8      	ldr	r0, [r7, #8]
 800ecf2:	f000 f80f 	bl	800ed14 <IntToUnicode>
  }
}
 800ecf6:	bf00      	nop
 800ecf8:	3710      	adds	r7, #16
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	1fff7a10 	.word	0x1fff7a10
 800ed04:	1fff7a14 	.word	0x1fff7a14
 800ed08:	1fff7a18 	.word	0x1fff7a18
 800ed0c:	20000162 	.word	0x20000162
 800ed10:	20000172 	.word	0x20000172

0800ed14 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed14:	b480      	push	{r7}
 800ed16:	b087      	sub	sp, #28
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	60f8      	str	r0, [r7, #12]
 800ed1c:	60b9      	str	r1, [r7, #8]
 800ed1e:	4613      	mov	r3, r2
 800ed20:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed26:	2300      	movs	r3, #0
 800ed28:	75fb      	strb	r3, [r7, #23]
 800ed2a:	e027      	b.n	800ed7c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	0f1b      	lsrs	r3, r3, #28
 800ed30:	2b09      	cmp	r3, #9
 800ed32:	d80b      	bhi.n	800ed4c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	0f1b      	lsrs	r3, r3, #28
 800ed38:	b2da      	uxtb	r2, r3
 800ed3a:	7dfb      	ldrb	r3, [r7, #23]
 800ed3c:	005b      	lsls	r3, r3, #1
 800ed3e:	4619      	mov	r1, r3
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	440b      	add	r3, r1
 800ed44:	3230      	adds	r2, #48	; 0x30
 800ed46:	b2d2      	uxtb	r2, r2
 800ed48:	701a      	strb	r2, [r3, #0]
 800ed4a:	e00a      	b.n	800ed62 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	0f1b      	lsrs	r3, r3, #28
 800ed50:	b2da      	uxtb	r2, r3
 800ed52:	7dfb      	ldrb	r3, [r7, #23]
 800ed54:	005b      	lsls	r3, r3, #1
 800ed56:	4619      	mov	r1, r3
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	440b      	add	r3, r1
 800ed5c:	3237      	adds	r2, #55	; 0x37
 800ed5e:	b2d2      	uxtb	r2, r2
 800ed60:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	011b      	lsls	r3, r3, #4
 800ed66:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed68:	7dfb      	ldrb	r3, [r7, #23]
 800ed6a:	005b      	lsls	r3, r3, #1
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	4413      	add	r3, r2
 800ed72:	2200      	movs	r2, #0
 800ed74:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed76:	7dfb      	ldrb	r3, [r7, #23]
 800ed78:	3301      	adds	r3, #1
 800ed7a:	75fb      	strb	r3, [r7, #23]
 800ed7c:	7dfa      	ldrb	r2, [r7, #23]
 800ed7e:	79fb      	ldrb	r3, [r7, #7]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d3d3      	bcc.n	800ed2c <IntToUnicode+0x18>
  }
}
 800ed84:	bf00      	nop
 800ed86:	bf00      	nop
 800ed88:	371c      	adds	r7, #28
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
	...

0800ed94 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ed94:	b580      	push	{r7, lr}
 800ed96:	b08a      	sub	sp, #40	; 0x28
 800ed98:	af00      	add	r7, sp, #0
 800ed9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ed9c:	f107 0314 	add.w	r3, r7, #20
 800eda0:	2200      	movs	r2, #0
 800eda2:	601a      	str	r2, [r3, #0]
 800eda4:	605a      	str	r2, [r3, #4]
 800eda6:	609a      	str	r2, [r3, #8]
 800eda8:	60da      	str	r2, [r3, #12]
 800edaa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a1d      	ldr	r2, [pc, #116]	; (800ee28 <HAL_PCD_MspInit+0x94>)
 800edb2:	4293      	cmp	r3, r2
 800edb4:	d134      	bne.n	800ee20 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800edb6:	2300      	movs	r3, #0
 800edb8:	613b      	str	r3, [r7, #16]
 800edba:	4b1c      	ldr	r3, [pc, #112]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800edbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edbe:	4a1b      	ldr	r2, [pc, #108]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800edc0:	f043 0302 	orr.w	r3, r3, #2
 800edc4:	6313      	str	r3, [r2, #48]	; 0x30
 800edc6:	4b19      	ldr	r3, [pc, #100]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800edc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edca:	f003 0302 	and.w	r3, r3, #2
 800edce:	613b      	str	r3, [r7, #16]
 800edd0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800edd2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800edd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edd8:	2302      	movs	r3, #2
 800edda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eddc:	2300      	movs	r3, #0
 800edde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ede0:	2303      	movs	r3, #3
 800ede2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ede4:	230c      	movs	r3, #12
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ede8:	f107 0314 	add.w	r3, r7, #20
 800edec:	4619      	mov	r1, r3
 800edee:	4810      	ldr	r0, [pc, #64]	; (800ee30 <HAL_PCD_MspInit+0x9c>)
 800edf0:	f7f5 fc0c 	bl	800460c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800edf4:	2300      	movs	r3, #0
 800edf6:	60fb      	str	r3, [r7, #12]
 800edf8:	4b0c      	ldr	r3, [pc, #48]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800edfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edfc:	4a0b      	ldr	r2, [pc, #44]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800edfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ee02:	6313      	str	r3, [r2, #48]	; 0x30
 800ee04:	4b09      	ldr	r3, [pc, #36]	; (800ee2c <HAL_PCD_MspInit+0x98>)
 800ee06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ee0c:	60fb      	str	r3, [r7, #12]
 800ee0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ee10:	2200      	movs	r2, #0
 800ee12:	2105      	movs	r1, #5
 800ee14:	204d      	movs	r0, #77	; 0x4d
 800ee16:	f7f4 ff7b 	bl	8003d10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ee1a:	204d      	movs	r0, #77	; 0x4d
 800ee1c:	f7f4 ff94 	bl	8003d48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ee20:	bf00      	nop
 800ee22:	3728      	adds	r7, #40	; 0x28
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}
 800ee28:	40040000 	.word	0x40040000
 800ee2c:	40023800 	.word	0x40023800
 800ee30:	40020400 	.word	0x40020400

0800ee34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b082      	sub	sp, #8
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f7fe fb5d 	bl	800d50a <USBD_LL_SetupStage>
}
 800ee50:	bf00      	nop
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	460b      	mov	r3, r1
 800ee62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ee6a:	78fa      	ldrb	r2, [r7, #3]
 800ee6c:	6879      	ldr	r1, [r7, #4]
 800ee6e:	4613      	mov	r3, r2
 800ee70:	00db      	lsls	r3, r3, #3
 800ee72:	4413      	add	r3, r2
 800ee74:	009b      	lsls	r3, r3, #2
 800ee76:	440b      	add	r3, r1
 800ee78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ee7c:	681a      	ldr	r2, [r3, #0]
 800ee7e:	78fb      	ldrb	r3, [r7, #3]
 800ee80:	4619      	mov	r1, r3
 800ee82:	f7fe fb97 	bl	800d5b4 <USBD_LL_DataOutStage>
}
 800ee86:	bf00      	nop
 800ee88:	3708      	adds	r7, #8
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b082      	sub	sp, #8
 800ee92:	af00      	add	r7, sp, #0
 800ee94:	6078      	str	r0, [r7, #4]
 800ee96:	460b      	mov	r3, r1
 800ee98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800eea0:	78fa      	ldrb	r2, [r7, #3]
 800eea2:	6879      	ldr	r1, [r7, #4]
 800eea4:	4613      	mov	r3, r2
 800eea6:	00db      	lsls	r3, r3, #3
 800eea8:	4413      	add	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	440b      	add	r3, r1
 800eeae:	334c      	adds	r3, #76	; 0x4c
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	78fb      	ldrb	r3, [r7, #3]
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	f7fe fc30 	bl	800d71a <USBD_LL_DataInStage>
}
 800eeba:	bf00      	nop
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b082      	sub	sp, #8
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fd64 	bl	800d99e <USBD_LL_SOF>
}
 800eed6:	bf00      	nop
 800eed8:	3708      	adds	r7, #8
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}

0800eede <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eede:	b580      	push	{r7, lr}
 800eee0:	b084      	sub	sp, #16
 800eee2:	af00      	add	r7, sp, #0
 800eee4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eee6:	2301      	movs	r3, #1
 800eee8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	68db      	ldr	r3, [r3, #12]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d102      	bne.n	800eef8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eef2:	2300      	movs	r3, #0
 800eef4:	73fb      	strb	r3, [r7, #15]
 800eef6:	e008      	b.n	800ef0a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	2b02      	cmp	r3, #2
 800eefe:	d102      	bne.n	800ef06 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ef00:	2301      	movs	r3, #1
 800ef02:	73fb      	strb	r3, [r7, #15]
 800ef04:	e001      	b.n	800ef0a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ef06:	f7f2 fd3f 	bl	8001988 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef10:	7bfa      	ldrb	r2, [r7, #15]
 800ef12:	4611      	mov	r1, r2
 800ef14:	4618      	mov	r0, r3
 800ef16:	f7fe fd04 	bl	800d922 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef20:	4618      	mov	r0, r3
 800ef22:	f7fe fcac 	bl	800d87e <USBD_LL_Reset>
}
 800ef26:	bf00      	nop
 800ef28:	3710      	adds	r7, #16
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b082      	sub	sp, #8
 800ef34:	af00      	add	r7, sp, #0
 800ef36:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f7fe fcff 	bl	800d942 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	687a      	ldr	r2, [r7, #4]
 800ef50:	6812      	ldr	r2, [r2, #0]
 800ef52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ef56:	f043 0301 	orr.w	r3, r3, #1
 800ef5a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	6a1b      	ldr	r3, [r3, #32]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d005      	beq.n	800ef70 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef64:	4b04      	ldr	r3, [pc, #16]	; (800ef78 <HAL_PCD_SuspendCallback+0x48>)
 800ef66:	691b      	ldr	r3, [r3, #16]
 800ef68:	4a03      	ldr	r2, [pc, #12]	; (800ef78 <HAL_PCD_SuspendCallback+0x48>)
 800ef6a:	f043 0306 	orr.w	r3, r3, #6
 800ef6e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}
 800ef78:	e000ed00 	.word	0xe000ed00

0800ef7c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b082      	sub	sp, #8
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f7fe fcef 	bl	800d96e <USBD_LL_Resume>
}
 800ef90:	bf00      	nop
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}

0800ef98 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b082      	sub	sp, #8
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	460b      	mov	r3, r1
 800efa2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efaa:	78fa      	ldrb	r2, [r7, #3]
 800efac:	4611      	mov	r1, r2
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fd47 	bl	800da42 <USBD_LL_IsoOUTIncomplete>
}
 800efb4:	bf00      	nop
 800efb6:	3708      	adds	r7, #8
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}

0800efbc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b082      	sub	sp, #8
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efce:	78fa      	ldrb	r2, [r7, #3]
 800efd0:	4611      	mov	r1, r2
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7fe fd03 	bl	800d9de <USBD_LL_IsoINIncomplete>
}
 800efd8:	bf00      	nop
 800efda:	3708      	adds	r7, #8
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b082      	sub	sp, #8
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe fd59 	bl	800daa6 <USBD_LL_DevConnected>
}
 800eff4:	bf00      	nop
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}

0800effc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7fe fd56 	bl	800dabc <USBD_LL_DevDisconnected>
}
 800f010:	bf00      	nop
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b01      	cmp	r3, #1
 800f026:	d140      	bne.n	800f0aa <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f028:	4a22      	ldr	r2, [pc, #136]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a20      	ldr	r2, [pc, #128]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f034:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f038:	4b1e      	ldr	r3, [pc, #120]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f03a:	4a1f      	ldr	r2, [pc, #124]	; (800f0b8 <USBD_LL_Init+0xa0>)
 800f03c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800f03e:	4b1d      	ldr	r3, [pc, #116]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f040:	2206      	movs	r2, #6
 800f042:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f044:	4b1b      	ldr	r3, [pc, #108]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f046:	2202      	movs	r2, #2
 800f048:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f04a:	4b1a      	ldr	r3, [pc, #104]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f050:	4b18      	ldr	r3, [pc, #96]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f052:	2202      	movs	r2, #2
 800f054:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f056:	4b17      	ldr	r3, [pc, #92]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f058:	2200      	movs	r2, #0
 800f05a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f05c:	4b15      	ldr	r3, [pc, #84]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f05e:	2200      	movs	r2, #0
 800f060:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f062:	4b14      	ldr	r3, [pc, #80]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f064:	2200      	movs	r2, #0
 800f066:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800f068:	4b12      	ldr	r3, [pc, #72]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f06e:	4b11      	ldr	r3, [pc, #68]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f070:	2200      	movs	r2, #0
 800f072:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f074:	4b0f      	ldr	r3, [pc, #60]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f076:	2200      	movs	r2, #0
 800f078:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f07a:	480e      	ldr	r0, [pc, #56]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f07c:	f7f5 ff65 	bl	8004f4a <HAL_PCD_Init>
 800f080:	4603      	mov	r3, r0
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f086:	f7f2 fc7f 	bl	8001988 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f08a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f08e:	4809      	ldr	r0, [pc, #36]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f090:	f7f7 f9bb 	bl	800640a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f094:	2280      	movs	r2, #128	; 0x80
 800f096:	2100      	movs	r1, #0
 800f098:	4806      	ldr	r0, [pc, #24]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f09a:	f7f7 f96f 	bl	800637c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f09e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800f0a2:	2101      	movs	r1, #1
 800f0a4:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <USBD_LL_Init+0x9c>)
 800f0a6:	f7f7 f969 	bl	800637c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f0aa:	2300      	movs	r3, #0
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}
 800f0b4:	2000647c 	.word	0x2000647c
 800f0b8:	40040000 	.word	0x40040000

0800f0bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f0bc:	b580      	push	{r7, lr}
 800f0be:	b084      	sub	sp, #16
 800f0c0:	af00      	add	r7, sp, #0
 800f0c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7f6 f856 	bl	8005184 <HAL_PCD_Start>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 f942 	bl	800f368 <USBD_Get_USB_Status>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	4608      	mov	r0, r1
 800f0fc:	4611      	mov	r1, r2
 800f0fe:	461a      	mov	r2, r3
 800f100:	4603      	mov	r3, r0
 800f102:	70fb      	strb	r3, [r7, #3]
 800f104:	460b      	mov	r3, r1
 800f106:	70bb      	strb	r3, [r7, #2]
 800f108:	4613      	mov	r3, r2
 800f10a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f10c:	2300      	movs	r3, #0
 800f10e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f11a:	78bb      	ldrb	r3, [r7, #2]
 800f11c:	883a      	ldrh	r2, [r7, #0]
 800f11e:	78f9      	ldrb	r1, [r7, #3]
 800f120:	f7f6 fd27 	bl	8005b72 <HAL_PCD_EP_Open>
 800f124:	4603      	mov	r3, r0
 800f126:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f128:	7bfb      	ldrb	r3, [r7, #15]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f000 f91c 	bl	800f368 <USBD_Get_USB_Status>
 800f130:	4603      	mov	r3, r0
 800f132:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f134:	7bbb      	ldrb	r3, [r7, #14]
}
 800f136:	4618      	mov	r0, r3
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}

0800f13e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f13e:	b580      	push	{r7, lr}
 800f140:	b084      	sub	sp, #16
 800f142:	af00      	add	r7, sp, #0
 800f144:	6078      	str	r0, [r7, #4]
 800f146:	460b      	mov	r3, r1
 800f148:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f14a:	2300      	movs	r3, #0
 800f14c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f158:	78fa      	ldrb	r2, [r7, #3]
 800f15a:	4611      	mov	r1, r2
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7f6 fd70 	bl	8005c42 <HAL_PCD_EP_Close>
 800f162:	4603      	mov	r3, r0
 800f164:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f166:	7bfb      	ldrb	r3, [r7, #15]
 800f168:	4618      	mov	r0, r3
 800f16a:	f000 f8fd 	bl	800f368 <USBD_Get_USB_Status>
 800f16e:	4603      	mov	r3, r0
 800f170:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f172:	7bbb      	ldrb	r3, [r7, #14]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3710      	adds	r7, #16
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b084      	sub	sp, #16
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	460b      	mov	r3, r1
 800f186:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f188:	2300      	movs	r3, #0
 800f18a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f196:	78fa      	ldrb	r2, [r7, #3]
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7f6 fe48 	bl	8005e30 <HAL_PCD_EP_SetStall>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1a4:	7bfb      	ldrb	r3, [r7, #15]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 f8de 	bl	800f368 <USBD_Get_USB_Status>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3710      	adds	r7, #16
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1ba:	b580      	push	{r7, lr}
 800f1bc:	b084      	sub	sp, #16
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	460b      	mov	r3, r1
 800f1c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1d4:	78fa      	ldrb	r2, [r7, #3]
 800f1d6:	4611      	mov	r1, r2
 800f1d8:	4618      	mov	r0, r3
 800f1da:	f7f6 fe8d 	bl	8005ef8 <HAL_PCD_EP_ClrStall>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1e2:	7bfb      	ldrb	r3, [r7, #15]
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 f8bf 	bl	800f368 <USBD_Get_USB_Status>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}

0800f1f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b085      	sub	sp, #20
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	460b      	mov	r3, r1
 800f202:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f20a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f20c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f210:	2b00      	cmp	r3, #0
 800f212:	da0b      	bge.n	800f22c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f214:	78fb      	ldrb	r3, [r7, #3]
 800f216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f21a:	68f9      	ldr	r1, [r7, #12]
 800f21c:	4613      	mov	r3, r2
 800f21e:	00db      	lsls	r3, r3, #3
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	440b      	add	r3, r1
 800f226:	333e      	adds	r3, #62	; 0x3e
 800f228:	781b      	ldrb	r3, [r3, #0]
 800f22a:	e00b      	b.n	800f244 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f22c:	78fb      	ldrb	r3, [r7, #3]
 800f22e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f232:	68f9      	ldr	r1, [r7, #12]
 800f234:	4613      	mov	r3, r2
 800f236:	00db      	lsls	r3, r3, #3
 800f238:	4413      	add	r3, r2
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	440b      	add	r3, r1
 800f23e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f242:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f244:	4618      	mov	r0, r3
 800f246:	3714      	adds	r7, #20
 800f248:	46bd      	mov	sp, r7
 800f24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24e:	4770      	bx	lr

0800f250 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f250:	b580      	push	{r7, lr}
 800f252:	b084      	sub	sp, #16
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
 800f258:	460b      	mov	r3, r1
 800f25a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f260:	2300      	movs	r3, #0
 800f262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f26a:	78fa      	ldrb	r2, [r7, #3]
 800f26c:	4611      	mov	r1, r2
 800f26e:	4618      	mov	r0, r3
 800f270:	f7f6 fc5a 	bl	8005b28 <HAL_PCD_SetAddress>
 800f274:	4603      	mov	r3, r0
 800f276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f278:	7bfb      	ldrb	r3, [r7, #15]
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 f874 	bl	800f368 <USBD_Get_USB_Status>
 800f280:	4603      	mov	r3, r0
 800f282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f284:	7bbb      	ldrb	r3, [r7, #14]
}
 800f286:	4618      	mov	r0, r3
 800f288:	3710      	adds	r7, #16
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}

0800f28e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f28e:	b580      	push	{r7, lr}
 800f290:	b086      	sub	sp, #24
 800f292:	af00      	add	r7, sp, #0
 800f294:	60f8      	str	r0, [r7, #12]
 800f296:	607a      	str	r2, [r7, #4]
 800f298:	603b      	str	r3, [r7, #0]
 800f29a:	460b      	mov	r3, r1
 800f29c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2ac:	7af9      	ldrb	r1, [r7, #11]
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	f7f6 fd73 	bl	8005d9c <HAL_PCD_EP_Transmit>
 800f2b6:	4603      	mov	r3, r0
 800f2b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2ba:	7dfb      	ldrb	r3, [r7, #23]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f000 f853 	bl	800f368 <USBD_Get_USB_Status>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2c6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3718      	adds	r7, #24
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b086      	sub	sp, #24
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	60f8      	str	r0, [r7, #12]
 800f2d8:	607a      	str	r2, [r7, #4]
 800f2da:	603b      	str	r3, [r7, #0]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f2ee:	7af9      	ldrb	r1, [r7, #11]
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	687a      	ldr	r2, [r7, #4]
 800f2f4:	f7f6 fcef 	bl	8005cd6 <HAL_PCD_EP_Receive>
 800f2f8:	4603      	mov	r3, r0
 800f2fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2fc:	7dfb      	ldrb	r3, [r7, #23]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 f832 	bl	800f368 <USBD_Get_USB_Status>
 800f304:	4603      	mov	r3, r0
 800f306:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f308:	7dbb      	ldrb	r3, [r7, #22]
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3718      	adds	r7, #24
 800f30e:	46bd      	mov	sp, r7
 800f310:	bd80      	pop	{r7, pc}

0800f312 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f312:	b580      	push	{r7, lr}
 800f314:	b082      	sub	sp, #8
 800f316:	af00      	add	r7, sp, #0
 800f318:	6078      	str	r0, [r7, #4]
 800f31a:	460b      	mov	r3, r1
 800f31c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f324:	78fa      	ldrb	r2, [r7, #3]
 800f326:	4611      	mov	r1, r2
 800f328:	4618      	mov	r0, r3
 800f32a:	f7f6 fd1f 	bl	8005d6c <HAL_PCD_EP_GetRxCount>
 800f32e:	4603      	mov	r3, r0
}
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f338:	b480      	push	{r7}
 800f33a:	b083      	sub	sp, #12
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f340:	4b03      	ldr	r3, [pc, #12]	; (800f350 <USBD_static_malloc+0x18>)
}
 800f342:	4618      	mov	r0, r3
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	20006988 	.word	0x20006988

0800f354 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f354:	b480      	push	{r7}
 800f356:	b083      	sub	sp, #12
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]

}
 800f35c:	bf00      	nop
 800f35e:	370c      	adds	r7, #12
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr

0800f368 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f368:	b480      	push	{r7}
 800f36a:	b085      	sub	sp, #20
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f376:	79fb      	ldrb	r3, [r7, #7]
 800f378:	2b03      	cmp	r3, #3
 800f37a:	d817      	bhi.n	800f3ac <USBD_Get_USB_Status+0x44>
 800f37c:	a201      	add	r2, pc, #4	; (adr r2, 800f384 <USBD_Get_USB_Status+0x1c>)
 800f37e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f382:	bf00      	nop
 800f384:	0800f395 	.word	0x0800f395
 800f388:	0800f39b 	.word	0x0800f39b
 800f38c:	0800f3a1 	.word	0x0800f3a1
 800f390:	0800f3a7 	.word	0x0800f3a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	73fb      	strb	r3, [r7, #15]
    break;
 800f398:	e00b      	b.n	800f3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f39a:	2303      	movs	r3, #3
 800f39c:	73fb      	strb	r3, [r7, #15]
    break;
 800f39e:	e008      	b.n	800f3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a4:	e005      	b.n	800f3b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3a6:	2303      	movs	r3, #3
 800f3a8:	73fb      	strb	r3, [r7, #15]
    break;
 800f3aa:	e002      	b.n	800f3b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f3ac:	2303      	movs	r3, #3
 800f3ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b0:	bf00      	nop
  }
  return usb_status;
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3714      	adds	r7, #20
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr

0800f3c0 <__errno>:
 800f3c0:	4b01      	ldr	r3, [pc, #4]	; (800f3c8 <__errno+0x8>)
 800f3c2:	6818      	ldr	r0, [r3, #0]
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop
 800f3c8:	2000017c 	.word	0x2000017c

0800f3cc <__libc_init_array>:
 800f3cc:	b570      	push	{r4, r5, r6, lr}
 800f3ce:	4d0d      	ldr	r5, [pc, #52]	; (800f404 <__libc_init_array+0x38>)
 800f3d0:	4c0d      	ldr	r4, [pc, #52]	; (800f408 <__libc_init_array+0x3c>)
 800f3d2:	1b64      	subs	r4, r4, r5
 800f3d4:	10a4      	asrs	r4, r4, #2
 800f3d6:	2600      	movs	r6, #0
 800f3d8:	42a6      	cmp	r6, r4
 800f3da:	d109      	bne.n	800f3f0 <__libc_init_array+0x24>
 800f3dc:	4d0b      	ldr	r5, [pc, #44]	; (800f40c <__libc_init_array+0x40>)
 800f3de:	4c0c      	ldr	r4, [pc, #48]	; (800f410 <__libc_init_array+0x44>)
 800f3e0:	f004 fc8e 	bl	8013d00 <_init>
 800f3e4:	1b64      	subs	r4, r4, r5
 800f3e6:	10a4      	asrs	r4, r4, #2
 800f3e8:	2600      	movs	r6, #0
 800f3ea:	42a6      	cmp	r6, r4
 800f3ec:	d105      	bne.n	800f3fa <__libc_init_array+0x2e>
 800f3ee:	bd70      	pop	{r4, r5, r6, pc}
 800f3f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3f4:	4798      	blx	r3
 800f3f6:	3601      	adds	r6, #1
 800f3f8:	e7ee      	b.n	800f3d8 <__libc_init_array+0xc>
 800f3fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800f3fe:	4798      	blx	r3
 800f400:	3601      	adds	r6, #1
 800f402:	e7f2      	b.n	800f3ea <__libc_init_array+0x1e>
 800f404:	08015dd4 	.word	0x08015dd4
 800f408:	08015dd4 	.word	0x08015dd4
 800f40c:	08015dd4 	.word	0x08015dd4
 800f410:	08015dd8 	.word	0x08015dd8

0800f414 <memcpy>:
 800f414:	440a      	add	r2, r1
 800f416:	4291      	cmp	r1, r2
 800f418:	f100 33ff 	add.w	r3, r0, #4294967295
 800f41c:	d100      	bne.n	800f420 <memcpy+0xc>
 800f41e:	4770      	bx	lr
 800f420:	b510      	push	{r4, lr}
 800f422:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f426:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f42a:	4291      	cmp	r1, r2
 800f42c:	d1f9      	bne.n	800f422 <memcpy+0xe>
 800f42e:	bd10      	pop	{r4, pc}

0800f430 <memset>:
 800f430:	4402      	add	r2, r0
 800f432:	4603      	mov	r3, r0
 800f434:	4293      	cmp	r3, r2
 800f436:	d100      	bne.n	800f43a <memset+0xa>
 800f438:	4770      	bx	lr
 800f43a:	f803 1b01 	strb.w	r1, [r3], #1
 800f43e:	e7f9      	b.n	800f434 <memset+0x4>

0800f440 <__cvt>:
 800f440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f444:	ec55 4b10 	vmov	r4, r5, d0
 800f448:	2d00      	cmp	r5, #0
 800f44a:	460e      	mov	r6, r1
 800f44c:	4619      	mov	r1, r3
 800f44e:	462b      	mov	r3, r5
 800f450:	bfbb      	ittet	lt
 800f452:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f456:	461d      	movlt	r5, r3
 800f458:	2300      	movge	r3, #0
 800f45a:	232d      	movlt	r3, #45	; 0x2d
 800f45c:	700b      	strb	r3, [r1, #0]
 800f45e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f460:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f464:	4691      	mov	r9, r2
 800f466:	f023 0820 	bic.w	r8, r3, #32
 800f46a:	bfbc      	itt	lt
 800f46c:	4622      	movlt	r2, r4
 800f46e:	4614      	movlt	r4, r2
 800f470:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f474:	d005      	beq.n	800f482 <__cvt+0x42>
 800f476:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f47a:	d100      	bne.n	800f47e <__cvt+0x3e>
 800f47c:	3601      	adds	r6, #1
 800f47e:	2102      	movs	r1, #2
 800f480:	e000      	b.n	800f484 <__cvt+0x44>
 800f482:	2103      	movs	r1, #3
 800f484:	ab03      	add	r3, sp, #12
 800f486:	9301      	str	r3, [sp, #4]
 800f488:	ab02      	add	r3, sp, #8
 800f48a:	9300      	str	r3, [sp, #0]
 800f48c:	ec45 4b10 	vmov	d0, r4, r5
 800f490:	4653      	mov	r3, sl
 800f492:	4632      	mov	r2, r6
 800f494:	f001 fdac 	bl	8010ff0 <_dtoa_r>
 800f498:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f49c:	4607      	mov	r7, r0
 800f49e:	d102      	bne.n	800f4a6 <__cvt+0x66>
 800f4a0:	f019 0f01 	tst.w	r9, #1
 800f4a4:	d022      	beq.n	800f4ec <__cvt+0xac>
 800f4a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f4aa:	eb07 0906 	add.w	r9, r7, r6
 800f4ae:	d110      	bne.n	800f4d2 <__cvt+0x92>
 800f4b0:	783b      	ldrb	r3, [r7, #0]
 800f4b2:	2b30      	cmp	r3, #48	; 0x30
 800f4b4:	d10a      	bne.n	800f4cc <__cvt+0x8c>
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	4620      	mov	r0, r4
 800f4bc:	4629      	mov	r1, r5
 800f4be:	f7f1 fb13 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4c2:	b918      	cbnz	r0, 800f4cc <__cvt+0x8c>
 800f4c4:	f1c6 0601 	rsb	r6, r6, #1
 800f4c8:	f8ca 6000 	str.w	r6, [sl]
 800f4cc:	f8da 3000 	ldr.w	r3, [sl]
 800f4d0:	4499      	add	r9, r3
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	4620      	mov	r0, r4
 800f4d8:	4629      	mov	r1, r5
 800f4da:	f7f1 fb05 	bl	8000ae8 <__aeabi_dcmpeq>
 800f4de:	b108      	cbz	r0, 800f4e4 <__cvt+0xa4>
 800f4e0:	f8cd 900c 	str.w	r9, [sp, #12]
 800f4e4:	2230      	movs	r2, #48	; 0x30
 800f4e6:	9b03      	ldr	r3, [sp, #12]
 800f4e8:	454b      	cmp	r3, r9
 800f4ea:	d307      	bcc.n	800f4fc <__cvt+0xbc>
 800f4ec:	9b03      	ldr	r3, [sp, #12]
 800f4ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f4f0:	1bdb      	subs	r3, r3, r7
 800f4f2:	4638      	mov	r0, r7
 800f4f4:	6013      	str	r3, [r2, #0]
 800f4f6:	b004      	add	sp, #16
 800f4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4fc:	1c59      	adds	r1, r3, #1
 800f4fe:	9103      	str	r1, [sp, #12]
 800f500:	701a      	strb	r2, [r3, #0]
 800f502:	e7f0      	b.n	800f4e6 <__cvt+0xa6>

0800f504 <__exponent>:
 800f504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f506:	4603      	mov	r3, r0
 800f508:	2900      	cmp	r1, #0
 800f50a:	bfb8      	it	lt
 800f50c:	4249      	neglt	r1, r1
 800f50e:	f803 2b02 	strb.w	r2, [r3], #2
 800f512:	bfb4      	ite	lt
 800f514:	222d      	movlt	r2, #45	; 0x2d
 800f516:	222b      	movge	r2, #43	; 0x2b
 800f518:	2909      	cmp	r1, #9
 800f51a:	7042      	strb	r2, [r0, #1]
 800f51c:	dd2a      	ble.n	800f574 <__exponent+0x70>
 800f51e:	f10d 0407 	add.w	r4, sp, #7
 800f522:	46a4      	mov	ip, r4
 800f524:	270a      	movs	r7, #10
 800f526:	46a6      	mov	lr, r4
 800f528:	460a      	mov	r2, r1
 800f52a:	fb91 f6f7 	sdiv	r6, r1, r7
 800f52e:	fb07 1516 	mls	r5, r7, r6, r1
 800f532:	3530      	adds	r5, #48	; 0x30
 800f534:	2a63      	cmp	r2, #99	; 0x63
 800f536:	f104 34ff 	add.w	r4, r4, #4294967295
 800f53a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f53e:	4631      	mov	r1, r6
 800f540:	dcf1      	bgt.n	800f526 <__exponent+0x22>
 800f542:	3130      	adds	r1, #48	; 0x30
 800f544:	f1ae 0502 	sub.w	r5, lr, #2
 800f548:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f54c:	1c44      	adds	r4, r0, #1
 800f54e:	4629      	mov	r1, r5
 800f550:	4561      	cmp	r1, ip
 800f552:	d30a      	bcc.n	800f56a <__exponent+0x66>
 800f554:	f10d 0209 	add.w	r2, sp, #9
 800f558:	eba2 020e 	sub.w	r2, r2, lr
 800f55c:	4565      	cmp	r5, ip
 800f55e:	bf88      	it	hi
 800f560:	2200      	movhi	r2, #0
 800f562:	4413      	add	r3, r2
 800f564:	1a18      	subs	r0, r3, r0
 800f566:	b003      	add	sp, #12
 800f568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f56a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f56e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f572:	e7ed      	b.n	800f550 <__exponent+0x4c>
 800f574:	2330      	movs	r3, #48	; 0x30
 800f576:	3130      	adds	r1, #48	; 0x30
 800f578:	7083      	strb	r3, [r0, #2]
 800f57a:	70c1      	strb	r1, [r0, #3]
 800f57c:	1d03      	adds	r3, r0, #4
 800f57e:	e7f1      	b.n	800f564 <__exponent+0x60>

0800f580 <_printf_float>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	ed2d 8b02 	vpush	{d8}
 800f588:	b08d      	sub	sp, #52	; 0x34
 800f58a:	460c      	mov	r4, r1
 800f58c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f590:	4616      	mov	r6, r2
 800f592:	461f      	mov	r7, r3
 800f594:	4605      	mov	r5, r0
 800f596:	f002 fe89 	bl	80122ac <_localeconv_r>
 800f59a:	f8d0 a000 	ldr.w	sl, [r0]
 800f59e:	4650      	mov	r0, sl
 800f5a0:	f7f0 fe26 	bl	80001f0 <strlen>
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f5a8:	6823      	ldr	r3, [r4, #0]
 800f5aa:	9305      	str	r3, [sp, #20]
 800f5ac:	f8d8 3000 	ldr.w	r3, [r8]
 800f5b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f5b4:	3307      	adds	r3, #7
 800f5b6:	f023 0307 	bic.w	r3, r3, #7
 800f5ba:	f103 0208 	add.w	r2, r3, #8
 800f5be:	f8c8 2000 	str.w	r2, [r8]
 800f5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f5ca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f5ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f5d2:	9307      	str	r3, [sp, #28]
 800f5d4:	f8cd 8018 	str.w	r8, [sp, #24]
 800f5d8:	ee08 0a10 	vmov	s16, r0
 800f5dc:	4b9f      	ldr	r3, [pc, #636]	; (800f85c <_printf_float+0x2dc>)
 800f5de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e6:	f7f1 fab1 	bl	8000b4c <__aeabi_dcmpun>
 800f5ea:	bb88      	cbnz	r0, 800f650 <_printf_float+0xd0>
 800f5ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f5f0:	4b9a      	ldr	r3, [pc, #616]	; (800f85c <_printf_float+0x2dc>)
 800f5f2:	f04f 32ff 	mov.w	r2, #4294967295
 800f5f6:	f7f1 fa8b 	bl	8000b10 <__aeabi_dcmple>
 800f5fa:	bb48      	cbnz	r0, 800f650 <_printf_float+0xd0>
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	2300      	movs	r3, #0
 800f600:	4640      	mov	r0, r8
 800f602:	4649      	mov	r1, r9
 800f604:	f7f1 fa7a 	bl	8000afc <__aeabi_dcmplt>
 800f608:	b110      	cbz	r0, 800f610 <_printf_float+0x90>
 800f60a:	232d      	movs	r3, #45	; 0x2d
 800f60c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f610:	4b93      	ldr	r3, [pc, #588]	; (800f860 <_printf_float+0x2e0>)
 800f612:	4894      	ldr	r0, [pc, #592]	; (800f864 <_printf_float+0x2e4>)
 800f614:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f618:	bf94      	ite	ls
 800f61a:	4698      	movls	r8, r3
 800f61c:	4680      	movhi	r8, r0
 800f61e:	2303      	movs	r3, #3
 800f620:	6123      	str	r3, [r4, #16]
 800f622:	9b05      	ldr	r3, [sp, #20]
 800f624:	f023 0204 	bic.w	r2, r3, #4
 800f628:	6022      	str	r2, [r4, #0]
 800f62a:	f04f 0900 	mov.w	r9, #0
 800f62e:	9700      	str	r7, [sp, #0]
 800f630:	4633      	mov	r3, r6
 800f632:	aa0b      	add	r2, sp, #44	; 0x2c
 800f634:	4621      	mov	r1, r4
 800f636:	4628      	mov	r0, r5
 800f638:	f000 f9d8 	bl	800f9ec <_printf_common>
 800f63c:	3001      	adds	r0, #1
 800f63e:	f040 8090 	bne.w	800f762 <_printf_float+0x1e2>
 800f642:	f04f 30ff 	mov.w	r0, #4294967295
 800f646:	b00d      	add	sp, #52	; 0x34
 800f648:	ecbd 8b02 	vpop	{d8}
 800f64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f650:	4642      	mov	r2, r8
 800f652:	464b      	mov	r3, r9
 800f654:	4640      	mov	r0, r8
 800f656:	4649      	mov	r1, r9
 800f658:	f7f1 fa78 	bl	8000b4c <__aeabi_dcmpun>
 800f65c:	b140      	cbz	r0, 800f670 <_printf_float+0xf0>
 800f65e:	464b      	mov	r3, r9
 800f660:	2b00      	cmp	r3, #0
 800f662:	bfbc      	itt	lt
 800f664:	232d      	movlt	r3, #45	; 0x2d
 800f666:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f66a:	487f      	ldr	r0, [pc, #508]	; (800f868 <_printf_float+0x2e8>)
 800f66c:	4b7f      	ldr	r3, [pc, #508]	; (800f86c <_printf_float+0x2ec>)
 800f66e:	e7d1      	b.n	800f614 <_printf_float+0x94>
 800f670:	6863      	ldr	r3, [r4, #4]
 800f672:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f676:	9206      	str	r2, [sp, #24]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	d13f      	bne.n	800f6fc <_printf_float+0x17c>
 800f67c:	2306      	movs	r3, #6
 800f67e:	6063      	str	r3, [r4, #4]
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	6861      	ldr	r1, [r4, #4]
 800f684:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f688:	2300      	movs	r3, #0
 800f68a:	9303      	str	r3, [sp, #12]
 800f68c:	ab0a      	add	r3, sp, #40	; 0x28
 800f68e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f692:	ab09      	add	r3, sp, #36	; 0x24
 800f694:	ec49 8b10 	vmov	d0, r8, r9
 800f698:	9300      	str	r3, [sp, #0]
 800f69a:	6022      	str	r2, [r4, #0]
 800f69c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f6a0:	4628      	mov	r0, r5
 800f6a2:	f7ff fecd 	bl	800f440 <__cvt>
 800f6a6:	9b06      	ldr	r3, [sp, #24]
 800f6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f6aa:	2b47      	cmp	r3, #71	; 0x47
 800f6ac:	4680      	mov	r8, r0
 800f6ae:	d108      	bne.n	800f6c2 <_printf_float+0x142>
 800f6b0:	1cc8      	adds	r0, r1, #3
 800f6b2:	db02      	blt.n	800f6ba <_printf_float+0x13a>
 800f6b4:	6863      	ldr	r3, [r4, #4]
 800f6b6:	4299      	cmp	r1, r3
 800f6b8:	dd41      	ble.n	800f73e <_printf_float+0x1be>
 800f6ba:	f1ab 0b02 	sub.w	fp, fp, #2
 800f6be:	fa5f fb8b 	uxtb.w	fp, fp
 800f6c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f6c6:	d820      	bhi.n	800f70a <_printf_float+0x18a>
 800f6c8:	3901      	subs	r1, #1
 800f6ca:	465a      	mov	r2, fp
 800f6cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f6d0:	9109      	str	r1, [sp, #36]	; 0x24
 800f6d2:	f7ff ff17 	bl	800f504 <__exponent>
 800f6d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f6d8:	1813      	adds	r3, r2, r0
 800f6da:	2a01      	cmp	r2, #1
 800f6dc:	4681      	mov	r9, r0
 800f6de:	6123      	str	r3, [r4, #16]
 800f6e0:	dc02      	bgt.n	800f6e8 <_printf_float+0x168>
 800f6e2:	6822      	ldr	r2, [r4, #0]
 800f6e4:	07d2      	lsls	r2, r2, #31
 800f6e6:	d501      	bpl.n	800f6ec <_printf_float+0x16c>
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	6123      	str	r3, [r4, #16]
 800f6ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d09c      	beq.n	800f62e <_printf_float+0xae>
 800f6f4:	232d      	movs	r3, #45	; 0x2d
 800f6f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f6fa:	e798      	b.n	800f62e <_printf_float+0xae>
 800f6fc:	9a06      	ldr	r2, [sp, #24]
 800f6fe:	2a47      	cmp	r2, #71	; 0x47
 800f700:	d1be      	bne.n	800f680 <_printf_float+0x100>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d1bc      	bne.n	800f680 <_printf_float+0x100>
 800f706:	2301      	movs	r3, #1
 800f708:	e7b9      	b.n	800f67e <_printf_float+0xfe>
 800f70a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f70e:	d118      	bne.n	800f742 <_printf_float+0x1c2>
 800f710:	2900      	cmp	r1, #0
 800f712:	6863      	ldr	r3, [r4, #4]
 800f714:	dd0b      	ble.n	800f72e <_printf_float+0x1ae>
 800f716:	6121      	str	r1, [r4, #16]
 800f718:	b913      	cbnz	r3, 800f720 <_printf_float+0x1a0>
 800f71a:	6822      	ldr	r2, [r4, #0]
 800f71c:	07d0      	lsls	r0, r2, #31
 800f71e:	d502      	bpl.n	800f726 <_printf_float+0x1a6>
 800f720:	3301      	adds	r3, #1
 800f722:	440b      	add	r3, r1
 800f724:	6123      	str	r3, [r4, #16]
 800f726:	65a1      	str	r1, [r4, #88]	; 0x58
 800f728:	f04f 0900 	mov.w	r9, #0
 800f72c:	e7de      	b.n	800f6ec <_printf_float+0x16c>
 800f72e:	b913      	cbnz	r3, 800f736 <_printf_float+0x1b6>
 800f730:	6822      	ldr	r2, [r4, #0]
 800f732:	07d2      	lsls	r2, r2, #31
 800f734:	d501      	bpl.n	800f73a <_printf_float+0x1ba>
 800f736:	3302      	adds	r3, #2
 800f738:	e7f4      	b.n	800f724 <_printf_float+0x1a4>
 800f73a:	2301      	movs	r3, #1
 800f73c:	e7f2      	b.n	800f724 <_printf_float+0x1a4>
 800f73e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f742:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f744:	4299      	cmp	r1, r3
 800f746:	db05      	blt.n	800f754 <_printf_float+0x1d4>
 800f748:	6823      	ldr	r3, [r4, #0]
 800f74a:	6121      	str	r1, [r4, #16]
 800f74c:	07d8      	lsls	r0, r3, #31
 800f74e:	d5ea      	bpl.n	800f726 <_printf_float+0x1a6>
 800f750:	1c4b      	adds	r3, r1, #1
 800f752:	e7e7      	b.n	800f724 <_printf_float+0x1a4>
 800f754:	2900      	cmp	r1, #0
 800f756:	bfd4      	ite	le
 800f758:	f1c1 0202 	rsble	r2, r1, #2
 800f75c:	2201      	movgt	r2, #1
 800f75e:	4413      	add	r3, r2
 800f760:	e7e0      	b.n	800f724 <_printf_float+0x1a4>
 800f762:	6823      	ldr	r3, [r4, #0]
 800f764:	055a      	lsls	r2, r3, #21
 800f766:	d407      	bmi.n	800f778 <_printf_float+0x1f8>
 800f768:	6923      	ldr	r3, [r4, #16]
 800f76a:	4642      	mov	r2, r8
 800f76c:	4631      	mov	r1, r6
 800f76e:	4628      	mov	r0, r5
 800f770:	47b8      	blx	r7
 800f772:	3001      	adds	r0, #1
 800f774:	d12c      	bne.n	800f7d0 <_printf_float+0x250>
 800f776:	e764      	b.n	800f642 <_printf_float+0xc2>
 800f778:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f77c:	f240 80e0 	bls.w	800f940 <_printf_float+0x3c0>
 800f780:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f784:	2200      	movs	r2, #0
 800f786:	2300      	movs	r3, #0
 800f788:	f7f1 f9ae 	bl	8000ae8 <__aeabi_dcmpeq>
 800f78c:	2800      	cmp	r0, #0
 800f78e:	d034      	beq.n	800f7fa <_printf_float+0x27a>
 800f790:	4a37      	ldr	r2, [pc, #220]	; (800f870 <_printf_float+0x2f0>)
 800f792:	2301      	movs	r3, #1
 800f794:	4631      	mov	r1, r6
 800f796:	4628      	mov	r0, r5
 800f798:	47b8      	blx	r7
 800f79a:	3001      	adds	r0, #1
 800f79c:	f43f af51 	beq.w	800f642 <_printf_float+0xc2>
 800f7a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	db02      	blt.n	800f7ae <_printf_float+0x22e>
 800f7a8:	6823      	ldr	r3, [r4, #0]
 800f7aa:	07d8      	lsls	r0, r3, #31
 800f7ac:	d510      	bpl.n	800f7d0 <_printf_float+0x250>
 800f7ae:	ee18 3a10 	vmov	r3, s16
 800f7b2:	4652      	mov	r2, sl
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	4628      	mov	r0, r5
 800f7b8:	47b8      	blx	r7
 800f7ba:	3001      	adds	r0, #1
 800f7bc:	f43f af41 	beq.w	800f642 <_printf_float+0xc2>
 800f7c0:	f04f 0800 	mov.w	r8, #0
 800f7c4:	f104 091a 	add.w	r9, r4, #26
 800f7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	4543      	cmp	r3, r8
 800f7ce:	dc09      	bgt.n	800f7e4 <_printf_float+0x264>
 800f7d0:	6823      	ldr	r3, [r4, #0]
 800f7d2:	079b      	lsls	r3, r3, #30
 800f7d4:	f100 8105 	bmi.w	800f9e2 <_printf_float+0x462>
 800f7d8:	68e0      	ldr	r0, [r4, #12]
 800f7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7dc:	4298      	cmp	r0, r3
 800f7de:	bfb8      	it	lt
 800f7e0:	4618      	movlt	r0, r3
 800f7e2:	e730      	b.n	800f646 <_printf_float+0xc6>
 800f7e4:	2301      	movs	r3, #1
 800f7e6:	464a      	mov	r2, r9
 800f7e8:	4631      	mov	r1, r6
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	47b8      	blx	r7
 800f7ee:	3001      	adds	r0, #1
 800f7f0:	f43f af27 	beq.w	800f642 <_printf_float+0xc2>
 800f7f4:	f108 0801 	add.w	r8, r8, #1
 800f7f8:	e7e6      	b.n	800f7c8 <_printf_float+0x248>
 800f7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	dc39      	bgt.n	800f874 <_printf_float+0x2f4>
 800f800:	4a1b      	ldr	r2, [pc, #108]	; (800f870 <_printf_float+0x2f0>)
 800f802:	2301      	movs	r3, #1
 800f804:	4631      	mov	r1, r6
 800f806:	4628      	mov	r0, r5
 800f808:	47b8      	blx	r7
 800f80a:	3001      	adds	r0, #1
 800f80c:	f43f af19 	beq.w	800f642 <_printf_float+0xc2>
 800f810:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f814:	4313      	orrs	r3, r2
 800f816:	d102      	bne.n	800f81e <_printf_float+0x29e>
 800f818:	6823      	ldr	r3, [r4, #0]
 800f81a:	07d9      	lsls	r1, r3, #31
 800f81c:	d5d8      	bpl.n	800f7d0 <_printf_float+0x250>
 800f81e:	ee18 3a10 	vmov	r3, s16
 800f822:	4652      	mov	r2, sl
 800f824:	4631      	mov	r1, r6
 800f826:	4628      	mov	r0, r5
 800f828:	47b8      	blx	r7
 800f82a:	3001      	adds	r0, #1
 800f82c:	f43f af09 	beq.w	800f642 <_printf_float+0xc2>
 800f830:	f04f 0900 	mov.w	r9, #0
 800f834:	f104 0a1a 	add.w	sl, r4, #26
 800f838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f83a:	425b      	negs	r3, r3
 800f83c:	454b      	cmp	r3, r9
 800f83e:	dc01      	bgt.n	800f844 <_printf_float+0x2c4>
 800f840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f842:	e792      	b.n	800f76a <_printf_float+0x1ea>
 800f844:	2301      	movs	r3, #1
 800f846:	4652      	mov	r2, sl
 800f848:	4631      	mov	r1, r6
 800f84a:	4628      	mov	r0, r5
 800f84c:	47b8      	blx	r7
 800f84e:	3001      	adds	r0, #1
 800f850:	f43f aef7 	beq.w	800f642 <_printf_float+0xc2>
 800f854:	f109 0901 	add.w	r9, r9, #1
 800f858:	e7ee      	b.n	800f838 <_printf_float+0x2b8>
 800f85a:	bf00      	nop
 800f85c:	7fefffff 	.word	0x7fefffff
 800f860:	0801592c 	.word	0x0801592c
 800f864:	08015930 	.word	0x08015930
 800f868:	08015938 	.word	0x08015938
 800f86c:	08015934 	.word	0x08015934
 800f870:	0801593c 	.word	0x0801593c
 800f874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f876:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f878:	429a      	cmp	r2, r3
 800f87a:	bfa8      	it	ge
 800f87c:	461a      	movge	r2, r3
 800f87e:	2a00      	cmp	r2, #0
 800f880:	4691      	mov	r9, r2
 800f882:	dc37      	bgt.n	800f8f4 <_printf_float+0x374>
 800f884:	f04f 0b00 	mov.w	fp, #0
 800f888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f88c:	f104 021a 	add.w	r2, r4, #26
 800f890:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f892:	9305      	str	r3, [sp, #20]
 800f894:	eba3 0309 	sub.w	r3, r3, r9
 800f898:	455b      	cmp	r3, fp
 800f89a:	dc33      	bgt.n	800f904 <_printf_float+0x384>
 800f89c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	db3b      	blt.n	800f91c <_printf_float+0x39c>
 800f8a4:	6823      	ldr	r3, [r4, #0]
 800f8a6:	07da      	lsls	r2, r3, #31
 800f8a8:	d438      	bmi.n	800f91c <_printf_float+0x39c>
 800f8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8ac:	9a05      	ldr	r2, [sp, #20]
 800f8ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8b0:	1a9a      	subs	r2, r3, r2
 800f8b2:	eba3 0901 	sub.w	r9, r3, r1
 800f8b6:	4591      	cmp	r9, r2
 800f8b8:	bfa8      	it	ge
 800f8ba:	4691      	movge	r9, r2
 800f8bc:	f1b9 0f00 	cmp.w	r9, #0
 800f8c0:	dc35      	bgt.n	800f92e <_printf_float+0x3ae>
 800f8c2:	f04f 0800 	mov.w	r8, #0
 800f8c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f8ca:	f104 0a1a 	add.w	sl, r4, #26
 800f8ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8d2:	1a9b      	subs	r3, r3, r2
 800f8d4:	eba3 0309 	sub.w	r3, r3, r9
 800f8d8:	4543      	cmp	r3, r8
 800f8da:	f77f af79 	ble.w	800f7d0 <_printf_float+0x250>
 800f8de:	2301      	movs	r3, #1
 800f8e0:	4652      	mov	r2, sl
 800f8e2:	4631      	mov	r1, r6
 800f8e4:	4628      	mov	r0, r5
 800f8e6:	47b8      	blx	r7
 800f8e8:	3001      	adds	r0, #1
 800f8ea:	f43f aeaa 	beq.w	800f642 <_printf_float+0xc2>
 800f8ee:	f108 0801 	add.w	r8, r8, #1
 800f8f2:	e7ec      	b.n	800f8ce <_printf_float+0x34e>
 800f8f4:	4613      	mov	r3, r2
 800f8f6:	4631      	mov	r1, r6
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	4628      	mov	r0, r5
 800f8fc:	47b8      	blx	r7
 800f8fe:	3001      	adds	r0, #1
 800f900:	d1c0      	bne.n	800f884 <_printf_float+0x304>
 800f902:	e69e      	b.n	800f642 <_printf_float+0xc2>
 800f904:	2301      	movs	r3, #1
 800f906:	4631      	mov	r1, r6
 800f908:	4628      	mov	r0, r5
 800f90a:	9205      	str	r2, [sp, #20]
 800f90c:	47b8      	blx	r7
 800f90e:	3001      	adds	r0, #1
 800f910:	f43f ae97 	beq.w	800f642 <_printf_float+0xc2>
 800f914:	9a05      	ldr	r2, [sp, #20]
 800f916:	f10b 0b01 	add.w	fp, fp, #1
 800f91a:	e7b9      	b.n	800f890 <_printf_float+0x310>
 800f91c:	ee18 3a10 	vmov	r3, s16
 800f920:	4652      	mov	r2, sl
 800f922:	4631      	mov	r1, r6
 800f924:	4628      	mov	r0, r5
 800f926:	47b8      	blx	r7
 800f928:	3001      	adds	r0, #1
 800f92a:	d1be      	bne.n	800f8aa <_printf_float+0x32a>
 800f92c:	e689      	b.n	800f642 <_printf_float+0xc2>
 800f92e:	9a05      	ldr	r2, [sp, #20]
 800f930:	464b      	mov	r3, r9
 800f932:	4442      	add	r2, r8
 800f934:	4631      	mov	r1, r6
 800f936:	4628      	mov	r0, r5
 800f938:	47b8      	blx	r7
 800f93a:	3001      	adds	r0, #1
 800f93c:	d1c1      	bne.n	800f8c2 <_printf_float+0x342>
 800f93e:	e680      	b.n	800f642 <_printf_float+0xc2>
 800f940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f942:	2a01      	cmp	r2, #1
 800f944:	dc01      	bgt.n	800f94a <_printf_float+0x3ca>
 800f946:	07db      	lsls	r3, r3, #31
 800f948:	d538      	bpl.n	800f9bc <_printf_float+0x43c>
 800f94a:	2301      	movs	r3, #1
 800f94c:	4642      	mov	r2, r8
 800f94e:	4631      	mov	r1, r6
 800f950:	4628      	mov	r0, r5
 800f952:	47b8      	blx	r7
 800f954:	3001      	adds	r0, #1
 800f956:	f43f ae74 	beq.w	800f642 <_printf_float+0xc2>
 800f95a:	ee18 3a10 	vmov	r3, s16
 800f95e:	4652      	mov	r2, sl
 800f960:	4631      	mov	r1, r6
 800f962:	4628      	mov	r0, r5
 800f964:	47b8      	blx	r7
 800f966:	3001      	adds	r0, #1
 800f968:	f43f ae6b 	beq.w	800f642 <_printf_float+0xc2>
 800f96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f970:	2200      	movs	r2, #0
 800f972:	2300      	movs	r3, #0
 800f974:	f7f1 f8b8 	bl	8000ae8 <__aeabi_dcmpeq>
 800f978:	b9d8      	cbnz	r0, 800f9b2 <_printf_float+0x432>
 800f97a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f97c:	f108 0201 	add.w	r2, r8, #1
 800f980:	3b01      	subs	r3, #1
 800f982:	4631      	mov	r1, r6
 800f984:	4628      	mov	r0, r5
 800f986:	47b8      	blx	r7
 800f988:	3001      	adds	r0, #1
 800f98a:	d10e      	bne.n	800f9aa <_printf_float+0x42a>
 800f98c:	e659      	b.n	800f642 <_printf_float+0xc2>
 800f98e:	2301      	movs	r3, #1
 800f990:	4652      	mov	r2, sl
 800f992:	4631      	mov	r1, r6
 800f994:	4628      	mov	r0, r5
 800f996:	47b8      	blx	r7
 800f998:	3001      	adds	r0, #1
 800f99a:	f43f ae52 	beq.w	800f642 <_printf_float+0xc2>
 800f99e:	f108 0801 	add.w	r8, r8, #1
 800f9a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9a4:	3b01      	subs	r3, #1
 800f9a6:	4543      	cmp	r3, r8
 800f9a8:	dcf1      	bgt.n	800f98e <_printf_float+0x40e>
 800f9aa:	464b      	mov	r3, r9
 800f9ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f9b0:	e6dc      	b.n	800f76c <_printf_float+0x1ec>
 800f9b2:	f04f 0800 	mov.w	r8, #0
 800f9b6:	f104 0a1a 	add.w	sl, r4, #26
 800f9ba:	e7f2      	b.n	800f9a2 <_printf_float+0x422>
 800f9bc:	2301      	movs	r3, #1
 800f9be:	4642      	mov	r2, r8
 800f9c0:	e7df      	b.n	800f982 <_printf_float+0x402>
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	464a      	mov	r2, r9
 800f9c6:	4631      	mov	r1, r6
 800f9c8:	4628      	mov	r0, r5
 800f9ca:	47b8      	blx	r7
 800f9cc:	3001      	adds	r0, #1
 800f9ce:	f43f ae38 	beq.w	800f642 <_printf_float+0xc2>
 800f9d2:	f108 0801 	add.w	r8, r8, #1
 800f9d6:	68e3      	ldr	r3, [r4, #12]
 800f9d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f9da:	1a5b      	subs	r3, r3, r1
 800f9dc:	4543      	cmp	r3, r8
 800f9de:	dcf0      	bgt.n	800f9c2 <_printf_float+0x442>
 800f9e0:	e6fa      	b.n	800f7d8 <_printf_float+0x258>
 800f9e2:	f04f 0800 	mov.w	r8, #0
 800f9e6:	f104 0919 	add.w	r9, r4, #25
 800f9ea:	e7f4      	b.n	800f9d6 <_printf_float+0x456>

0800f9ec <_printf_common>:
 800f9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9f0:	4616      	mov	r6, r2
 800f9f2:	4699      	mov	r9, r3
 800f9f4:	688a      	ldr	r2, [r1, #8]
 800f9f6:	690b      	ldr	r3, [r1, #16]
 800f9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	bfb8      	it	lt
 800fa00:	4613      	movlt	r3, r2
 800fa02:	6033      	str	r3, [r6, #0]
 800fa04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fa08:	4607      	mov	r7, r0
 800fa0a:	460c      	mov	r4, r1
 800fa0c:	b10a      	cbz	r2, 800fa12 <_printf_common+0x26>
 800fa0e:	3301      	adds	r3, #1
 800fa10:	6033      	str	r3, [r6, #0]
 800fa12:	6823      	ldr	r3, [r4, #0]
 800fa14:	0699      	lsls	r1, r3, #26
 800fa16:	bf42      	ittt	mi
 800fa18:	6833      	ldrmi	r3, [r6, #0]
 800fa1a:	3302      	addmi	r3, #2
 800fa1c:	6033      	strmi	r3, [r6, #0]
 800fa1e:	6825      	ldr	r5, [r4, #0]
 800fa20:	f015 0506 	ands.w	r5, r5, #6
 800fa24:	d106      	bne.n	800fa34 <_printf_common+0x48>
 800fa26:	f104 0a19 	add.w	sl, r4, #25
 800fa2a:	68e3      	ldr	r3, [r4, #12]
 800fa2c:	6832      	ldr	r2, [r6, #0]
 800fa2e:	1a9b      	subs	r3, r3, r2
 800fa30:	42ab      	cmp	r3, r5
 800fa32:	dc26      	bgt.n	800fa82 <_printf_common+0x96>
 800fa34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fa38:	1e13      	subs	r3, r2, #0
 800fa3a:	6822      	ldr	r2, [r4, #0]
 800fa3c:	bf18      	it	ne
 800fa3e:	2301      	movne	r3, #1
 800fa40:	0692      	lsls	r2, r2, #26
 800fa42:	d42b      	bmi.n	800fa9c <_printf_common+0xb0>
 800fa44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fa48:	4649      	mov	r1, r9
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	47c0      	blx	r8
 800fa4e:	3001      	adds	r0, #1
 800fa50:	d01e      	beq.n	800fa90 <_printf_common+0xa4>
 800fa52:	6823      	ldr	r3, [r4, #0]
 800fa54:	68e5      	ldr	r5, [r4, #12]
 800fa56:	6832      	ldr	r2, [r6, #0]
 800fa58:	f003 0306 	and.w	r3, r3, #6
 800fa5c:	2b04      	cmp	r3, #4
 800fa5e:	bf08      	it	eq
 800fa60:	1aad      	subeq	r5, r5, r2
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	6922      	ldr	r2, [r4, #16]
 800fa66:	bf0c      	ite	eq
 800fa68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa6c:	2500      	movne	r5, #0
 800fa6e:	4293      	cmp	r3, r2
 800fa70:	bfc4      	itt	gt
 800fa72:	1a9b      	subgt	r3, r3, r2
 800fa74:	18ed      	addgt	r5, r5, r3
 800fa76:	2600      	movs	r6, #0
 800fa78:	341a      	adds	r4, #26
 800fa7a:	42b5      	cmp	r5, r6
 800fa7c:	d11a      	bne.n	800fab4 <_printf_common+0xc8>
 800fa7e:	2000      	movs	r0, #0
 800fa80:	e008      	b.n	800fa94 <_printf_common+0xa8>
 800fa82:	2301      	movs	r3, #1
 800fa84:	4652      	mov	r2, sl
 800fa86:	4649      	mov	r1, r9
 800fa88:	4638      	mov	r0, r7
 800fa8a:	47c0      	blx	r8
 800fa8c:	3001      	adds	r0, #1
 800fa8e:	d103      	bne.n	800fa98 <_printf_common+0xac>
 800fa90:	f04f 30ff 	mov.w	r0, #4294967295
 800fa94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa98:	3501      	adds	r5, #1
 800fa9a:	e7c6      	b.n	800fa2a <_printf_common+0x3e>
 800fa9c:	18e1      	adds	r1, r4, r3
 800fa9e:	1c5a      	adds	r2, r3, #1
 800faa0:	2030      	movs	r0, #48	; 0x30
 800faa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800faa6:	4422      	add	r2, r4
 800faa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800faac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fab0:	3302      	adds	r3, #2
 800fab2:	e7c7      	b.n	800fa44 <_printf_common+0x58>
 800fab4:	2301      	movs	r3, #1
 800fab6:	4622      	mov	r2, r4
 800fab8:	4649      	mov	r1, r9
 800faba:	4638      	mov	r0, r7
 800fabc:	47c0      	blx	r8
 800fabe:	3001      	adds	r0, #1
 800fac0:	d0e6      	beq.n	800fa90 <_printf_common+0xa4>
 800fac2:	3601      	adds	r6, #1
 800fac4:	e7d9      	b.n	800fa7a <_printf_common+0x8e>
	...

0800fac8 <_printf_i>:
 800fac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800facc:	7e0f      	ldrb	r7, [r1, #24]
 800face:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fad0:	2f78      	cmp	r7, #120	; 0x78
 800fad2:	4691      	mov	r9, r2
 800fad4:	4680      	mov	r8, r0
 800fad6:	460c      	mov	r4, r1
 800fad8:	469a      	mov	sl, r3
 800fada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fade:	d807      	bhi.n	800faf0 <_printf_i+0x28>
 800fae0:	2f62      	cmp	r7, #98	; 0x62
 800fae2:	d80a      	bhi.n	800fafa <_printf_i+0x32>
 800fae4:	2f00      	cmp	r7, #0
 800fae6:	f000 80d8 	beq.w	800fc9a <_printf_i+0x1d2>
 800faea:	2f58      	cmp	r7, #88	; 0x58
 800faec:	f000 80a3 	beq.w	800fc36 <_printf_i+0x16e>
 800faf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800faf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800faf8:	e03a      	b.n	800fb70 <_printf_i+0xa8>
 800fafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fafe:	2b15      	cmp	r3, #21
 800fb00:	d8f6      	bhi.n	800faf0 <_printf_i+0x28>
 800fb02:	a101      	add	r1, pc, #4	; (adr r1, 800fb08 <_printf_i+0x40>)
 800fb04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fb08:	0800fb61 	.word	0x0800fb61
 800fb0c:	0800fb75 	.word	0x0800fb75
 800fb10:	0800faf1 	.word	0x0800faf1
 800fb14:	0800faf1 	.word	0x0800faf1
 800fb18:	0800faf1 	.word	0x0800faf1
 800fb1c:	0800faf1 	.word	0x0800faf1
 800fb20:	0800fb75 	.word	0x0800fb75
 800fb24:	0800faf1 	.word	0x0800faf1
 800fb28:	0800faf1 	.word	0x0800faf1
 800fb2c:	0800faf1 	.word	0x0800faf1
 800fb30:	0800faf1 	.word	0x0800faf1
 800fb34:	0800fc81 	.word	0x0800fc81
 800fb38:	0800fba5 	.word	0x0800fba5
 800fb3c:	0800fc63 	.word	0x0800fc63
 800fb40:	0800faf1 	.word	0x0800faf1
 800fb44:	0800faf1 	.word	0x0800faf1
 800fb48:	0800fca3 	.word	0x0800fca3
 800fb4c:	0800faf1 	.word	0x0800faf1
 800fb50:	0800fba5 	.word	0x0800fba5
 800fb54:	0800faf1 	.word	0x0800faf1
 800fb58:	0800faf1 	.word	0x0800faf1
 800fb5c:	0800fc6b 	.word	0x0800fc6b
 800fb60:	682b      	ldr	r3, [r5, #0]
 800fb62:	1d1a      	adds	r2, r3, #4
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	602a      	str	r2, [r5, #0]
 800fb68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fb6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fb70:	2301      	movs	r3, #1
 800fb72:	e0a3      	b.n	800fcbc <_printf_i+0x1f4>
 800fb74:	6820      	ldr	r0, [r4, #0]
 800fb76:	6829      	ldr	r1, [r5, #0]
 800fb78:	0606      	lsls	r6, r0, #24
 800fb7a:	f101 0304 	add.w	r3, r1, #4
 800fb7e:	d50a      	bpl.n	800fb96 <_printf_i+0xce>
 800fb80:	680e      	ldr	r6, [r1, #0]
 800fb82:	602b      	str	r3, [r5, #0]
 800fb84:	2e00      	cmp	r6, #0
 800fb86:	da03      	bge.n	800fb90 <_printf_i+0xc8>
 800fb88:	232d      	movs	r3, #45	; 0x2d
 800fb8a:	4276      	negs	r6, r6
 800fb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fb90:	485e      	ldr	r0, [pc, #376]	; (800fd0c <_printf_i+0x244>)
 800fb92:	230a      	movs	r3, #10
 800fb94:	e019      	b.n	800fbca <_printf_i+0x102>
 800fb96:	680e      	ldr	r6, [r1, #0]
 800fb98:	602b      	str	r3, [r5, #0]
 800fb9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fb9e:	bf18      	it	ne
 800fba0:	b236      	sxthne	r6, r6
 800fba2:	e7ef      	b.n	800fb84 <_printf_i+0xbc>
 800fba4:	682b      	ldr	r3, [r5, #0]
 800fba6:	6820      	ldr	r0, [r4, #0]
 800fba8:	1d19      	adds	r1, r3, #4
 800fbaa:	6029      	str	r1, [r5, #0]
 800fbac:	0601      	lsls	r1, r0, #24
 800fbae:	d501      	bpl.n	800fbb4 <_printf_i+0xec>
 800fbb0:	681e      	ldr	r6, [r3, #0]
 800fbb2:	e002      	b.n	800fbba <_printf_i+0xf2>
 800fbb4:	0646      	lsls	r6, r0, #25
 800fbb6:	d5fb      	bpl.n	800fbb0 <_printf_i+0xe8>
 800fbb8:	881e      	ldrh	r6, [r3, #0]
 800fbba:	4854      	ldr	r0, [pc, #336]	; (800fd0c <_printf_i+0x244>)
 800fbbc:	2f6f      	cmp	r7, #111	; 0x6f
 800fbbe:	bf0c      	ite	eq
 800fbc0:	2308      	moveq	r3, #8
 800fbc2:	230a      	movne	r3, #10
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fbca:	6865      	ldr	r5, [r4, #4]
 800fbcc:	60a5      	str	r5, [r4, #8]
 800fbce:	2d00      	cmp	r5, #0
 800fbd0:	bfa2      	ittt	ge
 800fbd2:	6821      	ldrge	r1, [r4, #0]
 800fbd4:	f021 0104 	bicge.w	r1, r1, #4
 800fbd8:	6021      	strge	r1, [r4, #0]
 800fbda:	b90e      	cbnz	r6, 800fbe0 <_printf_i+0x118>
 800fbdc:	2d00      	cmp	r5, #0
 800fbde:	d04d      	beq.n	800fc7c <_printf_i+0x1b4>
 800fbe0:	4615      	mov	r5, r2
 800fbe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800fbe6:	fb03 6711 	mls	r7, r3, r1, r6
 800fbea:	5dc7      	ldrb	r7, [r0, r7]
 800fbec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fbf0:	4637      	mov	r7, r6
 800fbf2:	42bb      	cmp	r3, r7
 800fbf4:	460e      	mov	r6, r1
 800fbf6:	d9f4      	bls.n	800fbe2 <_printf_i+0x11a>
 800fbf8:	2b08      	cmp	r3, #8
 800fbfa:	d10b      	bne.n	800fc14 <_printf_i+0x14c>
 800fbfc:	6823      	ldr	r3, [r4, #0]
 800fbfe:	07de      	lsls	r6, r3, #31
 800fc00:	d508      	bpl.n	800fc14 <_printf_i+0x14c>
 800fc02:	6923      	ldr	r3, [r4, #16]
 800fc04:	6861      	ldr	r1, [r4, #4]
 800fc06:	4299      	cmp	r1, r3
 800fc08:	bfde      	ittt	le
 800fc0a:	2330      	movle	r3, #48	; 0x30
 800fc0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fc10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800fc14:	1b52      	subs	r2, r2, r5
 800fc16:	6122      	str	r2, [r4, #16]
 800fc18:	f8cd a000 	str.w	sl, [sp]
 800fc1c:	464b      	mov	r3, r9
 800fc1e:	aa03      	add	r2, sp, #12
 800fc20:	4621      	mov	r1, r4
 800fc22:	4640      	mov	r0, r8
 800fc24:	f7ff fee2 	bl	800f9ec <_printf_common>
 800fc28:	3001      	adds	r0, #1
 800fc2a:	d14c      	bne.n	800fcc6 <_printf_i+0x1fe>
 800fc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fc30:	b004      	add	sp, #16
 800fc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc36:	4835      	ldr	r0, [pc, #212]	; (800fd0c <_printf_i+0x244>)
 800fc38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fc3c:	6829      	ldr	r1, [r5, #0]
 800fc3e:	6823      	ldr	r3, [r4, #0]
 800fc40:	f851 6b04 	ldr.w	r6, [r1], #4
 800fc44:	6029      	str	r1, [r5, #0]
 800fc46:	061d      	lsls	r5, r3, #24
 800fc48:	d514      	bpl.n	800fc74 <_printf_i+0x1ac>
 800fc4a:	07df      	lsls	r7, r3, #31
 800fc4c:	bf44      	itt	mi
 800fc4e:	f043 0320 	orrmi.w	r3, r3, #32
 800fc52:	6023      	strmi	r3, [r4, #0]
 800fc54:	b91e      	cbnz	r6, 800fc5e <_printf_i+0x196>
 800fc56:	6823      	ldr	r3, [r4, #0]
 800fc58:	f023 0320 	bic.w	r3, r3, #32
 800fc5c:	6023      	str	r3, [r4, #0]
 800fc5e:	2310      	movs	r3, #16
 800fc60:	e7b0      	b.n	800fbc4 <_printf_i+0xfc>
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	f043 0320 	orr.w	r3, r3, #32
 800fc68:	6023      	str	r3, [r4, #0]
 800fc6a:	2378      	movs	r3, #120	; 0x78
 800fc6c:	4828      	ldr	r0, [pc, #160]	; (800fd10 <_printf_i+0x248>)
 800fc6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fc72:	e7e3      	b.n	800fc3c <_printf_i+0x174>
 800fc74:	0659      	lsls	r1, r3, #25
 800fc76:	bf48      	it	mi
 800fc78:	b2b6      	uxthmi	r6, r6
 800fc7a:	e7e6      	b.n	800fc4a <_printf_i+0x182>
 800fc7c:	4615      	mov	r5, r2
 800fc7e:	e7bb      	b.n	800fbf8 <_printf_i+0x130>
 800fc80:	682b      	ldr	r3, [r5, #0]
 800fc82:	6826      	ldr	r6, [r4, #0]
 800fc84:	6961      	ldr	r1, [r4, #20]
 800fc86:	1d18      	adds	r0, r3, #4
 800fc88:	6028      	str	r0, [r5, #0]
 800fc8a:	0635      	lsls	r5, r6, #24
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	d501      	bpl.n	800fc94 <_printf_i+0x1cc>
 800fc90:	6019      	str	r1, [r3, #0]
 800fc92:	e002      	b.n	800fc9a <_printf_i+0x1d2>
 800fc94:	0670      	lsls	r0, r6, #25
 800fc96:	d5fb      	bpl.n	800fc90 <_printf_i+0x1c8>
 800fc98:	8019      	strh	r1, [r3, #0]
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	4615      	mov	r5, r2
 800fca0:	e7ba      	b.n	800fc18 <_printf_i+0x150>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	1d1a      	adds	r2, r3, #4
 800fca6:	602a      	str	r2, [r5, #0]
 800fca8:	681d      	ldr	r5, [r3, #0]
 800fcaa:	6862      	ldr	r2, [r4, #4]
 800fcac:	2100      	movs	r1, #0
 800fcae:	4628      	mov	r0, r5
 800fcb0:	f7f0 faa6 	bl	8000200 <memchr>
 800fcb4:	b108      	cbz	r0, 800fcba <_printf_i+0x1f2>
 800fcb6:	1b40      	subs	r0, r0, r5
 800fcb8:	6060      	str	r0, [r4, #4]
 800fcba:	6863      	ldr	r3, [r4, #4]
 800fcbc:	6123      	str	r3, [r4, #16]
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcc4:	e7a8      	b.n	800fc18 <_printf_i+0x150>
 800fcc6:	6923      	ldr	r3, [r4, #16]
 800fcc8:	462a      	mov	r2, r5
 800fcca:	4649      	mov	r1, r9
 800fccc:	4640      	mov	r0, r8
 800fcce:	47d0      	blx	sl
 800fcd0:	3001      	adds	r0, #1
 800fcd2:	d0ab      	beq.n	800fc2c <_printf_i+0x164>
 800fcd4:	6823      	ldr	r3, [r4, #0]
 800fcd6:	079b      	lsls	r3, r3, #30
 800fcd8:	d413      	bmi.n	800fd02 <_printf_i+0x23a>
 800fcda:	68e0      	ldr	r0, [r4, #12]
 800fcdc:	9b03      	ldr	r3, [sp, #12]
 800fcde:	4298      	cmp	r0, r3
 800fce0:	bfb8      	it	lt
 800fce2:	4618      	movlt	r0, r3
 800fce4:	e7a4      	b.n	800fc30 <_printf_i+0x168>
 800fce6:	2301      	movs	r3, #1
 800fce8:	4632      	mov	r2, r6
 800fcea:	4649      	mov	r1, r9
 800fcec:	4640      	mov	r0, r8
 800fcee:	47d0      	blx	sl
 800fcf0:	3001      	adds	r0, #1
 800fcf2:	d09b      	beq.n	800fc2c <_printf_i+0x164>
 800fcf4:	3501      	adds	r5, #1
 800fcf6:	68e3      	ldr	r3, [r4, #12]
 800fcf8:	9903      	ldr	r1, [sp, #12]
 800fcfa:	1a5b      	subs	r3, r3, r1
 800fcfc:	42ab      	cmp	r3, r5
 800fcfe:	dcf2      	bgt.n	800fce6 <_printf_i+0x21e>
 800fd00:	e7eb      	b.n	800fcda <_printf_i+0x212>
 800fd02:	2500      	movs	r5, #0
 800fd04:	f104 0619 	add.w	r6, r4, #25
 800fd08:	e7f5      	b.n	800fcf6 <_printf_i+0x22e>
 800fd0a:	bf00      	nop
 800fd0c:	0801593e 	.word	0x0801593e
 800fd10:	0801594f 	.word	0x0801594f

0800fd14 <_scanf_float>:
 800fd14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	b087      	sub	sp, #28
 800fd1a:	4617      	mov	r7, r2
 800fd1c:	9303      	str	r3, [sp, #12]
 800fd1e:	688b      	ldr	r3, [r1, #8]
 800fd20:	1e5a      	subs	r2, r3, #1
 800fd22:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800fd26:	bf83      	ittte	hi
 800fd28:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800fd2c:	195b      	addhi	r3, r3, r5
 800fd2e:	9302      	strhi	r3, [sp, #8]
 800fd30:	2300      	movls	r3, #0
 800fd32:	bf86      	itte	hi
 800fd34:	f240 135d 	movwhi	r3, #349	; 0x15d
 800fd38:	608b      	strhi	r3, [r1, #8]
 800fd3a:	9302      	strls	r3, [sp, #8]
 800fd3c:	680b      	ldr	r3, [r1, #0]
 800fd3e:	468b      	mov	fp, r1
 800fd40:	2500      	movs	r5, #0
 800fd42:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800fd46:	f84b 3b1c 	str.w	r3, [fp], #28
 800fd4a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800fd4e:	4680      	mov	r8, r0
 800fd50:	460c      	mov	r4, r1
 800fd52:	465e      	mov	r6, fp
 800fd54:	46aa      	mov	sl, r5
 800fd56:	46a9      	mov	r9, r5
 800fd58:	9501      	str	r5, [sp, #4]
 800fd5a:	68a2      	ldr	r2, [r4, #8]
 800fd5c:	b152      	cbz	r2, 800fd74 <_scanf_float+0x60>
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b4e      	cmp	r3, #78	; 0x4e
 800fd64:	d864      	bhi.n	800fe30 <_scanf_float+0x11c>
 800fd66:	2b40      	cmp	r3, #64	; 0x40
 800fd68:	d83c      	bhi.n	800fde4 <_scanf_float+0xd0>
 800fd6a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800fd6e:	b2c8      	uxtb	r0, r1
 800fd70:	280e      	cmp	r0, #14
 800fd72:	d93a      	bls.n	800fdea <_scanf_float+0xd6>
 800fd74:	f1b9 0f00 	cmp.w	r9, #0
 800fd78:	d003      	beq.n	800fd82 <_scanf_float+0x6e>
 800fd7a:	6823      	ldr	r3, [r4, #0]
 800fd7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fd80:	6023      	str	r3, [r4, #0]
 800fd82:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fd86:	f1ba 0f01 	cmp.w	sl, #1
 800fd8a:	f200 8113 	bhi.w	800ffb4 <_scanf_float+0x2a0>
 800fd8e:	455e      	cmp	r6, fp
 800fd90:	f200 8105 	bhi.w	800ff9e <_scanf_float+0x28a>
 800fd94:	2501      	movs	r5, #1
 800fd96:	4628      	mov	r0, r5
 800fd98:	b007      	add	sp, #28
 800fd9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd9e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800fda2:	2a0d      	cmp	r2, #13
 800fda4:	d8e6      	bhi.n	800fd74 <_scanf_float+0x60>
 800fda6:	a101      	add	r1, pc, #4	; (adr r1, 800fdac <_scanf_float+0x98>)
 800fda8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800fdac:	0800feeb 	.word	0x0800feeb
 800fdb0:	0800fd75 	.word	0x0800fd75
 800fdb4:	0800fd75 	.word	0x0800fd75
 800fdb8:	0800fd75 	.word	0x0800fd75
 800fdbc:	0800ff4b 	.word	0x0800ff4b
 800fdc0:	0800ff23 	.word	0x0800ff23
 800fdc4:	0800fd75 	.word	0x0800fd75
 800fdc8:	0800fd75 	.word	0x0800fd75
 800fdcc:	0800fef9 	.word	0x0800fef9
 800fdd0:	0800fd75 	.word	0x0800fd75
 800fdd4:	0800fd75 	.word	0x0800fd75
 800fdd8:	0800fd75 	.word	0x0800fd75
 800fddc:	0800fd75 	.word	0x0800fd75
 800fde0:	0800feb1 	.word	0x0800feb1
 800fde4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800fde8:	e7db      	b.n	800fda2 <_scanf_float+0x8e>
 800fdea:	290e      	cmp	r1, #14
 800fdec:	d8c2      	bhi.n	800fd74 <_scanf_float+0x60>
 800fdee:	a001      	add	r0, pc, #4	; (adr r0, 800fdf4 <_scanf_float+0xe0>)
 800fdf0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800fdf4:	0800fea3 	.word	0x0800fea3
 800fdf8:	0800fd75 	.word	0x0800fd75
 800fdfc:	0800fea3 	.word	0x0800fea3
 800fe00:	0800ff37 	.word	0x0800ff37
 800fe04:	0800fd75 	.word	0x0800fd75
 800fe08:	0800fe51 	.word	0x0800fe51
 800fe0c:	0800fe8d 	.word	0x0800fe8d
 800fe10:	0800fe8d 	.word	0x0800fe8d
 800fe14:	0800fe8d 	.word	0x0800fe8d
 800fe18:	0800fe8d 	.word	0x0800fe8d
 800fe1c:	0800fe8d 	.word	0x0800fe8d
 800fe20:	0800fe8d 	.word	0x0800fe8d
 800fe24:	0800fe8d 	.word	0x0800fe8d
 800fe28:	0800fe8d 	.word	0x0800fe8d
 800fe2c:	0800fe8d 	.word	0x0800fe8d
 800fe30:	2b6e      	cmp	r3, #110	; 0x6e
 800fe32:	d809      	bhi.n	800fe48 <_scanf_float+0x134>
 800fe34:	2b60      	cmp	r3, #96	; 0x60
 800fe36:	d8b2      	bhi.n	800fd9e <_scanf_float+0x8a>
 800fe38:	2b54      	cmp	r3, #84	; 0x54
 800fe3a:	d077      	beq.n	800ff2c <_scanf_float+0x218>
 800fe3c:	2b59      	cmp	r3, #89	; 0x59
 800fe3e:	d199      	bne.n	800fd74 <_scanf_float+0x60>
 800fe40:	2d07      	cmp	r5, #7
 800fe42:	d197      	bne.n	800fd74 <_scanf_float+0x60>
 800fe44:	2508      	movs	r5, #8
 800fe46:	e029      	b.n	800fe9c <_scanf_float+0x188>
 800fe48:	2b74      	cmp	r3, #116	; 0x74
 800fe4a:	d06f      	beq.n	800ff2c <_scanf_float+0x218>
 800fe4c:	2b79      	cmp	r3, #121	; 0x79
 800fe4e:	e7f6      	b.n	800fe3e <_scanf_float+0x12a>
 800fe50:	6821      	ldr	r1, [r4, #0]
 800fe52:	05c8      	lsls	r0, r1, #23
 800fe54:	d51a      	bpl.n	800fe8c <_scanf_float+0x178>
 800fe56:	9b02      	ldr	r3, [sp, #8]
 800fe58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800fe5c:	6021      	str	r1, [r4, #0]
 800fe5e:	f109 0901 	add.w	r9, r9, #1
 800fe62:	b11b      	cbz	r3, 800fe6c <_scanf_float+0x158>
 800fe64:	3b01      	subs	r3, #1
 800fe66:	3201      	adds	r2, #1
 800fe68:	9302      	str	r3, [sp, #8]
 800fe6a:	60a2      	str	r2, [r4, #8]
 800fe6c:	68a3      	ldr	r3, [r4, #8]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	60a3      	str	r3, [r4, #8]
 800fe72:	6923      	ldr	r3, [r4, #16]
 800fe74:	3301      	adds	r3, #1
 800fe76:	6123      	str	r3, [r4, #16]
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	607b      	str	r3, [r7, #4]
 800fe80:	f340 8084 	ble.w	800ff8c <_scanf_float+0x278>
 800fe84:	683b      	ldr	r3, [r7, #0]
 800fe86:	3301      	adds	r3, #1
 800fe88:	603b      	str	r3, [r7, #0]
 800fe8a:	e766      	b.n	800fd5a <_scanf_float+0x46>
 800fe8c:	eb1a 0f05 	cmn.w	sl, r5
 800fe90:	f47f af70 	bne.w	800fd74 <_scanf_float+0x60>
 800fe94:	6822      	ldr	r2, [r4, #0]
 800fe96:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800fe9a:	6022      	str	r2, [r4, #0]
 800fe9c:	f806 3b01 	strb.w	r3, [r6], #1
 800fea0:	e7e4      	b.n	800fe6c <_scanf_float+0x158>
 800fea2:	6822      	ldr	r2, [r4, #0]
 800fea4:	0610      	lsls	r0, r2, #24
 800fea6:	f57f af65 	bpl.w	800fd74 <_scanf_float+0x60>
 800feaa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800feae:	e7f4      	b.n	800fe9a <_scanf_float+0x186>
 800feb0:	f1ba 0f00 	cmp.w	sl, #0
 800feb4:	d10e      	bne.n	800fed4 <_scanf_float+0x1c0>
 800feb6:	f1b9 0f00 	cmp.w	r9, #0
 800feba:	d10e      	bne.n	800feda <_scanf_float+0x1c6>
 800febc:	6822      	ldr	r2, [r4, #0]
 800febe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800fec2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800fec6:	d108      	bne.n	800feda <_scanf_float+0x1c6>
 800fec8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800fecc:	6022      	str	r2, [r4, #0]
 800fece:	f04f 0a01 	mov.w	sl, #1
 800fed2:	e7e3      	b.n	800fe9c <_scanf_float+0x188>
 800fed4:	f1ba 0f02 	cmp.w	sl, #2
 800fed8:	d055      	beq.n	800ff86 <_scanf_float+0x272>
 800feda:	2d01      	cmp	r5, #1
 800fedc:	d002      	beq.n	800fee4 <_scanf_float+0x1d0>
 800fede:	2d04      	cmp	r5, #4
 800fee0:	f47f af48 	bne.w	800fd74 <_scanf_float+0x60>
 800fee4:	3501      	adds	r5, #1
 800fee6:	b2ed      	uxtb	r5, r5
 800fee8:	e7d8      	b.n	800fe9c <_scanf_float+0x188>
 800feea:	f1ba 0f01 	cmp.w	sl, #1
 800feee:	f47f af41 	bne.w	800fd74 <_scanf_float+0x60>
 800fef2:	f04f 0a02 	mov.w	sl, #2
 800fef6:	e7d1      	b.n	800fe9c <_scanf_float+0x188>
 800fef8:	b97d      	cbnz	r5, 800ff1a <_scanf_float+0x206>
 800fefa:	f1b9 0f00 	cmp.w	r9, #0
 800fefe:	f47f af3c 	bne.w	800fd7a <_scanf_float+0x66>
 800ff02:	6822      	ldr	r2, [r4, #0]
 800ff04:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ff08:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ff0c:	f47f af39 	bne.w	800fd82 <_scanf_float+0x6e>
 800ff10:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff14:	6022      	str	r2, [r4, #0]
 800ff16:	2501      	movs	r5, #1
 800ff18:	e7c0      	b.n	800fe9c <_scanf_float+0x188>
 800ff1a:	2d03      	cmp	r5, #3
 800ff1c:	d0e2      	beq.n	800fee4 <_scanf_float+0x1d0>
 800ff1e:	2d05      	cmp	r5, #5
 800ff20:	e7de      	b.n	800fee0 <_scanf_float+0x1cc>
 800ff22:	2d02      	cmp	r5, #2
 800ff24:	f47f af26 	bne.w	800fd74 <_scanf_float+0x60>
 800ff28:	2503      	movs	r5, #3
 800ff2a:	e7b7      	b.n	800fe9c <_scanf_float+0x188>
 800ff2c:	2d06      	cmp	r5, #6
 800ff2e:	f47f af21 	bne.w	800fd74 <_scanf_float+0x60>
 800ff32:	2507      	movs	r5, #7
 800ff34:	e7b2      	b.n	800fe9c <_scanf_float+0x188>
 800ff36:	6822      	ldr	r2, [r4, #0]
 800ff38:	0591      	lsls	r1, r2, #22
 800ff3a:	f57f af1b 	bpl.w	800fd74 <_scanf_float+0x60>
 800ff3e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ff42:	6022      	str	r2, [r4, #0]
 800ff44:	f8cd 9004 	str.w	r9, [sp, #4]
 800ff48:	e7a8      	b.n	800fe9c <_scanf_float+0x188>
 800ff4a:	6822      	ldr	r2, [r4, #0]
 800ff4c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ff50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ff54:	d006      	beq.n	800ff64 <_scanf_float+0x250>
 800ff56:	0550      	lsls	r0, r2, #21
 800ff58:	f57f af0c 	bpl.w	800fd74 <_scanf_float+0x60>
 800ff5c:	f1b9 0f00 	cmp.w	r9, #0
 800ff60:	f43f af0f 	beq.w	800fd82 <_scanf_float+0x6e>
 800ff64:	0591      	lsls	r1, r2, #22
 800ff66:	bf58      	it	pl
 800ff68:	9901      	ldrpl	r1, [sp, #4]
 800ff6a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ff6e:	bf58      	it	pl
 800ff70:	eba9 0101 	subpl.w	r1, r9, r1
 800ff74:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ff78:	bf58      	it	pl
 800ff7a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ff7e:	6022      	str	r2, [r4, #0]
 800ff80:	f04f 0900 	mov.w	r9, #0
 800ff84:	e78a      	b.n	800fe9c <_scanf_float+0x188>
 800ff86:	f04f 0a03 	mov.w	sl, #3
 800ff8a:	e787      	b.n	800fe9c <_scanf_float+0x188>
 800ff8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ff90:	4639      	mov	r1, r7
 800ff92:	4640      	mov	r0, r8
 800ff94:	4798      	blx	r3
 800ff96:	2800      	cmp	r0, #0
 800ff98:	f43f aedf 	beq.w	800fd5a <_scanf_float+0x46>
 800ff9c:	e6ea      	b.n	800fd74 <_scanf_float+0x60>
 800ff9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffa6:	463a      	mov	r2, r7
 800ffa8:	4640      	mov	r0, r8
 800ffaa:	4798      	blx	r3
 800ffac:	6923      	ldr	r3, [r4, #16]
 800ffae:	3b01      	subs	r3, #1
 800ffb0:	6123      	str	r3, [r4, #16]
 800ffb2:	e6ec      	b.n	800fd8e <_scanf_float+0x7a>
 800ffb4:	1e6b      	subs	r3, r5, #1
 800ffb6:	2b06      	cmp	r3, #6
 800ffb8:	d825      	bhi.n	8010006 <_scanf_float+0x2f2>
 800ffba:	2d02      	cmp	r5, #2
 800ffbc:	d836      	bhi.n	801002c <_scanf_float+0x318>
 800ffbe:	455e      	cmp	r6, fp
 800ffc0:	f67f aee8 	bls.w	800fd94 <_scanf_float+0x80>
 800ffc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffc8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4640      	mov	r0, r8
 800ffd0:	4798      	blx	r3
 800ffd2:	6923      	ldr	r3, [r4, #16]
 800ffd4:	3b01      	subs	r3, #1
 800ffd6:	6123      	str	r3, [r4, #16]
 800ffd8:	e7f1      	b.n	800ffbe <_scanf_float+0x2aa>
 800ffda:	9802      	ldr	r0, [sp, #8]
 800ffdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ffe0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ffe4:	9002      	str	r0, [sp, #8]
 800ffe6:	463a      	mov	r2, r7
 800ffe8:	4640      	mov	r0, r8
 800ffea:	4798      	blx	r3
 800ffec:	6923      	ldr	r3, [r4, #16]
 800ffee:	3b01      	subs	r3, #1
 800fff0:	6123      	str	r3, [r4, #16]
 800fff2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fff6:	fa5f fa8a 	uxtb.w	sl, sl
 800fffa:	f1ba 0f02 	cmp.w	sl, #2
 800fffe:	d1ec      	bne.n	800ffda <_scanf_float+0x2c6>
 8010000:	3d03      	subs	r5, #3
 8010002:	b2ed      	uxtb	r5, r5
 8010004:	1b76      	subs	r6, r6, r5
 8010006:	6823      	ldr	r3, [r4, #0]
 8010008:	05da      	lsls	r2, r3, #23
 801000a:	d52f      	bpl.n	801006c <_scanf_float+0x358>
 801000c:	055b      	lsls	r3, r3, #21
 801000e:	d510      	bpl.n	8010032 <_scanf_float+0x31e>
 8010010:	455e      	cmp	r6, fp
 8010012:	f67f aebf 	bls.w	800fd94 <_scanf_float+0x80>
 8010016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801001a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801001e:	463a      	mov	r2, r7
 8010020:	4640      	mov	r0, r8
 8010022:	4798      	blx	r3
 8010024:	6923      	ldr	r3, [r4, #16]
 8010026:	3b01      	subs	r3, #1
 8010028:	6123      	str	r3, [r4, #16]
 801002a:	e7f1      	b.n	8010010 <_scanf_float+0x2fc>
 801002c:	46aa      	mov	sl, r5
 801002e:	9602      	str	r6, [sp, #8]
 8010030:	e7df      	b.n	800fff2 <_scanf_float+0x2de>
 8010032:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010036:	6923      	ldr	r3, [r4, #16]
 8010038:	2965      	cmp	r1, #101	; 0x65
 801003a:	f103 33ff 	add.w	r3, r3, #4294967295
 801003e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010042:	6123      	str	r3, [r4, #16]
 8010044:	d00c      	beq.n	8010060 <_scanf_float+0x34c>
 8010046:	2945      	cmp	r1, #69	; 0x45
 8010048:	d00a      	beq.n	8010060 <_scanf_float+0x34c>
 801004a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801004e:	463a      	mov	r2, r7
 8010050:	4640      	mov	r0, r8
 8010052:	4798      	blx	r3
 8010054:	6923      	ldr	r3, [r4, #16]
 8010056:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801005a:	3b01      	subs	r3, #1
 801005c:	1eb5      	subs	r5, r6, #2
 801005e:	6123      	str	r3, [r4, #16]
 8010060:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010064:	463a      	mov	r2, r7
 8010066:	4640      	mov	r0, r8
 8010068:	4798      	blx	r3
 801006a:	462e      	mov	r6, r5
 801006c:	6825      	ldr	r5, [r4, #0]
 801006e:	f015 0510 	ands.w	r5, r5, #16
 8010072:	d159      	bne.n	8010128 <_scanf_float+0x414>
 8010074:	7035      	strb	r5, [r6, #0]
 8010076:	6823      	ldr	r3, [r4, #0]
 8010078:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801007c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010080:	d11b      	bne.n	80100ba <_scanf_float+0x3a6>
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	454b      	cmp	r3, r9
 8010086:	eba3 0209 	sub.w	r2, r3, r9
 801008a:	d123      	bne.n	80100d4 <_scanf_float+0x3c0>
 801008c:	2200      	movs	r2, #0
 801008e:	4659      	mov	r1, fp
 8010090:	4640      	mov	r0, r8
 8010092:	f000 fe97 	bl	8010dc4 <_strtod_r>
 8010096:	6822      	ldr	r2, [r4, #0]
 8010098:	9b03      	ldr	r3, [sp, #12]
 801009a:	f012 0f02 	tst.w	r2, #2
 801009e:	ec57 6b10 	vmov	r6, r7, d0
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	d021      	beq.n	80100ea <_scanf_float+0x3d6>
 80100a6:	9903      	ldr	r1, [sp, #12]
 80100a8:	1d1a      	adds	r2, r3, #4
 80100aa:	600a      	str	r2, [r1, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	e9c3 6700 	strd	r6, r7, [r3]
 80100b2:	68e3      	ldr	r3, [r4, #12]
 80100b4:	3301      	adds	r3, #1
 80100b6:	60e3      	str	r3, [r4, #12]
 80100b8:	e66d      	b.n	800fd96 <_scanf_float+0x82>
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d0e5      	beq.n	801008c <_scanf_float+0x378>
 80100c0:	9905      	ldr	r1, [sp, #20]
 80100c2:	230a      	movs	r3, #10
 80100c4:	462a      	mov	r2, r5
 80100c6:	3101      	adds	r1, #1
 80100c8:	4640      	mov	r0, r8
 80100ca:	f000 ff03 	bl	8010ed4 <_strtol_r>
 80100ce:	9b04      	ldr	r3, [sp, #16]
 80100d0:	9e05      	ldr	r6, [sp, #20]
 80100d2:	1ac2      	subs	r2, r0, r3
 80100d4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80100d8:	429e      	cmp	r6, r3
 80100da:	bf28      	it	cs
 80100dc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80100e0:	4912      	ldr	r1, [pc, #72]	; (801012c <_scanf_float+0x418>)
 80100e2:	4630      	mov	r0, r6
 80100e4:	f000 f82c 	bl	8010140 <siprintf>
 80100e8:	e7d0      	b.n	801008c <_scanf_float+0x378>
 80100ea:	9903      	ldr	r1, [sp, #12]
 80100ec:	f012 0f04 	tst.w	r2, #4
 80100f0:	f103 0204 	add.w	r2, r3, #4
 80100f4:	600a      	str	r2, [r1, #0]
 80100f6:	d1d9      	bne.n	80100ac <_scanf_float+0x398>
 80100f8:	f8d3 8000 	ldr.w	r8, [r3]
 80100fc:	ee10 2a10 	vmov	r2, s0
 8010100:	ee10 0a10 	vmov	r0, s0
 8010104:	463b      	mov	r3, r7
 8010106:	4639      	mov	r1, r7
 8010108:	f7f0 fd20 	bl	8000b4c <__aeabi_dcmpun>
 801010c:	b128      	cbz	r0, 801011a <_scanf_float+0x406>
 801010e:	4808      	ldr	r0, [pc, #32]	; (8010130 <_scanf_float+0x41c>)
 8010110:	f000 f810 	bl	8010134 <nanf>
 8010114:	ed88 0a00 	vstr	s0, [r8]
 8010118:	e7cb      	b.n	80100b2 <_scanf_float+0x39e>
 801011a:	4630      	mov	r0, r6
 801011c:	4639      	mov	r1, r7
 801011e:	f7f0 fd73 	bl	8000c08 <__aeabi_d2f>
 8010122:	f8c8 0000 	str.w	r0, [r8]
 8010126:	e7c4      	b.n	80100b2 <_scanf_float+0x39e>
 8010128:	2500      	movs	r5, #0
 801012a:	e634      	b.n	800fd96 <_scanf_float+0x82>
 801012c:	08015960 	.word	0x08015960
 8010130:	08015d68 	.word	0x08015d68

08010134 <nanf>:
 8010134:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801013c <nanf+0x8>
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop
 801013c:	7fc00000 	.word	0x7fc00000

08010140 <siprintf>:
 8010140:	b40e      	push	{r1, r2, r3}
 8010142:	b500      	push	{lr}
 8010144:	b09c      	sub	sp, #112	; 0x70
 8010146:	ab1d      	add	r3, sp, #116	; 0x74
 8010148:	9002      	str	r0, [sp, #8]
 801014a:	9006      	str	r0, [sp, #24]
 801014c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010150:	4809      	ldr	r0, [pc, #36]	; (8010178 <siprintf+0x38>)
 8010152:	9107      	str	r1, [sp, #28]
 8010154:	9104      	str	r1, [sp, #16]
 8010156:	4909      	ldr	r1, [pc, #36]	; (801017c <siprintf+0x3c>)
 8010158:	f853 2b04 	ldr.w	r2, [r3], #4
 801015c:	9105      	str	r1, [sp, #20]
 801015e:	6800      	ldr	r0, [r0, #0]
 8010160:	9301      	str	r3, [sp, #4]
 8010162:	a902      	add	r1, sp, #8
 8010164:	f002 fed4 	bl	8012f10 <_svfiprintf_r>
 8010168:	9b02      	ldr	r3, [sp, #8]
 801016a:	2200      	movs	r2, #0
 801016c:	701a      	strb	r2, [r3, #0]
 801016e:	b01c      	add	sp, #112	; 0x70
 8010170:	f85d eb04 	ldr.w	lr, [sp], #4
 8010174:	b003      	add	sp, #12
 8010176:	4770      	bx	lr
 8010178:	2000017c 	.word	0x2000017c
 801017c:	ffff0208 	.word	0xffff0208

08010180 <sulp>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	4604      	mov	r4, r0
 8010184:	460d      	mov	r5, r1
 8010186:	ec45 4b10 	vmov	d0, r4, r5
 801018a:	4616      	mov	r6, r2
 801018c:	f002 fc1e 	bl	80129cc <__ulp>
 8010190:	ec51 0b10 	vmov	r0, r1, d0
 8010194:	b17e      	cbz	r6, 80101b6 <sulp+0x36>
 8010196:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801019a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801019e:	2b00      	cmp	r3, #0
 80101a0:	dd09      	ble.n	80101b6 <sulp+0x36>
 80101a2:	051b      	lsls	r3, r3, #20
 80101a4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80101a8:	2400      	movs	r4, #0
 80101aa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80101ae:	4622      	mov	r2, r4
 80101b0:	462b      	mov	r3, r5
 80101b2:	f7f0 fa31 	bl	8000618 <__aeabi_dmul>
 80101b6:	bd70      	pop	{r4, r5, r6, pc}

080101b8 <_strtod_l>:
 80101b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101bc:	ed2d 8b02 	vpush	{d8}
 80101c0:	b09d      	sub	sp, #116	; 0x74
 80101c2:	461f      	mov	r7, r3
 80101c4:	2300      	movs	r3, #0
 80101c6:	9318      	str	r3, [sp, #96]	; 0x60
 80101c8:	4ba2      	ldr	r3, [pc, #648]	; (8010454 <_strtod_l+0x29c>)
 80101ca:	9213      	str	r2, [sp, #76]	; 0x4c
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	9305      	str	r3, [sp, #20]
 80101d0:	4604      	mov	r4, r0
 80101d2:	4618      	mov	r0, r3
 80101d4:	4688      	mov	r8, r1
 80101d6:	f7f0 f80b 	bl	80001f0 <strlen>
 80101da:	f04f 0a00 	mov.w	sl, #0
 80101de:	4605      	mov	r5, r0
 80101e0:	f04f 0b00 	mov.w	fp, #0
 80101e4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80101e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80101ea:	781a      	ldrb	r2, [r3, #0]
 80101ec:	2a2b      	cmp	r2, #43	; 0x2b
 80101ee:	d04e      	beq.n	801028e <_strtod_l+0xd6>
 80101f0:	d83b      	bhi.n	801026a <_strtod_l+0xb2>
 80101f2:	2a0d      	cmp	r2, #13
 80101f4:	d834      	bhi.n	8010260 <_strtod_l+0xa8>
 80101f6:	2a08      	cmp	r2, #8
 80101f8:	d834      	bhi.n	8010264 <_strtod_l+0xac>
 80101fa:	2a00      	cmp	r2, #0
 80101fc:	d03e      	beq.n	801027c <_strtod_l+0xc4>
 80101fe:	2300      	movs	r3, #0
 8010200:	930a      	str	r3, [sp, #40]	; 0x28
 8010202:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8010204:	7833      	ldrb	r3, [r6, #0]
 8010206:	2b30      	cmp	r3, #48	; 0x30
 8010208:	f040 80b0 	bne.w	801036c <_strtod_l+0x1b4>
 801020c:	7873      	ldrb	r3, [r6, #1]
 801020e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010212:	2b58      	cmp	r3, #88	; 0x58
 8010214:	d168      	bne.n	80102e8 <_strtod_l+0x130>
 8010216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010218:	9301      	str	r3, [sp, #4]
 801021a:	ab18      	add	r3, sp, #96	; 0x60
 801021c:	9702      	str	r7, [sp, #8]
 801021e:	9300      	str	r3, [sp, #0]
 8010220:	4a8d      	ldr	r2, [pc, #564]	; (8010458 <_strtod_l+0x2a0>)
 8010222:	ab19      	add	r3, sp, #100	; 0x64
 8010224:	a917      	add	r1, sp, #92	; 0x5c
 8010226:	4620      	mov	r0, r4
 8010228:	f001 fd38 	bl	8011c9c <__gethex>
 801022c:	f010 0707 	ands.w	r7, r0, #7
 8010230:	4605      	mov	r5, r0
 8010232:	d005      	beq.n	8010240 <_strtod_l+0x88>
 8010234:	2f06      	cmp	r7, #6
 8010236:	d12c      	bne.n	8010292 <_strtod_l+0xda>
 8010238:	3601      	adds	r6, #1
 801023a:	2300      	movs	r3, #0
 801023c:	9617      	str	r6, [sp, #92]	; 0x5c
 801023e:	930a      	str	r3, [sp, #40]	; 0x28
 8010240:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8010242:	2b00      	cmp	r3, #0
 8010244:	f040 8590 	bne.w	8010d68 <_strtod_l+0xbb0>
 8010248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024a:	b1eb      	cbz	r3, 8010288 <_strtod_l+0xd0>
 801024c:	4652      	mov	r2, sl
 801024e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8010252:	ec43 2b10 	vmov	d0, r2, r3
 8010256:	b01d      	add	sp, #116	; 0x74
 8010258:	ecbd 8b02 	vpop	{d8}
 801025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010260:	2a20      	cmp	r2, #32
 8010262:	d1cc      	bne.n	80101fe <_strtod_l+0x46>
 8010264:	3301      	adds	r3, #1
 8010266:	9317      	str	r3, [sp, #92]	; 0x5c
 8010268:	e7be      	b.n	80101e8 <_strtod_l+0x30>
 801026a:	2a2d      	cmp	r2, #45	; 0x2d
 801026c:	d1c7      	bne.n	80101fe <_strtod_l+0x46>
 801026e:	2201      	movs	r2, #1
 8010270:	920a      	str	r2, [sp, #40]	; 0x28
 8010272:	1c5a      	adds	r2, r3, #1
 8010274:	9217      	str	r2, [sp, #92]	; 0x5c
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d1c2      	bne.n	8010202 <_strtod_l+0x4a>
 801027c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801027e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010282:	2b00      	cmp	r3, #0
 8010284:	f040 856e 	bne.w	8010d64 <_strtod_l+0xbac>
 8010288:	4652      	mov	r2, sl
 801028a:	465b      	mov	r3, fp
 801028c:	e7e1      	b.n	8010252 <_strtod_l+0x9a>
 801028e:	2200      	movs	r2, #0
 8010290:	e7ee      	b.n	8010270 <_strtod_l+0xb8>
 8010292:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010294:	b13a      	cbz	r2, 80102a6 <_strtod_l+0xee>
 8010296:	2135      	movs	r1, #53	; 0x35
 8010298:	a81a      	add	r0, sp, #104	; 0x68
 801029a:	f002 fca2 	bl	8012be2 <__copybits>
 801029e:	9918      	ldr	r1, [sp, #96]	; 0x60
 80102a0:	4620      	mov	r0, r4
 80102a2:	f002 f861 	bl	8012368 <_Bfree>
 80102a6:	3f01      	subs	r7, #1
 80102a8:	2f04      	cmp	r7, #4
 80102aa:	d806      	bhi.n	80102ba <_strtod_l+0x102>
 80102ac:	e8df f007 	tbb	[pc, r7]
 80102b0:	1714030a 	.word	0x1714030a
 80102b4:	0a          	.byte	0x0a
 80102b5:	00          	.byte	0x00
 80102b6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80102ba:	0728      	lsls	r0, r5, #28
 80102bc:	d5c0      	bpl.n	8010240 <_strtod_l+0x88>
 80102be:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80102c2:	e7bd      	b.n	8010240 <_strtod_l+0x88>
 80102c4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80102c8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80102ca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80102ce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80102d2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80102d6:	e7f0      	b.n	80102ba <_strtod_l+0x102>
 80102d8:	f8df b180 	ldr.w	fp, [pc, #384]	; 801045c <_strtod_l+0x2a4>
 80102dc:	e7ed      	b.n	80102ba <_strtod_l+0x102>
 80102de:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80102e2:	f04f 3aff 	mov.w	sl, #4294967295
 80102e6:	e7e8      	b.n	80102ba <_strtod_l+0x102>
 80102e8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80102ea:	1c5a      	adds	r2, r3, #1
 80102ec:	9217      	str	r2, [sp, #92]	; 0x5c
 80102ee:	785b      	ldrb	r3, [r3, #1]
 80102f0:	2b30      	cmp	r3, #48	; 0x30
 80102f2:	d0f9      	beq.n	80102e8 <_strtod_l+0x130>
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d0a3      	beq.n	8010240 <_strtod_l+0x88>
 80102f8:	2301      	movs	r3, #1
 80102fa:	f04f 0900 	mov.w	r9, #0
 80102fe:	9304      	str	r3, [sp, #16]
 8010300:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010302:	9308      	str	r3, [sp, #32]
 8010304:	f8cd 901c 	str.w	r9, [sp, #28]
 8010308:	464f      	mov	r7, r9
 801030a:	220a      	movs	r2, #10
 801030c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801030e:	7806      	ldrb	r6, [r0, #0]
 8010310:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8010314:	b2d9      	uxtb	r1, r3
 8010316:	2909      	cmp	r1, #9
 8010318:	d92a      	bls.n	8010370 <_strtod_l+0x1b8>
 801031a:	9905      	ldr	r1, [sp, #20]
 801031c:	462a      	mov	r2, r5
 801031e:	f002 ff0f 	bl	8013140 <strncmp>
 8010322:	b398      	cbz	r0, 801038c <_strtod_l+0x1d4>
 8010324:	2000      	movs	r0, #0
 8010326:	4632      	mov	r2, r6
 8010328:	463d      	mov	r5, r7
 801032a:	9005      	str	r0, [sp, #20]
 801032c:	4603      	mov	r3, r0
 801032e:	2a65      	cmp	r2, #101	; 0x65
 8010330:	d001      	beq.n	8010336 <_strtod_l+0x17e>
 8010332:	2a45      	cmp	r2, #69	; 0x45
 8010334:	d118      	bne.n	8010368 <_strtod_l+0x1b0>
 8010336:	b91d      	cbnz	r5, 8010340 <_strtod_l+0x188>
 8010338:	9a04      	ldr	r2, [sp, #16]
 801033a:	4302      	orrs	r2, r0
 801033c:	d09e      	beq.n	801027c <_strtod_l+0xc4>
 801033e:	2500      	movs	r5, #0
 8010340:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8010344:	f108 0201 	add.w	r2, r8, #1
 8010348:	9217      	str	r2, [sp, #92]	; 0x5c
 801034a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801034e:	2a2b      	cmp	r2, #43	; 0x2b
 8010350:	d075      	beq.n	801043e <_strtod_l+0x286>
 8010352:	2a2d      	cmp	r2, #45	; 0x2d
 8010354:	d07b      	beq.n	801044e <_strtod_l+0x296>
 8010356:	f04f 0c00 	mov.w	ip, #0
 801035a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801035e:	2909      	cmp	r1, #9
 8010360:	f240 8082 	bls.w	8010468 <_strtod_l+0x2b0>
 8010364:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8010368:	2600      	movs	r6, #0
 801036a:	e09d      	b.n	80104a8 <_strtod_l+0x2f0>
 801036c:	2300      	movs	r3, #0
 801036e:	e7c4      	b.n	80102fa <_strtod_l+0x142>
 8010370:	2f08      	cmp	r7, #8
 8010372:	bfd8      	it	le
 8010374:	9907      	ldrle	r1, [sp, #28]
 8010376:	f100 0001 	add.w	r0, r0, #1
 801037a:	bfda      	itte	le
 801037c:	fb02 3301 	mlale	r3, r2, r1, r3
 8010380:	9307      	strle	r3, [sp, #28]
 8010382:	fb02 3909 	mlagt	r9, r2, r9, r3
 8010386:	3701      	adds	r7, #1
 8010388:	9017      	str	r0, [sp, #92]	; 0x5c
 801038a:	e7bf      	b.n	801030c <_strtod_l+0x154>
 801038c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801038e:	195a      	adds	r2, r3, r5
 8010390:	9217      	str	r2, [sp, #92]	; 0x5c
 8010392:	5d5a      	ldrb	r2, [r3, r5]
 8010394:	2f00      	cmp	r7, #0
 8010396:	d037      	beq.n	8010408 <_strtod_l+0x250>
 8010398:	9005      	str	r0, [sp, #20]
 801039a:	463d      	mov	r5, r7
 801039c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80103a0:	2b09      	cmp	r3, #9
 80103a2:	d912      	bls.n	80103ca <_strtod_l+0x212>
 80103a4:	2301      	movs	r3, #1
 80103a6:	e7c2      	b.n	801032e <_strtod_l+0x176>
 80103a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103aa:	1c5a      	adds	r2, r3, #1
 80103ac:	9217      	str	r2, [sp, #92]	; 0x5c
 80103ae:	785a      	ldrb	r2, [r3, #1]
 80103b0:	3001      	adds	r0, #1
 80103b2:	2a30      	cmp	r2, #48	; 0x30
 80103b4:	d0f8      	beq.n	80103a8 <_strtod_l+0x1f0>
 80103b6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80103ba:	2b08      	cmp	r3, #8
 80103bc:	f200 84d9 	bhi.w	8010d72 <_strtod_l+0xbba>
 80103c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80103c2:	9005      	str	r0, [sp, #20]
 80103c4:	2000      	movs	r0, #0
 80103c6:	9308      	str	r3, [sp, #32]
 80103c8:	4605      	mov	r5, r0
 80103ca:	3a30      	subs	r2, #48	; 0x30
 80103cc:	f100 0301 	add.w	r3, r0, #1
 80103d0:	d014      	beq.n	80103fc <_strtod_l+0x244>
 80103d2:	9905      	ldr	r1, [sp, #20]
 80103d4:	4419      	add	r1, r3
 80103d6:	9105      	str	r1, [sp, #20]
 80103d8:	462b      	mov	r3, r5
 80103da:	eb00 0e05 	add.w	lr, r0, r5
 80103de:	210a      	movs	r1, #10
 80103e0:	4573      	cmp	r3, lr
 80103e2:	d113      	bne.n	801040c <_strtod_l+0x254>
 80103e4:	182b      	adds	r3, r5, r0
 80103e6:	2b08      	cmp	r3, #8
 80103e8:	f105 0501 	add.w	r5, r5, #1
 80103ec:	4405      	add	r5, r0
 80103ee:	dc1c      	bgt.n	801042a <_strtod_l+0x272>
 80103f0:	9907      	ldr	r1, [sp, #28]
 80103f2:	230a      	movs	r3, #10
 80103f4:	fb03 2301 	mla	r3, r3, r1, r2
 80103f8:	9307      	str	r3, [sp, #28]
 80103fa:	2300      	movs	r3, #0
 80103fc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80103fe:	1c51      	adds	r1, r2, #1
 8010400:	9117      	str	r1, [sp, #92]	; 0x5c
 8010402:	7852      	ldrb	r2, [r2, #1]
 8010404:	4618      	mov	r0, r3
 8010406:	e7c9      	b.n	801039c <_strtod_l+0x1e4>
 8010408:	4638      	mov	r0, r7
 801040a:	e7d2      	b.n	80103b2 <_strtod_l+0x1fa>
 801040c:	2b08      	cmp	r3, #8
 801040e:	dc04      	bgt.n	801041a <_strtod_l+0x262>
 8010410:	9e07      	ldr	r6, [sp, #28]
 8010412:	434e      	muls	r6, r1
 8010414:	9607      	str	r6, [sp, #28]
 8010416:	3301      	adds	r3, #1
 8010418:	e7e2      	b.n	80103e0 <_strtod_l+0x228>
 801041a:	f103 0c01 	add.w	ip, r3, #1
 801041e:	f1bc 0f10 	cmp.w	ip, #16
 8010422:	bfd8      	it	le
 8010424:	fb01 f909 	mulle.w	r9, r1, r9
 8010428:	e7f5      	b.n	8010416 <_strtod_l+0x25e>
 801042a:	2d10      	cmp	r5, #16
 801042c:	bfdc      	itt	le
 801042e:	230a      	movle	r3, #10
 8010430:	fb03 2909 	mlale	r9, r3, r9, r2
 8010434:	e7e1      	b.n	80103fa <_strtod_l+0x242>
 8010436:	2300      	movs	r3, #0
 8010438:	9305      	str	r3, [sp, #20]
 801043a:	2301      	movs	r3, #1
 801043c:	e77c      	b.n	8010338 <_strtod_l+0x180>
 801043e:	f04f 0c00 	mov.w	ip, #0
 8010442:	f108 0202 	add.w	r2, r8, #2
 8010446:	9217      	str	r2, [sp, #92]	; 0x5c
 8010448:	f898 2002 	ldrb.w	r2, [r8, #2]
 801044c:	e785      	b.n	801035a <_strtod_l+0x1a2>
 801044e:	f04f 0c01 	mov.w	ip, #1
 8010452:	e7f6      	b.n	8010442 <_strtod_l+0x28a>
 8010454:	08015bb0 	.word	0x08015bb0
 8010458:	08015968 	.word	0x08015968
 801045c:	7ff00000 	.word	0x7ff00000
 8010460:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010462:	1c51      	adds	r1, r2, #1
 8010464:	9117      	str	r1, [sp, #92]	; 0x5c
 8010466:	7852      	ldrb	r2, [r2, #1]
 8010468:	2a30      	cmp	r2, #48	; 0x30
 801046a:	d0f9      	beq.n	8010460 <_strtod_l+0x2a8>
 801046c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8010470:	2908      	cmp	r1, #8
 8010472:	f63f af79 	bhi.w	8010368 <_strtod_l+0x1b0>
 8010476:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801047a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801047c:	9206      	str	r2, [sp, #24]
 801047e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010480:	1c51      	adds	r1, r2, #1
 8010482:	9117      	str	r1, [sp, #92]	; 0x5c
 8010484:	7852      	ldrb	r2, [r2, #1]
 8010486:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801048a:	2e09      	cmp	r6, #9
 801048c:	d937      	bls.n	80104fe <_strtod_l+0x346>
 801048e:	9e06      	ldr	r6, [sp, #24]
 8010490:	1b89      	subs	r1, r1, r6
 8010492:	2908      	cmp	r1, #8
 8010494:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8010498:	dc02      	bgt.n	80104a0 <_strtod_l+0x2e8>
 801049a:	4576      	cmp	r6, lr
 801049c:	bfa8      	it	ge
 801049e:	4676      	movge	r6, lr
 80104a0:	f1bc 0f00 	cmp.w	ip, #0
 80104a4:	d000      	beq.n	80104a8 <_strtod_l+0x2f0>
 80104a6:	4276      	negs	r6, r6
 80104a8:	2d00      	cmp	r5, #0
 80104aa:	d14d      	bne.n	8010548 <_strtod_l+0x390>
 80104ac:	9904      	ldr	r1, [sp, #16]
 80104ae:	4301      	orrs	r1, r0
 80104b0:	f47f aec6 	bne.w	8010240 <_strtod_l+0x88>
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	f47f aee1 	bne.w	801027c <_strtod_l+0xc4>
 80104ba:	2a69      	cmp	r2, #105	; 0x69
 80104bc:	d027      	beq.n	801050e <_strtod_l+0x356>
 80104be:	dc24      	bgt.n	801050a <_strtod_l+0x352>
 80104c0:	2a49      	cmp	r2, #73	; 0x49
 80104c2:	d024      	beq.n	801050e <_strtod_l+0x356>
 80104c4:	2a4e      	cmp	r2, #78	; 0x4e
 80104c6:	f47f aed9 	bne.w	801027c <_strtod_l+0xc4>
 80104ca:	499f      	ldr	r1, [pc, #636]	; (8010748 <_strtod_l+0x590>)
 80104cc:	a817      	add	r0, sp, #92	; 0x5c
 80104ce:	f001 fe3d 	bl	801214c <__match>
 80104d2:	2800      	cmp	r0, #0
 80104d4:	f43f aed2 	beq.w	801027c <_strtod_l+0xc4>
 80104d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80104da:	781b      	ldrb	r3, [r3, #0]
 80104dc:	2b28      	cmp	r3, #40	; 0x28
 80104de:	d12d      	bne.n	801053c <_strtod_l+0x384>
 80104e0:	499a      	ldr	r1, [pc, #616]	; (801074c <_strtod_l+0x594>)
 80104e2:	aa1a      	add	r2, sp, #104	; 0x68
 80104e4:	a817      	add	r0, sp, #92	; 0x5c
 80104e6:	f001 fe45 	bl	8012174 <__hexnan>
 80104ea:	2805      	cmp	r0, #5
 80104ec:	d126      	bne.n	801053c <_strtod_l+0x384>
 80104ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80104f0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80104f4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80104f8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80104fc:	e6a0      	b.n	8010240 <_strtod_l+0x88>
 80104fe:	210a      	movs	r1, #10
 8010500:	fb01 2e0e 	mla	lr, r1, lr, r2
 8010504:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8010508:	e7b9      	b.n	801047e <_strtod_l+0x2c6>
 801050a:	2a6e      	cmp	r2, #110	; 0x6e
 801050c:	e7db      	b.n	80104c6 <_strtod_l+0x30e>
 801050e:	4990      	ldr	r1, [pc, #576]	; (8010750 <_strtod_l+0x598>)
 8010510:	a817      	add	r0, sp, #92	; 0x5c
 8010512:	f001 fe1b 	bl	801214c <__match>
 8010516:	2800      	cmp	r0, #0
 8010518:	f43f aeb0 	beq.w	801027c <_strtod_l+0xc4>
 801051c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801051e:	498d      	ldr	r1, [pc, #564]	; (8010754 <_strtod_l+0x59c>)
 8010520:	3b01      	subs	r3, #1
 8010522:	a817      	add	r0, sp, #92	; 0x5c
 8010524:	9317      	str	r3, [sp, #92]	; 0x5c
 8010526:	f001 fe11 	bl	801214c <__match>
 801052a:	b910      	cbnz	r0, 8010532 <_strtod_l+0x37a>
 801052c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801052e:	3301      	adds	r3, #1
 8010530:	9317      	str	r3, [sp, #92]	; 0x5c
 8010532:	f8df b230 	ldr.w	fp, [pc, #560]	; 8010764 <_strtod_l+0x5ac>
 8010536:	f04f 0a00 	mov.w	sl, #0
 801053a:	e681      	b.n	8010240 <_strtod_l+0x88>
 801053c:	4886      	ldr	r0, [pc, #536]	; (8010758 <_strtod_l+0x5a0>)
 801053e:	f002 fde7 	bl	8013110 <nan>
 8010542:	ec5b ab10 	vmov	sl, fp, d0
 8010546:	e67b      	b.n	8010240 <_strtod_l+0x88>
 8010548:	9b05      	ldr	r3, [sp, #20]
 801054a:	9807      	ldr	r0, [sp, #28]
 801054c:	1af3      	subs	r3, r6, r3
 801054e:	2f00      	cmp	r7, #0
 8010550:	bf08      	it	eq
 8010552:	462f      	moveq	r7, r5
 8010554:	2d10      	cmp	r5, #16
 8010556:	9306      	str	r3, [sp, #24]
 8010558:	46a8      	mov	r8, r5
 801055a:	bfa8      	it	ge
 801055c:	f04f 0810 	movge.w	r8, #16
 8010560:	f7ef ffe0 	bl	8000524 <__aeabi_ui2d>
 8010564:	2d09      	cmp	r5, #9
 8010566:	4682      	mov	sl, r0
 8010568:	468b      	mov	fp, r1
 801056a:	dd13      	ble.n	8010594 <_strtod_l+0x3dc>
 801056c:	4b7b      	ldr	r3, [pc, #492]	; (801075c <_strtod_l+0x5a4>)
 801056e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8010572:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8010576:	f7f0 f84f 	bl	8000618 <__aeabi_dmul>
 801057a:	4682      	mov	sl, r0
 801057c:	4648      	mov	r0, r9
 801057e:	468b      	mov	fp, r1
 8010580:	f7ef ffd0 	bl	8000524 <__aeabi_ui2d>
 8010584:	4602      	mov	r2, r0
 8010586:	460b      	mov	r3, r1
 8010588:	4650      	mov	r0, sl
 801058a:	4659      	mov	r1, fp
 801058c:	f7ef fe8e 	bl	80002ac <__adddf3>
 8010590:	4682      	mov	sl, r0
 8010592:	468b      	mov	fp, r1
 8010594:	2d0f      	cmp	r5, #15
 8010596:	dc38      	bgt.n	801060a <_strtod_l+0x452>
 8010598:	9b06      	ldr	r3, [sp, #24]
 801059a:	2b00      	cmp	r3, #0
 801059c:	f43f ae50 	beq.w	8010240 <_strtod_l+0x88>
 80105a0:	dd24      	ble.n	80105ec <_strtod_l+0x434>
 80105a2:	2b16      	cmp	r3, #22
 80105a4:	dc0b      	bgt.n	80105be <_strtod_l+0x406>
 80105a6:	496d      	ldr	r1, [pc, #436]	; (801075c <_strtod_l+0x5a4>)
 80105a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80105ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105b0:	4652      	mov	r2, sl
 80105b2:	465b      	mov	r3, fp
 80105b4:	f7f0 f830 	bl	8000618 <__aeabi_dmul>
 80105b8:	4682      	mov	sl, r0
 80105ba:	468b      	mov	fp, r1
 80105bc:	e640      	b.n	8010240 <_strtod_l+0x88>
 80105be:	9a06      	ldr	r2, [sp, #24]
 80105c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80105c4:	4293      	cmp	r3, r2
 80105c6:	db20      	blt.n	801060a <_strtod_l+0x452>
 80105c8:	4c64      	ldr	r4, [pc, #400]	; (801075c <_strtod_l+0x5a4>)
 80105ca:	f1c5 050f 	rsb	r5, r5, #15
 80105ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80105d2:	4652      	mov	r2, sl
 80105d4:	465b      	mov	r3, fp
 80105d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105da:	f7f0 f81d 	bl	8000618 <__aeabi_dmul>
 80105de:	9b06      	ldr	r3, [sp, #24]
 80105e0:	1b5d      	subs	r5, r3, r5
 80105e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80105e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80105ea:	e7e3      	b.n	80105b4 <_strtod_l+0x3fc>
 80105ec:	9b06      	ldr	r3, [sp, #24]
 80105ee:	3316      	adds	r3, #22
 80105f0:	db0b      	blt.n	801060a <_strtod_l+0x452>
 80105f2:	9b05      	ldr	r3, [sp, #20]
 80105f4:	1b9e      	subs	r6, r3, r6
 80105f6:	4b59      	ldr	r3, [pc, #356]	; (801075c <_strtod_l+0x5a4>)
 80105f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80105fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8010600:	4650      	mov	r0, sl
 8010602:	4659      	mov	r1, fp
 8010604:	f7f0 f932 	bl	800086c <__aeabi_ddiv>
 8010608:	e7d6      	b.n	80105b8 <_strtod_l+0x400>
 801060a:	9b06      	ldr	r3, [sp, #24]
 801060c:	eba5 0808 	sub.w	r8, r5, r8
 8010610:	4498      	add	r8, r3
 8010612:	f1b8 0f00 	cmp.w	r8, #0
 8010616:	dd74      	ble.n	8010702 <_strtod_l+0x54a>
 8010618:	f018 030f 	ands.w	r3, r8, #15
 801061c:	d00a      	beq.n	8010634 <_strtod_l+0x47c>
 801061e:	494f      	ldr	r1, [pc, #316]	; (801075c <_strtod_l+0x5a4>)
 8010620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8010624:	4652      	mov	r2, sl
 8010626:	465b      	mov	r3, fp
 8010628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801062c:	f7ef fff4 	bl	8000618 <__aeabi_dmul>
 8010630:	4682      	mov	sl, r0
 8010632:	468b      	mov	fp, r1
 8010634:	f038 080f 	bics.w	r8, r8, #15
 8010638:	d04f      	beq.n	80106da <_strtod_l+0x522>
 801063a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801063e:	dd22      	ble.n	8010686 <_strtod_l+0x4ce>
 8010640:	2500      	movs	r5, #0
 8010642:	462e      	mov	r6, r5
 8010644:	9507      	str	r5, [sp, #28]
 8010646:	9505      	str	r5, [sp, #20]
 8010648:	2322      	movs	r3, #34	; 0x22
 801064a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8010764 <_strtod_l+0x5ac>
 801064e:	6023      	str	r3, [r4, #0]
 8010650:	f04f 0a00 	mov.w	sl, #0
 8010654:	9b07      	ldr	r3, [sp, #28]
 8010656:	2b00      	cmp	r3, #0
 8010658:	f43f adf2 	beq.w	8010240 <_strtod_l+0x88>
 801065c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801065e:	4620      	mov	r0, r4
 8010660:	f001 fe82 	bl	8012368 <_Bfree>
 8010664:	9905      	ldr	r1, [sp, #20]
 8010666:	4620      	mov	r0, r4
 8010668:	f001 fe7e 	bl	8012368 <_Bfree>
 801066c:	4631      	mov	r1, r6
 801066e:	4620      	mov	r0, r4
 8010670:	f001 fe7a 	bl	8012368 <_Bfree>
 8010674:	9907      	ldr	r1, [sp, #28]
 8010676:	4620      	mov	r0, r4
 8010678:	f001 fe76 	bl	8012368 <_Bfree>
 801067c:	4629      	mov	r1, r5
 801067e:	4620      	mov	r0, r4
 8010680:	f001 fe72 	bl	8012368 <_Bfree>
 8010684:	e5dc      	b.n	8010240 <_strtod_l+0x88>
 8010686:	4b36      	ldr	r3, [pc, #216]	; (8010760 <_strtod_l+0x5a8>)
 8010688:	9304      	str	r3, [sp, #16]
 801068a:	2300      	movs	r3, #0
 801068c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8010690:	4650      	mov	r0, sl
 8010692:	4659      	mov	r1, fp
 8010694:	4699      	mov	r9, r3
 8010696:	f1b8 0f01 	cmp.w	r8, #1
 801069a:	dc21      	bgt.n	80106e0 <_strtod_l+0x528>
 801069c:	b10b      	cbz	r3, 80106a2 <_strtod_l+0x4ea>
 801069e:	4682      	mov	sl, r0
 80106a0:	468b      	mov	fp, r1
 80106a2:	4b2f      	ldr	r3, [pc, #188]	; (8010760 <_strtod_l+0x5a8>)
 80106a4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80106a8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80106ac:	4652      	mov	r2, sl
 80106ae:	465b      	mov	r3, fp
 80106b0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80106b4:	f7ef ffb0 	bl	8000618 <__aeabi_dmul>
 80106b8:	4b2a      	ldr	r3, [pc, #168]	; (8010764 <_strtod_l+0x5ac>)
 80106ba:	460a      	mov	r2, r1
 80106bc:	400b      	ands	r3, r1
 80106be:	492a      	ldr	r1, [pc, #168]	; (8010768 <_strtod_l+0x5b0>)
 80106c0:	428b      	cmp	r3, r1
 80106c2:	4682      	mov	sl, r0
 80106c4:	d8bc      	bhi.n	8010640 <_strtod_l+0x488>
 80106c6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80106ca:	428b      	cmp	r3, r1
 80106cc:	bf86      	itte	hi
 80106ce:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 801076c <_strtod_l+0x5b4>
 80106d2:	f04f 3aff 	movhi.w	sl, #4294967295
 80106d6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80106da:	2300      	movs	r3, #0
 80106dc:	9304      	str	r3, [sp, #16]
 80106de:	e084      	b.n	80107ea <_strtod_l+0x632>
 80106e0:	f018 0f01 	tst.w	r8, #1
 80106e4:	d005      	beq.n	80106f2 <_strtod_l+0x53a>
 80106e6:	9b04      	ldr	r3, [sp, #16]
 80106e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ec:	f7ef ff94 	bl	8000618 <__aeabi_dmul>
 80106f0:	2301      	movs	r3, #1
 80106f2:	9a04      	ldr	r2, [sp, #16]
 80106f4:	3208      	adds	r2, #8
 80106f6:	f109 0901 	add.w	r9, r9, #1
 80106fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80106fe:	9204      	str	r2, [sp, #16]
 8010700:	e7c9      	b.n	8010696 <_strtod_l+0x4de>
 8010702:	d0ea      	beq.n	80106da <_strtod_l+0x522>
 8010704:	f1c8 0800 	rsb	r8, r8, #0
 8010708:	f018 020f 	ands.w	r2, r8, #15
 801070c:	d00a      	beq.n	8010724 <_strtod_l+0x56c>
 801070e:	4b13      	ldr	r3, [pc, #76]	; (801075c <_strtod_l+0x5a4>)
 8010710:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010714:	4650      	mov	r0, sl
 8010716:	4659      	mov	r1, fp
 8010718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801071c:	f7f0 f8a6 	bl	800086c <__aeabi_ddiv>
 8010720:	4682      	mov	sl, r0
 8010722:	468b      	mov	fp, r1
 8010724:	ea5f 1828 	movs.w	r8, r8, asr #4
 8010728:	d0d7      	beq.n	80106da <_strtod_l+0x522>
 801072a:	f1b8 0f1f 	cmp.w	r8, #31
 801072e:	dd1f      	ble.n	8010770 <_strtod_l+0x5b8>
 8010730:	2500      	movs	r5, #0
 8010732:	462e      	mov	r6, r5
 8010734:	9507      	str	r5, [sp, #28]
 8010736:	9505      	str	r5, [sp, #20]
 8010738:	2322      	movs	r3, #34	; 0x22
 801073a:	f04f 0a00 	mov.w	sl, #0
 801073e:	f04f 0b00 	mov.w	fp, #0
 8010742:	6023      	str	r3, [r4, #0]
 8010744:	e786      	b.n	8010654 <_strtod_l+0x49c>
 8010746:	bf00      	nop
 8010748:	08015939 	.word	0x08015939
 801074c:	0801597c 	.word	0x0801597c
 8010750:	08015931 	.word	0x08015931
 8010754:	08015abc 	.word	0x08015abc
 8010758:	08015d68 	.word	0x08015d68
 801075c:	08015c48 	.word	0x08015c48
 8010760:	08015c20 	.word	0x08015c20
 8010764:	7ff00000 	.word	0x7ff00000
 8010768:	7ca00000 	.word	0x7ca00000
 801076c:	7fefffff 	.word	0x7fefffff
 8010770:	f018 0310 	ands.w	r3, r8, #16
 8010774:	bf18      	it	ne
 8010776:	236a      	movne	r3, #106	; 0x6a
 8010778:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8010b28 <_strtod_l+0x970>
 801077c:	9304      	str	r3, [sp, #16]
 801077e:	4650      	mov	r0, sl
 8010780:	4659      	mov	r1, fp
 8010782:	2300      	movs	r3, #0
 8010784:	f018 0f01 	tst.w	r8, #1
 8010788:	d004      	beq.n	8010794 <_strtod_l+0x5dc>
 801078a:	e9d9 2300 	ldrd	r2, r3, [r9]
 801078e:	f7ef ff43 	bl	8000618 <__aeabi_dmul>
 8010792:	2301      	movs	r3, #1
 8010794:	ea5f 0868 	movs.w	r8, r8, asr #1
 8010798:	f109 0908 	add.w	r9, r9, #8
 801079c:	d1f2      	bne.n	8010784 <_strtod_l+0x5cc>
 801079e:	b10b      	cbz	r3, 80107a4 <_strtod_l+0x5ec>
 80107a0:	4682      	mov	sl, r0
 80107a2:	468b      	mov	fp, r1
 80107a4:	9b04      	ldr	r3, [sp, #16]
 80107a6:	b1c3      	cbz	r3, 80107da <_strtod_l+0x622>
 80107a8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80107ac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	4659      	mov	r1, fp
 80107b4:	dd11      	ble.n	80107da <_strtod_l+0x622>
 80107b6:	2b1f      	cmp	r3, #31
 80107b8:	f340 8124 	ble.w	8010a04 <_strtod_l+0x84c>
 80107bc:	2b34      	cmp	r3, #52	; 0x34
 80107be:	bfde      	ittt	le
 80107c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80107c4:	f04f 33ff 	movle.w	r3, #4294967295
 80107c8:	fa03 f202 	lslle.w	r2, r3, r2
 80107cc:	f04f 0a00 	mov.w	sl, #0
 80107d0:	bfcc      	ite	gt
 80107d2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80107d6:	ea02 0b01 	andle.w	fp, r2, r1
 80107da:	2200      	movs	r2, #0
 80107dc:	2300      	movs	r3, #0
 80107de:	4650      	mov	r0, sl
 80107e0:	4659      	mov	r1, fp
 80107e2:	f7f0 f981 	bl	8000ae8 <__aeabi_dcmpeq>
 80107e6:	2800      	cmp	r0, #0
 80107e8:	d1a2      	bne.n	8010730 <_strtod_l+0x578>
 80107ea:	9b07      	ldr	r3, [sp, #28]
 80107ec:	9300      	str	r3, [sp, #0]
 80107ee:	9908      	ldr	r1, [sp, #32]
 80107f0:	462b      	mov	r3, r5
 80107f2:	463a      	mov	r2, r7
 80107f4:	4620      	mov	r0, r4
 80107f6:	f001 fe1f 	bl	8012438 <__s2b>
 80107fa:	9007      	str	r0, [sp, #28]
 80107fc:	2800      	cmp	r0, #0
 80107fe:	f43f af1f 	beq.w	8010640 <_strtod_l+0x488>
 8010802:	9b05      	ldr	r3, [sp, #20]
 8010804:	1b9e      	subs	r6, r3, r6
 8010806:	9b06      	ldr	r3, [sp, #24]
 8010808:	2b00      	cmp	r3, #0
 801080a:	bfb4      	ite	lt
 801080c:	4633      	movlt	r3, r6
 801080e:	2300      	movge	r3, #0
 8010810:	930c      	str	r3, [sp, #48]	; 0x30
 8010812:	9b06      	ldr	r3, [sp, #24]
 8010814:	2500      	movs	r5, #0
 8010816:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801081a:	9312      	str	r3, [sp, #72]	; 0x48
 801081c:	462e      	mov	r6, r5
 801081e:	9b07      	ldr	r3, [sp, #28]
 8010820:	4620      	mov	r0, r4
 8010822:	6859      	ldr	r1, [r3, #4]
 8010824:	f001 fd60 	bl	80122e8 <_Balloc>
 8010828:	9005      	str	r0, [sp, #20]
 801082a:	2800      	cmp	r0, #0
 801082c:	f43f af0c 	beq.w	8010648 <_strtod_l+0x490>
 8010830:	9b07      	ldr	r3, [sp, #28]
 8010832:	691a      	ldr	r2, [r3, #16]
 8010834:	3202      	adds	r2, #2
 8010836:	f103 010c 	add.w	r1, r3, #12
 801083a:	0092      	lsls	r2, r2, #2
 801083c:	300c      	adds	r0, #12
 801083e:	f7fe fde9 	bl	800f414 <memcpy>
 8010842:	ec4b ab10 	vmov	d0, sl, fp
 8010846:	aa1a      	add	r2, sp, #104	; 0x68
 8010848:	a919      	add	r1, sp, #100	; 0x64
 801084a:	4620      	mov	r0, r4
 801084c:	f002 f93a 	bl	8012ac4 <__d2b>
 8010850:	ec4b ab18 	vmov	d8, sl, fp
 8010854:	9018      	str	r0, [sp, #96]	; 0x60
 8010856:	2800      	cmp	r0, #0
 8010858:	f43f aef6 	beq.w	8010648 <_strtod_l+0x490>
 801085c:	2101      	movs	r1, #1
 801085e:	4620      	mov	r0, r4
 8010860:	f001 fe84 	bl	801256c <__i2b>
 8010864:	4606      	mov	r6, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	f43f aeee 	beq.w	8010648 <_strtod_l+0x490>
 801086c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801086e:	9904      	ldr	r1, [sp, #16]
 8010870:	2b00      	cmp	r3, #0
 8010872:	bfab      	itete	ge
 8010874:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8010876:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8010878:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801087a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 801087e:	bfac      	ite	ge
 8010880:	eb03 0902 	addge.w	r9, r3, r2
 8010884:	1ad7      	sublt	r7, r2, r3
 8010886:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8010888:	eba3 0801 	sub.w	r8, r3, r1
 801088c:	4490      	add	r8, r2
 801088e:	4ba1      	ldr	r3, [pc, #644]	; (8010b14 <_strtod_l+0x95c>)
 8010890:	f108 38ff 	add.w	r8, r8, #4294967295
 8010894:	4598      	cmp	r8, r3
 8010896:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801089a:	f280 80c7 	bge.w	8010a2c <_strtod_l+0x874>
 801089e:	eba3 0308 	sub.w	r3, r3, r8
 80108a2:	2b1f      	cmp	r3, #31
 80108a4:	eba2 0203 	sub.w	r2, r2, r3
 80108a8:	f04f 0101 	mov.w	r1, #1
 80108ac:	f300 80b1 	bgt.w	8010a12 <_strtod_l+0x85a>
 80108b0:	fa01 f303 	lsl.w	r3, r1, r3
 80108b4:	930d      	str	r3, [sp, #52]	; 0x34
 80108b6:	2300      	movs	r3, #0
 80108b8:	9308      	str	r3, [sp, #32]
 80108ba:	eb09 0802 	add.w	r8, r9, r2
 80108be:	9b04      	ldr	r3, [sp, #16]
 80108c0:	45c1      	cmp	r9, r8
 80108c2:	4417      	add	r7, r2
 80108c4:	441f      	add	r7, r3
 80108c6:	464b      	mov	r3, r9
 80108c8:	bfa8      	it	ge
 80108ca:	4643      	movge	r3, r8
 80108cc:	42bb      	cmp	r3, r7
 80108ce:	bfa8      	it	ge
 80108d0:	463b      	movge	r3, r7
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	bfc2      	ittt	gt
 80108d6:	eba8 0803 	subgt.w	r8, r8, r3
 80108da:	1aff      	subgt	r7, r7, r3
 80108dc:	eba9 0903 	subgt.w	r9, r9, r3
 80108e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	dd17      	ble.n	8010916 <_strtod_l+0x75e>
 80108e6:	4631      	mov	r1, r6
 80108e8:	461a      	mov	r2, r3
 80108ea:	4620      	mov	r0, r4
 80108ec:	f001 fefe 	bl	80126ec <__pow5mult>
 80108f0:	4606      	mov	r6, r0
 80108f2:	2800      	cmp	r0, #0
 80108f4:	f43f aea8 	beq.w	8010648 <_strtod_l+0x490>
 80108f8:	4601      	mov	r1, r0
 80108fa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80108fc:	4620      	mov	r0, r4
 80108fe:	f001 fe4b 	bl	8012598 <__multiply>
 8010902:	900b      	str	r0, [sp, #44]	; 0x2c
 8010904:	2800      	cmp	r0, #0
 8010906:	f43f ae9f 	beq.w	8010648 <_strtod_l+0x490>
 801090a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801090c:	4620      	mov	r0, r4
 801090e:	f001 fd2b 	bl	8012368 <_Bfree>
 8010912:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010914:	9318      	str	r3, [sp, #96]	; 0x60
 8010916:	f1b8 0f00 	cmp.w	r8, #0
 801091a:	f300 808c 	bgt.w	8010a36 <_strtod_l+0x87e>
 801091e:	9b06      	ldr	r3, [sp, #24]
 8010920:	2b00      	cmp	r3, #0
 8010922:	dd08      	ble.n	8010936 <_strtod_l+0x77e>
 8010924:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8010926:	9905      	ldr	r1, [sp, #20]
 8010928:	4620      	mov	r0, r4
 801092a:	f001 fedf 	bl	80126ec <__pow5mult>
 801092e:	9005      	str	r0, [sp, #20]
 8010930:	2800      	cmp	r0, #0
 8010932:	f43f ae89 	beq.w	8010648 <_strtod_l+0x490>
 8010936:	2f00      	cmp	r7, #0
 8010938:	dd08      	ble.n	801094c <_strtod_l+0x794>
 801093a:	9905      	ldr	r1, [sp, #20]
 801093c:	463a      	mov	r2, r7
 801093e:	4620      	mov	r0, r4
 8010940:	f001 ff2e 	bl	80127a0 <__lshift>
 8010944:	9005      	str	r0, [sp, #20]
 8010946:	2800      	cmp	r0, #0
 8010948:	f43f ae7e 	beq.w	8010648 <_strtod_l+0x490>
 801094c:	f1b9 0f00 	cmp.w	r9, #0
 8010950:	dd08      	ble.n	8010964 <_strtod_l+0x7ac>
 8010952:	4631      	mov	r1, r6
 8010954:	464a      	mov	r2, r9
 8010956:	4620      	mov	r0, r4
 8010958:	f001 ff22 	bl	80127a0 <__lshift>
 801095c:	4606      	mov	r6, r0
 801095e:	2800      	cmp	r0, #0
 8010960:	f43f ae72 	beq.w	8010648 <_strtod_l+0x490>
 8010964:	9a05      	ldr	r2, [sp, #20]
 8010966:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010968:	4620      	mov	r0, r4
 801096a:	f001 ffa5 	bl	80128b8 <__mdiff>
 801096e:	4605      	mov	r5, r0
 8010970:	2800      	cmp	r0, #0
 8010972:	f43f ae69 	beq.w	8010648 <_strtod_l+0x490>
 8010976:	68c3      	ldr	r3, [r0, #12]
 8010978:	930b      	str	r3, [sp, #44]	; 0x2c
 801097a:	2300      	movs	r3, #0
 801097c:	60c3      	str	r3, [r0, #12]
 801097e:	4631      	mov	r1, r6
 8010980:	f001 ff7e 	bl	8012880 <__mcmp>
 8010984:	2800      	cmp	r0, #0
 8010986:	da60      	bge.n	8010a4a <_strtod_l+0x892>
 8010988:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801098a:	ea53 030a 	orrs.w	r3, r3, sl
 801098e:	f040 8082 	bne.w	8010a96 <_strtod_l+0x8de>
 8010992:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010996:	2b00      	cmp	r3, #0
 8010998:	d17d      	bne.n	8010a96 <_strtod_l+0x8de>
 801099a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801099e:	0d1b      	lsrs	r3, r3, #20
 80109a0:	051b      	lsls	r3, r3, #20
 80109a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80109a6:	d976      	bls.n	8010a96 <_strtod_l+0x8de>
 80109a8:	696b      	ldr	r3, [r5, #20]
 80109aa:	b913      	cbnz	r3, 80109b2 <_strtod_l+0x7fa>
 80109ac:	692b      	ldr	r3, [r5, #16]
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	dd71      	ble.n	8010a96 <_strtod_l+0x8de>
 80109b2:	4629      	mov	r1, r5
 80109b4:	2201      	movs	r2, #1
 80109b6:	4620      	mov	r0, r4
 80109b8:	f001 fef2 	bl	80127a0 <__lshift>
 80109bc:	4631      	mov	r1, r6
 80109be:	4605      	mov	r5, r0
 80109c0:	f001 ff5e 	bl	8012880 <__mcmp>
 80109c4:	2800      	cmp	r0, #0
 80109c6:	dd66      	ble.n	8010a96 <_strtod_l+0x8de>
 80109c8:	9904      	ldr	r1, [sp, #16]
 80109ca:	4a53      	ldr	r2, [pc, #332]	; (8010b18 <_strtod_l+0x960>)
 80109cc:	465b      	mov	r3, fp
 80109ce:	2900      	cmp	r1, #0
 80109d0:	f000 8081 	beq.w	8010ad6 <_strtod_l+0x91e>
 80109d4:	ea02 010b 	and.w	r1, r2, fp
 80109d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80109dc:	dc7b      	bgt.n	8010ad6 <_strtod_l+0x91e>
 80109de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80109e2:	f77f aea9 	ble.w	8010738 <_strtod_l+0x580>
 80109e6:	4b4d      	ldr	r3, [pc, #308]	; (8010b1c <_strtod_l+0x964>)
 80109e8:	4650      	mov	r0, sl
 80109ea:	4659      	mov	r1, fp
 80109ec:	2200      	movs	r2, #0
 80109ee:	f7ef fe13 	bl	8000618 <__aeabi_dmul>
 80109f2:	460b      	mov	r3, r1
 80109f4:	4303      	orrs	r3, r0
 80109f6:	bf08      	it	eq
 80109f8:	2322      	moveq	r3, #34	; 0x22
 80109fa:	4682      	mov	sl, r0
 80109fc:	468b      	mov	fp, r1
 80109fe:	bf08      	it	eq
 8010a00:	6023      	streq	r3, [r4, #0]
 8010a02:	e62b      	b.n	801065c <_strtod_l+0x4a4>
 8010a04:	f04f 32ff 	mov.w	r2, #4294967295
 8010a08:	fa02 f303 	lsl.w	r3, r2, r3
 8010a0c:	ea03 0a0a 	and.w	sl, r3, sl
 8010a10:	e6e3      	b.n	80107da <_strtod_l+0x622>
 8010a12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8010a16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8010a1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8010a1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8010a22:	fa01 f308 	lsl.w	r3, r1, r8
 8010a26:	9308      	str	r3, [sp, #32]
 8010a28:	910d      	str	r1, [sp, #52]	; 0x34
 8010a2a:	e746      	b.n	80108ba <_strtod_l+0x702>
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	9308      	str	r3, [sp, #32]
 8010a30:	2301      	movs	r3, #1
 8010a32:	930d      	str	r3, [sp, #52]	; 0x34
 8010a34:	e741      	b.n	80108ba <_strtod_l+0x702>
 8010a36:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010a38:	4642      	mov	r2, r8
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	f001 feb0 	bl	80127a0 <__lshift>
 8010a40:	9018      	str	r0, [sp, #96]	; 0x60
 8010a42:	2800      	cmp	r0, #0
 8010a44:	f47f af6b 	bne.w	801091e <_strtod_l+0x766>
 8010a48:	e5fe      	b.n	8010648 <_strtod_l+0x490>
 8010a4a:	465f      	mov	r7, fp
 8010a4c:	d16e      	bne.n	8010b2c <_strtod_l+0x974>
 8010a4e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010a50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010a54:	b342      	cbz	r2, 8010aa8 <_strtod_l+0x8f0>
 8010a56:	4a32      	ldr	r2, [pc, #200]	; (8010b20 <_strtod_l+0x968>)
 8010a58:	4293      	cmp	r3, r2
 8010a5a:	d128      	bne.n	8010aae <_strtod_l+0x8f6>
 8010a5c:	9b04      	ldr	r3, [sp, #16]
 8010a5e:	4651      	mov	r1, sl
 8010a60:	b1eb      	cbz	r3, 8010a9e <_strtod_l+0x8e6>
 8010a62:	4b2d      	ldr	r3, [pc, #180]	; (8010b18 <_strtod_l+0x960>)
 8010a64:	403b      	ands	r3, r7
 8010a66:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6e:	d819      	bhi.n	8010aa4 <_strtod_l+0x8ec>
 8010a70:	0d1b      	lsrs	r3, r3, #20
 8010a72:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010a76:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7a:	4299      	cmp	r1, r3
 8010a7c:	d117      	bne.n	8010aae <_strtod_l+0x8f6>
 8010a7e:	4b29      	ldr	r3, [pc, #164]	; (8010b24 <_strtod_l+0x96c>)
 8010a80:	429f      	cmp	r7, r3
 8010a82:	d102      	bne.n	8010a8a <_strtod_l+0x8d2>
 8010a84:	3101      	adds	r1, #1
 8010a86:	f43f addf 	beq.w	8010648 <_strtod_l+0x490>
 8010a8a:	4b23      	ldr	r3, [pc, #140]	; (8010b18 <_strtod_l+0x960>)
 8010a8c:	403b      	ands	r3, r7
 8010a8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8010a92:	f04f 0a00 	mov.w	sl, #0
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1a4      	bne.n	80109e6 <_strtod_l+0x82e>
 8010a9c:	e5de      	b.n	801065c <_strtod_l+0x4a4>
 8010a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8010aa2:	e7ea      	b.n	8010a7a <_strtod_l+0x8c2>
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	e7e8      	b.n	8010a7a <_strtod_l+0x8c2>
 8010aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8010aac:	d08c      	beq.n	80109c8 <_strtod_l+0x810>
 8010aae:	9b08      	ldr	r3, [sp, #32]
 8010ab0:	b1db      	cbz	r3, 8010aea <_strtod_l+0x932>
 8010ab2:	423b      	tst	r3, r7
 8010ab4:	d0ef      	beq.n	8010a96 <_strtod_l+0x8de>
 8010ab6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010ab8:	9a04      	ldr	r2, [sp, #16]
 8010aba:	4650      	mov	r0, sl
 8010abc:	4659      	mov	r1, fp
 8010abe:	b1c3      	cbz	r3, 8010af2 <_strtod_l+0x93a>
 8010ac0:	f7ff fb5e 	bl	8010180 <sulp>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	460b      	mov	r3, r1
 8010ac8:	ec51 0b18 	vmov	r0, r1, d8
 8010acc:	f7ef fbee 	bl	80002ac <__adddf3>
 8010ad0:	4682      	mov	sl, r0
 8010ad2:	468b      	mov	fp, r1
 8010ad4:	e7df      	b.n	8010a96 <_strtod_l+0x8de>
 8010ad6:	4013      	ands	r3, r2
 8010ad8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010adc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010ae0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8010ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8010ae8:	e7d5      	b.n	8010a96 <_strtod_l+0x8de>
 8010aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010aec:	ea13 0f0a 	tst.w	r3, sl
 8010af0:	e7e0      	b.n	8010ab4 <_strtod_l+0x8fc>
 8010af2:	f7ff fb45 	bl	8010180 <sulp>
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	ec51 0b18 	vmov	r0, r1, d8
 8010afe:	f7ef fbd3 	bl	80002a8 <__aeabi_dsub>
 8010b02:	2200      	movs	r2, #0
 8010b04:	2300      	movs	r3, #0
 8010b06:	4682      	mov	sl, r0
 8010b08:	468b      	mov	fp, r1
 8010b0a:	f7ef ffed 	bl	8000ae8 <__aeabi_dcmpeq>
 8010b0e:	2800      	cmp	r0, #0
 8010b10:	d0c1      	beq.n	8010a96 <_strtod_l+0x8de>
 8010b12:	e611      	b.n	8010738 <_strtod_l+0x580>
 8010b14:	fffffc02 	.word	0xfffffc02
 8010b18:	7ff00000 	.word	0x7ff00000
 8010b1c:	39500000 	.word	0x39500000
 8010b20:	000fffff 	.word	0x000fffff
 8010b24:	7fefffff 	.word	0x7fefffff
 8010b28:	08015990 	.word	0x08015990
 8010b2c:	4631      	mov	r1, r6
 8010b2e:	4628      	mov	r0, r5
 8010b30:	f002 f824 	bl	8012b7c <__ratio>
 8010b34:	ec59 8b10 	vmov	r8, r9, d0
 8010b38:	ee10 0a10 	vmov	r0, s0
 8010b3c:	2200      	movs	r2, #0
 8010b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010b42:	4649      	mov	r1, r9
 8010b44:	f7ef ffe4 	bl	8000b10 <__aeabi_dcmple>
 8010b48:	2800      	cmp	r0, #0
 8010b4a:	d07a      	beq.n	8010c42 <_strtod_l+0xa8a>
 8010b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d04a      	beq.n	8010be8 <_strtod_l+0xa30>
 8010b52:	4b95      	ldr	r3, [pc, #596]	; (8010da8 <_strtod_l+0xbf0>)
 8010b54:	2200      	movs	r2, #0
 8010b56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010b5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8010da8 <_strtod_l+0xbf0>
 8010b5e:	f04f 0800 	mov.w	r8, #0
 8010b62:	4b92      	ldr	r3, [pc, #584]	; (8010dac <_strtod_l+0xbf4>)
 8010b64:	403b      	ands	r3, r7
 8010b66:	930d      	str	r3, [sp, #52]	; 0x34
 8010b68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010b6a:	4b91      	ldr	r3, [pc, #580]	; (8010db0 <_strtod_l+0xbf8>)
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	f040 80b0 	bne.w	8010cd2 <_strtod_l+0xb1a>
 8010b72:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b76:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8010b7a:	ec4b ab10 	vmov	d0, sl, fp
 8010b7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010b82:	f001 ff23 	bl	80129cc <__ulp>
 8010b86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010b8a:	ec53 2b10 	vmov	r2, r3, d0
 8010b8e:	f7ef fd43 	bl	8000618 <__aeabi_dmul>
 8010b92:	4652      	mov	r2, sl
 8010b94:	465b      	mov	r3, fp
 8010b96:	f7ef fb89 	bl	80002ac <__adddf3>
 8010b9a:	460b      	mov	r3, r1
 8010b9c:	4983      	ldr	r1, [pc, #524]	; (8010dac <_strtod_l+0xbf4>)
 8010b9e:	4a85      	ldr	r2, [pc, #532]	; (8010db4 <_strtod_l+0xbfc>)
 8010ba0:	4019      	ands	r1, r3
 8010ba2:	4291      	cmp	r1, r2
 8010ba4:	4682      	mov	sl, r0
 8010ba6:	d960      	bls.n	8010c6a <_strtod_l+0xab2>
 8010ba8:	ee18 3a90 	vmov	r3, s17
 8010bac:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8010bb0:	4293      	cmp	r3, r2
 8010bb2:	d104      	bne.n	8010bbe <_strtod_l+0xa06>
 8010bb4:	ee18 3a10 	vmov	r3, s16
 8010bb8:	3301      	adds	r3, #1
 8010bba:	f43f ad45 	beq.w	8010648 <_strtod_l+0x490>
 8010bbe:	f8df b200 	ldr.w	fp, [pc, #512]	; 8010dc0 <_strtod_l+0xc08>
 8010bc2:	f04f 3aff 	mov.w	sl, #4294967295
 8010bc6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8010bc8:	4620      	mov	r0, r4
 8010bca:	f001 fbcd 	bl	8012368 <_Bfree>
 8010bce:	9905      	ldr	r1, [sp, #20]
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	f001 fbc9 	bl	8012368 <_Bfree>
 8010bd6:	4631      	mov	r1, r6
 8010bd8:	4620      	mov	r0, r4
 8010bda:	f001 fbc5 	bl	8012368 <_Bfree>
 8010bde:	4629      	mov	r1, r5
 8010be0:	4620      	mov	r0, r4
 8010be2:	f001 fbc1 	bl	8012368 <_Bfree>
 8010be6:	e61a      	b.n	801081e <_strtod_l+0x666>
 8010be8:	f1ba 0f00 	cmp.w	sl, #0
 8010bec:	d11b      	bne.n	8010c26 <_strtod_l+0xa6e>
 8010bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010bf2:	b9f3      	cbnz	r3, 8010c32 <_strtod_l+0xa7a>
 8010bf4:	4b6c      	ldr	r3, [pc, #432]	; (8010da8 <_strtod_l+0xbf0>)
 8010bf6:	2200      	movs	r2, #0
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	4649      	mov	r1, r9
 8010bfc:	f7ef ff7e 	bl	8000afc <__aeabi_dcmplt>
 8010c00:	b9d0      	cbnz	r0, 8010c38 <_strtod_l+0xa80>
 8010c02:	4640      	mov	r0, r8
 8010c04:	4649      	mov	r1, r9
 8010c06:	4b6c      	ldr	r3, [pc, #432]	; (8010db8 <_strtod_l+0xc00>)
 8010c08:	2200      	movs	r2, #0
 8010c0a:	f7ef fd05 	bl	8000618 <__aeabi_dmul>
 8010c0e:	4680      	mov	r8, r0
 8010c10:	4689      	mov	r9, r1
 8010c12:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c16:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8010c1a:	9315      	str	r3, [sp, #84]	; 0x54
 8010c1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010c20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010c24:	e79d      	b.n	8010b62 <_strtod_l+0x9aa>
 8010c26:	f1ba 0f01 	cmp.w	sl, #1
 8010c2a:	d102      	bne.n	8010c32 <_strtod_l+0xa7a>
 8010c2c:	2f00      	cmp	r7, #0
 8010c2e:	f43f ad83 	beq.w	8010738 <_strtod_l+0x580>
 8010c32:	4b62      	ldr	r3, [pc, #392]	; (8010dbc <_strtod_l+0xc04>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	e78e      	b.n	8010b56 <_strtod_l+0x99e>
 8010c38:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8010db8 <_strtod_l+0xc00>
 8010c3c:	f04f 0800 	mov.w	r8, #0
 8010c40:	e7e7      	b.n	8010c12 <_strtod_l+0xa5a>
 8010c42:	4b5d      	ldr	r3, [pc, #372]	; (8010db8 <_strtod_l+0xc00>)
 8010c44:	4640      	mov	r0, r8
 8010c46:	4649      	mov	r1, r9
 8010c48:	2200      	movs	r2, #0
 8010c4a:	f7ef fce5 	bl	8000618 <__aeabi_dmul>
 8010c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010c50:	4680      	mov	r8, r0
 8010c52:	4689      	mov	r9, r1
 8010c54:	b933      	cbnz	r3, 8010c64 <_strtod_l+0xaac>
 8010c56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c5a:	900e      	str	r0, [sp, #56]	; 0x38
 8010c5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8010c5e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8010c62:	e7dd      	b.n	8010c20 <_strtod_l+0xa68>
 8010c64:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8010c68:	e7f9      	b.n	8010c5e <_strtod_l+0xaa6>
 8010c6a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8010c6e:	9b04      	ldr	r3, [sp, #16]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1a8      	bne.n	8010bc6 <_strtod_l+0xa0e>
 8010c74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010c78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010c7a:	0d1b      	lsrs	r3, r3, #20
 8010c7c:	051b      	lsls	r3, r3, #20
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d1a1      	bne.n	8010bc6 <_strtod_l+0xa0e>
 8010c82:	4640      	mov	r0, r8
 8010c84:	4649      	mov	r1, r9
 8010c86:	f7f0 f827 	bl	8000cd8 <__aeabi_d2lz>
 8010c8a:	f7ef fc97 	bl	80005bc <__aeabi_l2d>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	460b      	mov	r3, r1
 8010c92:	4640      	mov	r0, r8
 8010c94:	4649      	mov	r1, r9
 8010c96:	f7ef fb07 	bl	80002a8 <__aeabi_dsub>
 8010c9a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010ca0:	ea43 030a 	orr.w	r3, r3, sl
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	4680      	mov	r8, r0
 8010ca8:	4689      	mov	r9, r1
 8010caa:	d055      	beq.n	8010d58 <_strtod_l+0xba0>
 8010cac:	a336      	add	r3, pc, #216	; (adr r3, 8010d88 <_strtod_l+0xbd0>)
 8010cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb2:	f7ef ff23 	bl	8000afc <__aeabi_dcmplt>
 8010cb6:	2800      	cmp	r0, #0
 8010cb8:	f47f acd0 	bne.w	801065c <_strtod_l+0x4a4>
 8010cbc:	a334      	add	r3, pc, #208	; (adr r3, 8010d90 <_strtod_l+0xbd8>)
 8010cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc2:	4640      	mov	r0, r8
 8010cc4:	4649      	mov	r1, r9
 8010cc6:	f7ef ff37 	bl	8000b38 <__aeabi_dcmpgt>
 8010cca:	2800      	cmp	r0, #0
 8010ccc:	f43f af7b 	beq.w	8010bc6 <_strtod_l+0xa0e>
 8010cd0:	e4c4      	b.n	801065c <_strtod_l+0x4a4>
 8010cd2:	9b04      	ldr	r3, [sp, #16]
 8010cd4:	b333      	cbz	r3, 8010d24 <_strtod_l+0xb6c>
 8010cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010cd8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8010cdc:	d822      	bhi.n	8010d24 <_strtod_l+0xb6c>
 8010cde:	a32e      	add	r3, pc, #184	; (adr r3, 8010d98 <_strtod_l+0xbe0>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	4640      	mov	r0, r8
 8010ce6:	4649      	mov	r1, r9
 8010ce8:	f7ef ff12 	bl	8000b10 <__aeabi_dcmple>
 8010cec:	b1a0      	cbz	r0, 8010d18 <_strtod_l+0xb60>
 8010cee:	4649      	mov	r1, r9
 8010cf0:	4640      	mov	r0, r8
 8010cf2:	f7ef ff69 	bl	8000bc8 <__aeabi_d2uiz>
 8010cf6:	2801      	cmp	r0, #1
 8010cf8:	bf38      	it	cc
 8010cfa:	2001      	movcc	r0, #1
 8010cfc:	f7ef fc12 	bl	8000524 <__aeabi_ui2d>
 8010d00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010d02:	4680      	mov	r8, r0
 8010d04:	4689      	mov	r9, r1
 8010d06:	bb23      	cbnz	r3, 8010d52 <_strtod_l+0xb9a>
 8010d08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d0c:	9010      	str	r0, [sp, #64]	; 0x40
 8010d0e:	9311      	str	r3, [sp, #68]	; 0x44
 8010d10:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8010d14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010d1c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8010d20:	1a9b      	subs	r3, r3, r2
 8010d22:	9309      	str	r3, [sp, #36]	; 0x24
 8010d24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d28:	eeb0 0a48 	vmov.f32	s0, s16
 8010d2c:	eef0 0a68 	vmov.f32	s1, s17
 8010d30:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010d34:	f001 fe4a 	bl	80129cc <__ulp>
 8010d38:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010d3c:	ec53 2b10 	vmov	r2, r3, d0
 8010d40:	f7ef fc6a 	bl	8000618 <__aeabi_dmul>
 8010d44:	ec53 2b18 	vmov	r2, r3, d8
 8010d48:	f7ef fab0 	bl	80002ac <__adddf3>
 8010d4c:	4682      	mov	sl, r0
 8010d4e:	468b      	mov	fp, r1
 8010d50:	e78d      	b.n	8010c6e <_strtod_l+0xab6>
 8010d52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8010d56:	e7db      	b.n	8010d10 <_strtod_l+0xb58>
 8010d58:	a311      	add	r3, pc, #68	; (adr r3, 8010da0 <_strtod_l+0xbe8>)
 8010d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d5e:	f7ef fecd 	bl	8000afc <__aeabi_dcmplt>
 8010d62:	e7b2      	b.n	8010cca <_strtod_l+0xb12>
 8010d64:	2300      	movs	r3, #0
 8010d66:	930a      	str	r3, [sp, #40]	; 0x28
 8010d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010d6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d6c:	6013      	str	r3, [r2, #0]
 8010d6e:	f7ff ba6b 	b.w	8010248 <_strtod_l+0x90>
 8010d72:	2a65      	cmp	r2, #101	; 0x65
 8010d74:	f43f ab5f 	beq.w	8010436 <_strtod_l+0x27e>
 8010d78:	2a45      	cmp	r2, #69	; 0x45
 8010d7a:	f43f ab5c 	beq.w	8010436 <_strtod_l+0x27e>
 8010d7e:	2301      	movs	r3, #1
 8010d80:	f7ff bb94 	b.w	80104ac <_strtod_l+0x2f4>
 8010d84:	f3af 8000 	nop.w
 8010d88:	94a03595 	.word	0x94a03595
 8010d8c:	3fdfffff 	.word	0x3fdfffff
 8010d90:	35afe535 	.word	0x35afe535
 8010d94:	3fe00000 	.word	0x3fe00000
 8010d98:	ffc00000 	.word	0xffc00000
 8010d9c:	41dfffff 	.word	0x41dfffff
 8010da0:	94a03595 	.word	0x94a03595
 8010da4:	3fcfffff 	.word	0x3fcfffff
 8010da8:	3ff00000 	.word	0x3ff00000
 8010dac:	7ff00000 	.word	0x7ff00000
 8010db0:	7fe00000 	.word	0x7fe00000
 8010db4:	7c9fffff 	.word	0x7c9fffff
 8010db8:	3fe00000 	.word	0x3fe00000
 8010dbc:	bff00000 	.word	0xbff00000
 8010dc0:	7fefffff 	.word	0x7fefffff

08010dc4 <_strtod_r>:
 8010dc4:	4b01      	ldr	r3, [pc, #4]	; (8010dcc <_strtod_r+0x8>)
 8010dc6:	f7ff b9f7 	b.w	80101b8 <_strtod_l>
 8010dca:	bf00      	nop
 8010dcc:	200001e4 	.word	0x200001e4

08010dd0 <_strtol_l.constprop.0>:
 8010dd0:	2b01      	cmp	r3, #1
 8010dd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010dd6:	d001      	beq.n	8010ddc <_strtol_l.constprop.0+0xc>
 8010dd8:	2b24      	cmp	r3, #36	; 0x24
 8010dda:	d906      	bls.n	8010dea <_strtol_l.constprop.0+0x1a>
 8010ddc:	f7fe faf0 	bl	800f3c0 <__errno>
 8010de0:	2316      	movs	r3, #22
 8010de2:	6003      	str	r3, [r0, #0]
 8010de4:	2000      	movs	r0, #0
 8010de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8010ed0 <_strtol_l.constprop.0+0x100>
 8010dee:	460d      	mov	r5, r1
 8010df0:	462e      	mov	r6, r5
 8010df2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010df6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8010dfa:	f017 0708 	ands.w	r7, r7, #8
 8010dfe:	d1f7      	bne.n	8010df0 <_strtol_l.constprop.0+0x20>
 8010e00:	2c2d      	cmp	r4, #45	; 0x2d
 8010e02:	d132      	bne.n	8010e6a <_strtol_l.constprop.0+0x9a>
 8010e04:	782c      	ldrb	r4, [r5, #0]
 8010e06:	2701      	movs	r7, #1
 8010e08:	1cb5      	adds	r5, r6, #2
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d05b      	beq.n	8010ec6 <_strtol_l.constprop.0+0xf6>
 8010e0e:	2b10      	cmp	r3, #16
 8010e10:	d109      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010e12:	2c30      	cmp	r4, #48	; 0x30
 8010e14:	d107      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010e16:	782c      	ldrb	r4, [r5, #0]
 8010e18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8010e1c:	2c58      	cmp	r4, #88	; 0x58
 8010e1e:	d14d      	bne.n	8010ebc <_strtol_l.constprop.0+0xec>
 8010e20:	786c      	ldrb	r4, [r5, #1]
 8010e22:	2310      	movs	r3, #16
 8010e24:	3502      	adds	r5, #2
 8010e26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8010e2a:	f108 38ff 	add.w	r8, r8, #4294967295
 8010e2e:	f04f 0c00 	mov.w	ip, #0
 8010e32:	fbb8 f9f3 	udiv	r9, r8, r3
 8010e36:	4666      	mov	r6, ip
 8010e38:	fb03 8a19 	mls	sl, r3, r9, r8
 8010e3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8010e40:	f1be 0f09 	cmp.w	lr, #9
 8010e44:	d816      	bhi.n	8010e74 <_strtol_l.constprop.0+0xa4>
 8010e46:	4674      	mov	r4, lr
 8010e48:	42a3      	cmp	r3, r4
 8010e4a:	dd24      	ble.n	8010e96 <_strtol_l.constprop.0+0xc6>
 8010e4c:	f1bc 0f00 	cmp.w	ip, #0
 8010e50:	db1e      	blt.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e52:	45b1      	cmp	r9, r6
 8010e54:	d31c      	bcc.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e56:	d101      	bne.n	8010e5c <_strtol_l.constprop.0+0x8c>
 8010e58:	45a2      	cmp	sl, r4
 8010e5a:	db19      	blt.n	8010e90 <_strtol_l.constprop.0+0xc0>
 8010e5c:	fb06 4603 	mla	r6, r6, r3, r4
 8010e60:	f04f 0c01 	mov.w	ip, #1
 8010e64:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010e68:	e7e8      	b.n	8010e3c <_strtol_l.constprop.0+0x6c>
 8010e6a:	2c2b      	cmp	r4, #43	; 0x2b
 8010e6c:	bf04      	itt	eq
 8010e6e:	782c      	ldrbeq	r4, [r5, #0]
 8010e70:	1cb5      	addeq	r5, r6, #2
 8010e72:	e7ca      	b.n	8010e0a <_strtol_l.constprop.0+0x3a>
 8010e74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8010e78:	f1be 0f19 	cmp.w	lr, #25
 8010e7c:	d801      	bhi.n	8010e82 <_strtol_l.constprop.0+0xb2>
 8010e7e:	3c37      	subs	r4, #55	; 0x37
 8010e80:	e7e2      	b.n	8010e48 <_strtol_l.constprop.0+0x78>
 8010e82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8010e86:	f1be 0f19 	cmp.w	lr, #25
 8010e8a:	d804      	bhi.n	8010e96 <_strtol_l.constprop.0+0xc6>
 8010e8c:	3c57      	subs	r4, #87	; 0x57
 8010e8e:	e7db      	b.n	8010e48 <_strtol_l.constprop.0+0x78>
 8010e90:	f04f 3cff 	mov.w	ip, #4294967295
 8010e94:	e7e6      	b.n	8010e64 <_strtol_l.constprop.0+0x94>
 8010e96:	f1bc 0f00 	cmp.w	ip, #0
 8010e9a:	da05      	bge.n	8010ea8 <_strtol_l.constprop.0+0xd8>
 8010e9c:	2322      	movs	r3, #34	; 0x22
 8010e9e:	6003      	str	r3, [r0, #0]
 8010ea0:	4646      	mov	r6, r8
 8010ea2:	b942      	cbnz	r2, 8010eb6 <_strtol_l.constprop.0+0xe6>
 8010ea4:	4630      	mov	r0, r6
 8010ea6:	e79e      	b.n	8010de6 <_strtol_l.constprop.0+0x16>
 8010ea8:	b107      	cbz	r7, 8010eac <_strtol_l.constprop.0+0xdc>
 8010eaa:	4276      	negs	r6, r6
 8010eac:	2a00      	cmp	r2, #0
 8010eae:	d0f9      	beq.n	8010ea4 <_strtol_l.constprop.0+0xd4>
 8010eb0:	f1bc 0f00 	cmp.w	ip, #0
 8010eb4:	d000      	beq.n	8010eb8 <_strtol_l.constprop.0+0xe8>
 8010eb6:	1e69      	subs	r1, r5, #1
 8010eb8:	6011      	str	r1, [r2, #0]
 8010eba:	e7f3      	b.n	8010ea4 <_strtol_l.constprop.0+0xd4>
 8010ebc:	2430      	movs	r4, #48	; 0x30
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d1b1      	bne.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ec2:	2308      	movs	r3, #8
 8010ec4:	e7af      	b.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ec6:	2c30      	cmp	r4, #48	; 0x30
 8010ec8:	d0a5      	beq.n	8010e16 <_strtol_l.constprop.0+0x46>
 8010eca:	230a      	movs	r3, #10
 8010ecc:	e7ab      	b.n	8010e26 <_strtol_l.constprop.0+0x56>
 8010ece:	bf00      	nop
 8010ed0:	080159b9 	.word	0x080159b9

08010ed4 <_strtol_r>:
 8010ed4:	f7ff bf7c 	b.w	8010dd0 <_strtol_l.constprop.0>

08010ed8 <quorem>:
 8010ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010edc:	6903      	ldr	r3, [r0, #16]
 8010ede:	690c      	ldr	r4, [r1, #16]
 8010ee0:	42a3      	cmp	r3, r4
 8010ee2:	4607      	mov	r7, r0
 8010ee4:	f2c0 8081 	blt.w	8010fea <quorem+0x112>
 8010ee8:	3c01      	subs	r4, #1
 8010eea:	f101 0814 	add.w	r8, r1, #20
 8010eee:	f100 0514 	add.w	r5, r0, #20
 8010ef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010ef6:	9301      	str	r3, [sp, #4]
 8010ef8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010efc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010f00:	3301      	adds	r3, #1
 8010f02:	429a      	cmp	r2, r3
 8010f04:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010f08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8010f0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010f10:	d331      	bcc.n	8010f76 <quorem+0x9e>
 8010f12:	f04f 0e00 	mov.w	lr, #0
 8010f16:	4640      	mov	r0, r8
 8010f18:	46ac      	mov	ip, r5
 8010f1a:	46f2      	mov	sl, lr
 8010f1c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010f20:	b293      	uxth	r3, r2
 8010f22:	fb06 e303 	mla	r3, r6, r3, lr
 8010f26:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8010f2a:	b29b      	uxth	r3, r3
 8010f2c:	ebaa 0303 	sub.w	r3, sl, r3
 8010f30:	f8dc a000 	ldr.w	sl, [ip]
 8010f34:	0c12      	lsrs	r2, r2, #16
 8010f36:	fa13 f38a 	uxtah	r3, r3, sl
 8010f3a:	fb06 e202 	mla	r2, r6, r2, lr
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	9b00      	ldr	r3, [sp, #0]
 8010f42:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8010f46:	b292      	uxth	r2, r2
 8010f48:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8010f4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010f50:	f8bd 3000 	ldrh.w	r3, [sp]
 8010f54:	4581      	cmp	r9, r0
 8010f56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f5a:	f84c 3b04 	str.w	r3, [ip], #4
 8010f5e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8010f62:	d2db      	bcs.n	8010f1c <quorem+0x44>
 8010f64:	f855 300b 	ldr.w	r3, [r5, fp]
 8010f68:	b92b      	cbnz	r3, 8010f76 <quorem+0x9e>
 8010f6a:	9b01      	ldr	r3, [sp, #4]
 8010f6c:	3b04      	subs	r3, #4
 8010f6e:	429d      	cmp	r5, r3
 8010f70:	461a      	mov	r2, r3
 8010f72:	d32e      	bcc.n	8010fd2 <quorem+0xfa>
 8010f74:	613c      	str	r4, [r7, #16]
 8010f76:	4638      	mov	r0, r7
 8010f78:	f001 fc82 	bl	8012880 <__mcmp>
 8010f7c:	2800      	cmp	r0, #0
 8010f7e:	db24      	blt.n	8010fca <quorem+0xf2>
 8010f80:	3601      	adds	r6, #1
 8010f82:	4628      	mov	r0, r5
 8010f84:	f04f 0c00 	mov.w	ip, #0
 8010f88:	f858 2b04 	ldr.w	r2, [r8], #4
 8010f8c:	f8d0 e000 	ldr.w	lr, [r0]
 8010f90:	b293      	uxth	r3, r2
 8010f92:	ebac 0303 	sub.w	r3, ip, r3
 8010f96:	0c12      	lsrs	r2, r2, #16
 8010f98:	fa13 f38e 	uxtah	r3, r3, lr
 8010f9c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010fa4:	b29b      	uxth	r3, r3
 8010fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010faa:	45c1      	cmp	r9, r8
 8010fac:	f840 3b04 	str.w	r3, [r0], #4
 8010fb0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010fb4:	d2e8      	bcs.n	8010f88 <quorem+0xb0>
 8010fb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010fba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010fbe:	b922      	cbnz	r2, 8010fca <quorem+0xf2>
 8010fc0:	3b04      	subs	r3, #4
 8010fc2:	429d      	cmp	r5, r3
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	d30a      	bcc.n	8010fde <quorem+0x106>
 8010fc8:	613c      	str	r4, [r7, #16]
 8010fca:	4630      	mov	r0, r6
 8010fcc:	b003      	add	sp, #12
 8010fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd2:	6812      	ldr	r2, [r2, #0]
 8010fd4:	3b04      	subs	r3, #4
 8010fd6:	2a00      	cmp	r2, #0
 8010fd8:	d1cc      	bne.n	8010f74 <quorem+0x9c>
 8010fda:	3c01      	subs	r4, #1
 8010fdc:	e7c7      	b.n	8010f6e <quorem+0x96>
 8010fde:	6812      	ldr	r2, [r2, #0]
 8010fe0:	3b04      	subs	r3, #4
 8010fe2:	2a00      	cmp	r2, #0
 8010fe4:	d1f0      	bne.n	8010fc8 <quorem+0xf0>
 8010fe6:	3c01      	subs	r4, #1
 8010fe8:	e7eb      	b.n	8010fc2 <quorem+0xea>
 8010fea:	2000      	movs	r0, #0
 8010fec:	e7ee      	b.n	8010fcc <quorem+0xf4>
	...

08010ff0 <_dtoa_r>:
 8010ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ff4:	ed2d 8b04 	vpush	{d8-d9}
 8010ff8:	ec57 6b10 	vmov	r6, r7, d0
 8010ffc:	b093      	sub	sp, #76	; 0x4c
 8010ffe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011000:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011004:	9106      	str	r1, [sp, #24]
 8011006:	ee10 aa10 	vmov	sl, s0
 801100a:	4604      	mov	r4, r0
 801100c:	9209      	str	r2, [sp, #36]	; 0x24
 801100e:	930c      	str	r3, [sp, #48]	; 0x30
 8011010:	46bb      	mov	fp, r7
 8011012:	b975      	cbnz	r5, 8011032 <_dtoa_r+0x42>
 8011014:	2010      	movs	r0, #16
 8011016:	f001 f94d 	bl	80122b4 <malloc>
 801101a:	4602      	mov	r2, r0
 801101c:	6260      	str	r0, [r4, #36]	; 0x24
 801101e:	b920      	cbnz	r0, 801102a <_dtoa_r+0x3a>
 8011020:	4ba7      	ldr	r3, [pc, #668]	; (80112c0 <_dtoa_r+0x2d0>)
 8011022:	21ea      	movs	r1, #234	; 0xea
 8011024:	48a7      	ldr	r0, [pc, #668]	; (80112c4 <_dtoa_r+0x2d4>)
 8011026:	f002 f8ad 	bl	8013184 <__assert_func>
 801102a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801102e:	6005      	str	r5, [r0, #0]
 8011030:	60c5      	str	r5, [r0, #12]
 8011032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011034:	6819      	ldr	r1, [r3, #0]
 8011036:	b151      	cbz	r1, 801104e <_dtoa_r+0x5e>
 8011038:	685a      	ldr	r2, [r3, #4]
 801103a:	604a      	str	r2, [r1, #4]
 801103c:	2301      	movs	r3, #1
 801103e:	4093      	lsls	r3, r2
 8011040:	608b      	str	r3, [r1, #8]
 8011042:	4620      	mov	r0, r4
 8011044:	f001 f990 	bl	8012368 <_Bfree>
 8011048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801104a:	2200      	movs	r2, #0
 801104c:	601a      	str	r2, [r3, #0]
 801104e:	1e3b      	subs	r3, r7, #0
 8011050:	bfaa      	itet	ge
 8011052:	2300      	movge	r3, #0
 8011054:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011058:	f8c8 3000 	strge.w	r3, [r8]
 801105c:	4b9a      	ldr	r3, [pc, #616]	; (80112c8 <_dtoa_r+0x2d8>)
 801105e:	bfbc      	itt	lt
 8011060:	2201      	movlt	r2, #1
 8011062:	f8c8 2000 	strlt.w	r2, [r8]
 8011066:	ea33 030b 	bics.w	r3, r3, fp
 801106a:	d11b      	bne.n	80110a4 <_dtoa_r+0xb4>
 801106c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801106e:	f242 730f 	movw	r3, #9999	; 0x270f
 8011072:	6013      	str	r3, [r2, #0]
 8011074:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011078:	4333      	orrs	r3, r6
 801107a:	f000 8592 	beq.w	8011ba2 <_dtoa_r+0xbb2>
 801107e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011080:	b963      	cbnz	r3, 801109c <_dtoa_r+0xac>
 8011082:	4b92      	ldr	r3, [pc, #584]	; (80112cc <_dtoa_r+0x2dc>)
 8011084:	e022      	b.n	80110cc <_dtoa_r+0xdc>
 8011086:	4b92      	ldr	r3, [pc, #584]	; (80112d0 <_dtoa_r+0x2e0>)
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	3308      	adds	r3, #8
 801108c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801108e:	6013      	str	r3, [r2, #0]
 8011090:	9801      	ldr	r0, [sp, #4]
 8011092:	b013      	add	sp, #76	; 0x4c
 8011094:	ecbd 8b04 	vpop	{d8-d9}
 8011098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801109c:	4b8b      	ldr	r3, [pc, #556]	; (80112cc <_dtoa_r+0x2dc>)
 801109e:	9301      	str	r3, [sp, #4]
 80110a0:	3303      	adds	r3, #3
 80110a2:	e7f3      	b.n	801108c <_dtoa_r+0x9c>
 80110a4:	2200      	movs	r2, #0
 80110a6:	2300      	movs	r3, #0
 80110a8:	4650      	mov	r0, sl
 80110aa:	4659      	mov	r1, fp
 80110ac:	f7ef fd1c 	bl	8000ae8 <__aeabi_dcmpeq>
 80110b0:	ec4b ab19 	vmov	d9, sl, fp
 80110b4:	4680      	mov	r8, r0
 80110b6:	b158      	cbz	r0, 80110d0 <_dtoa_r+0xe0>
 80110b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80110ba:	2301      	movs	r3, #1
 80110bc:	6013      	str	r3, [r2, #0]
 80110be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	f000 856b 	beq.w	8011b9c <_dtoa_r+0xbac>
 80110c6:	4883      	ldr	r0, [pc, #524]	; (80112d4 <_dtoa_r+0x2e4>)
 80110c8:	6018      	str	r0, [r3, #0]
 80110ca:	1e43      	subs	r3, r0, #1
 80110cc:	9301      	str	r3, [sp, #4]
 80110ce:	e7df      	b.n	8011090 <_dtoa_r+0xa0>
 80110d0:	ec4b ab10 	vmov	d0, sl, fp
 80110d4:	aa10      	add	r2, sp, #64	; 0x40
 80110d6:	a911      	add	r1, sp, #68	; 0x44
 80110d8:	4620      	mov	r0, r4
 80110da:	f001 fcf3 	bl	8012ac4 <__d2b>
 80110de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80110e2:	ee08 0a10 	vmov	s16, r0
 80110e6:	2d00      	cmp	r5, #0
 80110e8:	f000 8084 	beq.w	80111f4 <_dtoa_r+0x204>
 80110ec:	ee19 3a90 	vmov	r3, s19
 80110f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80110f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80110f8:	4656      	mov	r6, sl
 80110fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80110fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011102:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011106:	4b74      	ldr	r3, [pc, #464]	; (80112d8 <_dtoa_r+0x2e8>)
 8011108:	2200      	movs	r2, #0
 801110a:	4630      	mov	r0, r6
 801110c:	4639      	mov	r1, r7
 801110e:	f7ef f8cb 	bl	80002a8 <__aeabi_dsub>
 8011112:	a365      	add	r3, pc, #404	; (adr r3, 80112a8 <_dtoa_r+0x2b8>)
 8011114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011118:	f7ef fa7e 	bl	8000618 <__aeabi_dmul>
 801111c:	a364      	add	r3, pc, #400	; (adr r3, 80112b0 <_dtoa_r+0x2c0>)
 801111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011122:	f7ef f8c3 	bl	80002ac <__adddf3>
 8011126:	4606      	mov	r6, r0
 8011128:	4628      	mov	r0, r5
 801112a:	460f      	mov	r7, r1
 801112c:	f7ef fa0a 	bl	8000544 <__aeabi_i2d>
 8011130:	a361      	add	r3, pc, #388	; (adr r3, 80112b8 <_dtoa_r+0x2c8>)
 8011132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011136:	f7ef fa6f 	bl	8000618 <__aeabi_dmul>
 801113a:	4602      	mov	r2, r0
 801113c:	460b      	mov	r3, r1
 801113e:	4630      	mov	r0, r6
 8011140:	4639      	mov	r1, r7
 8011142:	f7ef f8b3 	bl	80002ac <__adddf3>
 8011146:	4606      	mov	r6, r0
 8011148:	460f      	mov	r7, r1
 801114a:	f7ef fd15 	bl	8000b78 <__aeabi_d2iz>
 801114e:	2200      	movs	r2, #0
 8011150:	9000      	str	r0, [sp, #0]
 8011152:	2300      	movs	r3, #0
 8011154:	4630      	mov	r0, r6
 8011156:	4639      	mov	r1, r7
 8011158:	f7ef fcd0 	bl	8000afc <__aeabi_dcmplt>
 801115c:	b150      	cbz	r0, 8011174 <_dtoa_r+0x184>
 801115e:	9800      	ldr	r0, [sp, #0]
 8011160:	f7ef f9f0 	bl	8000544 <__aeabi_i2d>
 8011164:	4632      	mov	r2, r6
 8011166:	463b      	mov	r3, r7
 8011168:	f7ef fcbe 	bl	8000ae8 <__aeabi_dcmpeq>
 801116c:	b910      	cbnz	r0, 8011174 <_dtoa_r+0x184>
 801116e:	9b00      	ldr	r3, [sp, #0]
 8011170:	3b01      	subs	r3, #1
 8011172:	9300      	str	r3, [sp, #0]
 8011174:	9b00      	ldr	r3, [sp, #0]
 8011176:	2b16      	cmp	r3, #22
 8011178:	d85a      	bhi.n	8011230 <_dtoa_r+0x240>
 801117a:	9a00      	ldr	r2, [sp, #0]
 801117c:	4b57      	ldr	r3, [pc, #348]	; (80112dc <_dtoa_r+0x2ec>)
 801117e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011186:	ec51 0b19 	vmov	r0, r1, d9
 801118a:	f7ef fcb7 	bl	8000afc <__aeabi_dcmplt>
 801118e:	2800      	cmp	r0, #0
 8011190:	d050      	beq.n	8011234 <_dtoa_r+0x244>
 8011192:	9b00      	ldr	r3, [sp, #0]
 8011194:	3b01      	subs	r3, #1
 8011196:	9300      	str	r3, [sp, #0]
 8011198:	2300      	movs	r3, #0
 801119a:	930b      	str	r3, [sp, #44]	; 0x2c
 801119c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801119e:	1b5d      	subs	r5, r3, r5
 80111a0:	1e6b      	subs	r3, r5, #1
 80111a2:	9305      	str	r3, [sp, #20]
 80111a4:	bf45      	ittet	mi
 80111a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80111aa:	9304      	strmi	r3, [sp, #16]
 80111ac:	2300      	movpl	r3, #0
 80111ae:	2300      	movmi	r3, #0
 80111b0:	bf4c      	ite	mi
 80111b2:	9305      	strmi	r3, [sp, #20]
 80111b4:	9304      	strpl	r3, [sp, #16]
 80111b6:	9b00      	ldr	r3, [sp, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	db3d      	blt.n	8011238 <_dtoa_r+0x248>
 80111bc:	9b05      	ldr	r3, [sp, #20]
 80111be:	9a00      	ldr	r2, [sp, #0]
 80111c0:	920a      	str	r2, [sp, #40]	; 0x28
 80111c2:	4413      	add	r3, r2
 80111c4:	9305      	str	r3, [sp, #20]
 80111c6:	2300      	movs	r3, #0
 80111c8:	9307      	str	r3, [sp, #28]
 80111ca:	9b06      	ldr	r3, [sp, #24]
 80111cc:	2b09      	cmp	r3, #9
 80111ce:	f200 8089 	bhi.w	80112e4 <_dtoa_r+0x2f4>
 80111d2:	2b05      	cmp	r3, #5
 80111d4:	bfc4      	itt	gt
 80111d6:	3b04      	subgt	r3, #4
 80111d8:	9306      	strgt	r3, [sp, #24]
 80111da:	9b06      	ldr	r3, [sp, #24]
 80111dc:	f1a3 0302 	sub.w	r3, r3, #2
 80111e0:	bfcc      	ite	gt
 80111e2:	2500      	movgt	r5, #0
 80111e4:	2501      	movle	r5, #1
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	f200 8087 	bhi.w	80112fa <_dtoa_r+0x30a>
 80111ec:	e8df f003 	tbb	[pc, r3]
 80111f0:	59383a2d 	.word	0x59383a2d
 80111f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80111f8:	441d      	add	r5, r3
 80111fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80111fe:	2b20      	cmp	r3, #32
 8011200:	bfc1      	itttt	gt
 8011202:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011206:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801120a:	fa0b f303 	lslgt.w	r3, fp, r3
 801120e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8011212:	bfda      	itte	le
 8011214:	f1c3 0320 	rsble	r3, r3, #32
 8011218:	fa06 f003 	lslle.w	r0, r6, r3
 801121c:	4318      	orrgt	r0, r3
 801121e:	f7ef f981 	bl	8000524 <__aeabi_ui2d>
 8011222:	2301      	movs	r3, #1
 8011224:	4606      	mov	r6, r0
 8011226:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801122a:	3d01      	subs	r5, #1
 801122c:	930e      	str	r3, [sp, #56]	; 0x38
 801122e:	e76a      	b.n	8011106 <_dtoa_r+0x116>
 8011230:	2301      	movs	r3, #1
 8011232:	e7b2      	b.n	801119a <_dtoa_r+0x1aa>
 8011234:	900b      	str	r0, [sp, #44]	; 0x2c
 8011236:	e7b1      	b.n	801119c <_dtoa_r+0x1ac>
 8011238:	9b04      	ldr	r3, [sp, #16]
 801123a:	9a00      	ldr	r2, [sp, #0]
 801123c:	1a9b      	subs	r3, r3, r2
 801123e:	9304      	str	r3, [sp, #16]
 8011240:	4253      	negs	r3, r2
 8011242:	9307      	str	r3, [sp, #28]
 8011244:	2300      	movs	r3, #0
 8011246:	930a      	str	r3, [sp, #40]	; 0x28
 8011248:	e7bf      	b.n	80111ca <_dtoa_r+0x1da>
 801124a:	2300      	movs	r3, #0
 801124c:	9308      	str	r3, [sp, #32]
 801124e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011250:	2b00      	cmp	r3, #0
 8011252:	dc55      	bgt.n	8011300 <_dtoa_r+0x310>
 8011254:	2301      	movs	r3, #1
 8011256:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801125a:	461a      	mov	r2, r3
 801125c:	9209      	str	r2, [sp, #36]	; 0x24
 801125e:	e00c      	b.n	801127a <_dtoa_r+0x28a>
 8011260:	2301      	movs	r3, #1
 8011262:	e7f3      	b.n	801124c <_dtoa_r+0x25c>
 8011264:	2300      	movs	r3, #0
 8011266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011268:	9308      	str	r3, [sp, #32]
 801126a:	9b00      	ldr	r3, [sp, #0]
 801126c:	4413      	add	r3, r2
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	3301      	adds	r3, #1
 8011272:	2b01      	cmp	r3, #1
 8011274:	9303      	str	r3, [sp, #12]
 8011276:	bfb8      	it	lt
 8011278:	2301      	movlt	r3, #1
 801127a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801127c:	2200      	movs	r2, #0
 801127e:	6042      	str	r2, [r0, #4]
 8011280:	2204      	movs	r2, #4
 8011282:	f102 0614 	add.w	r6, r2, #20
 8011286:	429e      	cmp	r6, r3
 8011288:	6841      	ldr	r1, [r0, #4]
 801128a:	d93d      	bls.n	8011308 <_dtoa_r+0x318>
 801128c:	4620      	mov	r0, r4
 801128e:	f001 f82b 	bl	80122e8 <_Balloc>
 8011292:	9001      	str	r0, [sp, #4]
 8011294:	2800      	cmp	r0, #0
 8011296:	d13b      	bne.n	8011310 <_dtoa_r+0x320>
 8011298:	4b11      	ldr	r3, [pc, #68]	; (80112e0 <_dtoa_r+0x2f0>)
 801129a:	4602      	mov	r2, r0
 801129c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80112a0:	e6c0      	b.n	8011024 <_dtoa_r+0x34>
 80112a2:	2301      	movs	r3, #1
 80112a4:	e7df      	b.n	8011266 <_dtoa_r+0x276>
 80112a6:	bf00      	nop
 80112a8:	636f4361 	.word	0x636f4361
 80112ac:	3fd287a7 	.word	0x3fd287a7
 80112b0:	8b60c8b3 	.word	0x8b60c8b3
 80112b4:	3fc68a28 	.word	0x3fc68a28
 80112b8:	509f79fb 	.word	0x509f79fb
 80112bc:	3fd34413 	.word	0x3fd34413
 80112c0:	08015ac6 	.word	0x08015ac6
 80112c4:	08015add 	.word	0x08015add
 80112c8:	7ff00000 	.word	0x7ff00000
 80112cc:	08015ac2 	.word	0x08015ac2
 80112d0:	08015ab9 	.word	0x08015ab9
 80112d4:	0801593d 	.word	0x0801593d
 80112d8:	3ff80000 	.word	0x3ff80000
 80112dc:	08015c48 	.word	0x08015c48
 80112e0:	08015b38 	.word	0x08015b38
 80112e4:	2501      	movs	r5, #1
 80112e6:	2300      	movs	r3, #0
 80112e8:	9306      	str	r3, [sp, #24]
 80112ea:	9508      	str	r5, [sp, #32]
 80112ec:	f04f 33ff 	mov.w	r3, #4294967295
 80112f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80112f4:	2200      	movs	r2, #0
 80112f6:	2312      	movs	r3, #18
 80112f8:	e7b0      	b.n	801125c <_dtoa_r+0x26c>
 80112fa:	2301      	movs	r3, #1
 80112fc:	9308      	str	r3, [sp, #32]
 80112fe:	e7f5      	b.n	80112ec <_dtoa_r+0x2fc>
 8011300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011302:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8011306:	e7b8      	b.n	801127a <_dtoa_r+0x28a>
 8011308:	3101      	adds	r1, #1
 801130a:	6041      	str	r1, [r0, #4]
 801130c:	0052      	lsls	r2, r2, #1
 801130e:	e7b8      	b.n	8011282 <_dtoa_r+0x292>
 8011310:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011312:	9a01      	ldr	r2, [sp, #4]
 8011314:	601a      	str	r2, [r3, #0]
 8011316:	9b03      	ldr	r3, [sp, #12]
 8011318:	2b0e      	cmp	r3, #14
 801131a:	f200 809d 	bhi.w	8011458 <_dtoa_r+0x468>
 801131e:	2d00      	cmp	r5, #0
 8011320:	f000 809a 	beq.w	8011458 <_dtoa_r+0x468>
 8011324:	9b00      	ldr	r3, [sp, #0]
 8011326:	2b00      	cmp	r3, #0
 8011328:	dd32      	ble.n	8011390 <_dtoa_r+0x3a0>
 801132a:	4ab7      	ldr	r2, [pc, #732]	; (8011608 <_dtoa_r+0x618>)
 801132c:	f003 030f 	and.w	r3, r3, #15
 8011330:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011334:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011338:	9b00      	ldr	r3, [sp, #0]
 801133a:	05d8      	lsls	r0, r3, #23
 801133c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8011340:	d516      	bpl.n	8011370 <_dtoa_r+0x380>
 8011342:	4bb2      	ldr	r3, [pc, #712]	; (801160c <_dtoa_r+0x61c>)
 8011344:	ec51 0b19 	vmov	r0, r1, d9
 8011348:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801134c:	f7ef fa8e 	bl	800086c <__aeabi_ddiv>
 8011350:	f007 070f 	and.w	r7, r7, #15
 8011354:	4682      	mov	sl, r0
 8011356:	468b      	mov	fp, r1
 8011358:	2503      	movs	r5, #3
 801135a:	4eac      	ldr	r6, [pc, #688]	; (801160c <_dtoa_r+0x61c>)
 801135c:	b957      	cbnz	r7, 8011374 <_dtoa_r+0x384>
 801135e:	4642      	mov	r2, r8
 8011360:	464b      	mov	r3, r9
 8011362:	4650      	mov	r0, sl
 8011364:	4659      	mov	r1, fp
 8011366:	f7ef fa81 	bl	800086c <__aeabi_ddiv>
 801136a:	4682      	mov	sl, r0
 801136c:	468b      	mov	fp, r1
 801136e:	e028      	b.n	80113c2 <_dtoa_r+0x3d2>
 8011370:	2502      	movs	r5, #2
 8011372:	e7f2      	b.n	801135a <_dtoa_r+0x36a>
 8011374:	07f9      	lsls	r1, r7, #31
 8011376:	d508      	bpl.n	801138a <_dtoa_r+0x39a>
 8011378:	4640      	mov	r0, r8
 801137a:	4649      	mov	r1, r9
 801137c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011380:	f7ef f94a 	bl	8000618 <__aeabi_dmul>
 8011384:	3501      	adds	r5, #1
 8011386:	4680      	mov	r8, r0
 8011388:	4689      	mov	r9, r1
 801138a:	107f      	asrs	r7, r7, #1
 801138c:	3608      	adds	r6, #8
 801138e:	e7e5      	b.n	801135c <_dtoa_r+0x36c>
 8011390:	f000 809b 	beq.w	80114ca <_dtoa_r+0x4da>
 8011394:	9b00      	ldr	r3, [sp, #0]
 8011396:	4f9d      	ldr	r7, [pc, #628]	; (801160c <_dtoa_r+0x61c>)
 8011398:	425e      	negs	r6, r3
 801139a:	4b9b      	ldr	r3, [pc, #620]	; (8011608 <_dtoa_r+0x618>)
 801139c:	f006 020f 	and.w	r2, r6, #15
 80113a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80113a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a8:	ec51 0b19 	vmov	r0, r1, d9
 80113ac:	f7ef f934 	bl	8000618 <__aeabi_dmul>
 80113b0:	1136      	asrs	r6, r6, #4
 80113b2:	4682      	mov	sl, r0
 80113b4:	468b      	mov	fp, r1
 80113b6:	2300      	movs	r3, #0
 80113b8:	2502      	movs	r5, #2
 80113ba:	2e00      	cmp	r6, #0
 80113bc:	d17a      	bne.n	80114b4 <_dtoa_r+0x4c4>
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d1d3      	bne.n	801136a <_dtoa_r+0x37a>
 80113c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	f000 8082 	beq.w	80114ce <_dtoa_r+0x4de>
 80113ca:	4b91      	ldr	r3, [pc, #580]	; (8011610 <_dtoa_r+0x620>)
 80113cc:	2200      	movs	r2, #0
 80113ce:	4650      	mov	r0, sl
 80113d0:	4659      	mov	r1, fp
 80113d2:	f7ef fb93 	bl	8000afc <__aeabi_dcmplt>
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d079      	beq.n	80114ce <_dtoa_r+0x4de>
 80113da:	9b03      	ldr	r3, [sp, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d076      	beq.n	80114ce <_dtoa_r+0x4de>
 80113e0:	9b02      	ldr	r3, [sp, #8]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	dd36      	ble.n	8011454 <_dtoa_r+0x464>
 80113e6:	9b00      	ldr	r3, [sp, #0]
 80113e8:	4650      	mov	r0, sl
 80113ea:	4659      	mov	r1, fp
 80113ec:	1e5f      	subs	r7, r3, #1
 80113ee:	2200      	movs	r2, #0
 80113f0:	4b88      	ldr	r3, [pc, #544]	; (8011614 <_dtoa_r+0x624>)
 80113f2:	f7ef f911 	bl	8000618 <__aeabi_dmul>
 80113f6:	9e02      	ldr	r6, [sp, #8]
 80113f8:	4682      	mov	sl, r0
 80113fa:	468b      	mov	fp, r1
 80113fc:	3501      	adds	r5, #1
 80113fe:	4628      	mov	r0, r5
 8011400:	f7ef f8a0 	bl	8000544 <__aeabi_i2d>
 8011404:	4652      	mov	r2, sl
 8011406:	465b      	mov	r3, fp
 8011408:	f7ef f906 	bl	8000618 <__aeabi_dmul>
 801140c:	4b82      	ldr	r3, [pc, #520]	; (8011618 <_dtoa_r+0x628>)
 801140e:	2200      	movs	r2, #0
 8011410:	f7ee ff4c 	bl	80002ac <__adddf3>
 8011414:	46d0      	mov	r8, sl
 8011416:	46d9      	mov	r9, fp
 8011418:	4682      	mov	sl, r0
 801141a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801141e:	2e00      	cmp	r6, #0
 8011420:	d158      	bne.n	80114d4 <_dtoa_r+0x4e4>
 8011422:	4b7e      	ldr	r3, [pc, #504]	; (801161c <_dtoa_r+0x62c>)
 8011424:	2200      	movs	r2, #0
 8011426:	4640      	mov	r0, r8
 8011428:	4649      	mov	r1, r9
 801142a:	f7ee ff3d 	bl	80002a8 <__aeabi_dsub>
 801142e:	4652      	mov	r2, sl
 8011430:	465b      	mov	r3, fp
 8011432:	4680      	mov	r8, r0
 8011434:	4689      	mov	r9, r1
 8011436:	f7ef fb7f 	bl	8000b38 <__aeabi_dcmpgt>
 801143a:	2800      	cmp	r0, #0
 801143c:	f040 8295 	bne.w	801196a <_dtoa_r+0x97a>
 8011440:	4652      	mov	r2, sl
 8011442:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011446:	4640      	mov	r0, r8
 8011448:	4649      	mov	r1, r9
 801144a:	f7ef fb57 	bl	8000afc <__aeabi_dcmplt>
 801144e:	2800      	cmp	r0, #0
 8011450:	f040 8289 	bne.w	8011966 <_dtoa_r+0x976>
 8011454:	ec5b ab19 	vmov	sl, fp, d9
 8011458:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801145a:	2b00      	cmp	r3, #0
 801145c:	f2c0 8148 	blt.w	80116f0 <_dtoa_r+0x700>
 8011460:	9a00      	ldr	r2, [sp, #0]
 8011462:	2a0e      	cmp	r2, #14
 8011464:	f300 8144 	bgt.w	80116f0 <_dtoa_r+0x700>
 8011468:	4b67      	ldr	r3, [pc, #412]	; (8011608 <_dtoa_r+0x618>)
 801146a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801146e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011472:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011474:	2b00      	cmp	r3, #0
 8011476:	f280 80d5 	bge.w	8011624 <_dtoa_r+0x634>
 801147a:	9b03      	ldr	r3, [sp, #12]
 801147c:	2b00      	cmp	r3, #0
 801147e:	f300 80d1 	bgt.w	8011624 <_dtoa_r+0x634>
 8011482:	f040 826f 	bne.w	8011964 <_dtoa_r+0x974>
 8011486:	4b65      	ldr	r3, [pc, #404]	; (801161c <_dtoa_r+0x62c>)
 8011488:	2200      	movs	r2, #0
 801148a:	4640      	mov	r0, r8
 801148c:	4649      	mov	r1, r9
 801148e:	f7ef f8c3 	bl	8000618 <__aeabi_dmul>
 8011492:	4652      	mov	r2, sl
 8011494:	465b      	mov	r3, fp
 8011496:	f7ef fb45 	bl	8000b24 <__aeabi_dcmpge>
 801149a:	9e03      	ldr	r6, [sp, #12]
 801149c:	4637      	mov	r7, r6
 801149e:	2800      	cmp	r0, #0
 80114a0:	f040 8245 	bne.w	801192e <_dtoa_r+0x93e>
 80114a4:	9d01      	ldr	r5, [sp, #4]
 80114a6:	2331      	movs	r3, #49	; 0x31
 80114a8:	f805 3b01 	strb.w	r3, [r5], #1
 80114ac:	9b00      	ldr	r3, [sp, #0]
 80114ae:	3301      	adds	r3, #1
 80114b0:	9300      	str	r3, [sp, #0]
 80114b2:	e240      	b.n	8011936 <_dtoa_r+0x946>
 80114b4:	07f2      	lsls	r2, r6, #31
 80114b6:	d505      	bpl.n	80114c4 <_dtoa_r+0x4d4>
 80114b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80114bc:	f7ef f8ac 	bl	8000618 <__aeabi_dmul>
 80114c0:	3501      	adds	r5, #1
 80114c2:	2301      	movs	r3, #1
 80114c4:	1076      	asrs	r6, r6, #1
 80114c6:	3708      	adds	r7, #8
 80114c8:	e777      	b.n	80113ba <_dtoa_r+0x3ca>
 80114ca:	2502      	movs	r5, #2
 80114cc:	e779      	b.n	80113c2 <_dtoa_r+0x3d2>
 80114ce:	9f00      	ldr	r7, [sp, #0]
 80114d0:	9e03      	ldr	r6, [sp, #12]
 80114d2:	e794      	b.n	80113fe <_dtoa_r+0x40e>
 80114d4:	9901      	ldr	r1, [sp, #4]
 80114d6:	4b4c      	ldr	r3, [pc, #304]	; (8011608 <_dtoa_r+0x618>)
 80114d8:	4431      	add	r1, r6
 80114da:	910d      	str	r1, [sp, #52]	; 0x34
 80114dc:	9908      	ldr	r1, [sp, #32]
 80114de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80114e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80114e6:	2900      	cmp	r1, #0
 80114e8:	d043      	beq.n	8011572 <_dtoa_r+0x582>
 80114ea:	494d      	ldr	r1, [pc, #308]	; (8011620 <_dtoa_r+0x630>)
 80114ec:	2000      	movs	r0, #0
 80114ee:	f7ef f9bd 	bl	800086c <__aeabi_ddiv>
 80114f2:	4652      	mov	r2, sl
 80114f4:	465b      	mov	r3, fp
 80114f6:	f7ee fed7 	bl	80002a8 <__aeabi_dsub>
 80114fa:	9d01      	ldr	r5, [sp, #4]
 80114fc:	4682      	mov	sl, r0
 80114fe:	468b      	mov	fp, r1
 8011500:	4649      	mov	r1, r9
 8011502:	4640      	mov	r0, r8
 8011504:	f7ef fb38 	bl	8000b78 <__aeabi_d2iz>
 8011508:	4606      	mov	r6, r0
 801150a:	f7ef f81b 	bl	8000544 <__aeabi_i2d>
 801150e:	4602      	mov	r2, r0
 8011510:	460b      	mov	r3, r1
 8011512:	4640      	mov	r0, r8
 8011514:	4649      	mov	r1, r9
 8011516:	f7ee fec7 	bl	80002a8 <__aeabi_dsub>
 801151a:	3630      	adds	r6, #48	; 0x30
 801151c:	f805 6b01 	strb.w	r6, [r5], #1
 8011520:	4652      	mov	r2, sl
 8011522:	465b      	mov	r3, fp
 8011524:	4680      	mov	r8, r0
 8011526:	4689      	mov	r9, r1
 8011528:	f7ef fae8 	bl	8000afc <__aeabi_dcmplt>
 801152c:	2800      	cmp	r0, #0
 801152e:	d163      	bne.n	80115f8 <_dtoa_r+0x608>
 8011530:	4642      	mov	r2, r8
 8011532:	464b      	mov	r3, r9
 8011534:	4936      	ldr	r1, [pc, #216]	; (8011610 <_dtoa_r+0x620>)
 8011536:	2000      	movs	r0, #0
 8011538:	f7ee feb6 	bl	80002a8 <__aeabi_dsub>
 801153c:	4652      	mov	r2, sl
 801153e:	465b      	mov	r3, fp
 8011540:	f7ef fadc 	bl	8000afc <__aeabi_dcmplt>
 8011544:	2800      	cmp	r0, #0
 8011546:	f040 80b5 	bne.w	80116b4 <_dtoa_r+0x6c4>
 801154a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801154c:	429d      	cmp	r5, r3
 801154e:	d081      	beq.n	8011454 <_dtoa_r+0x464>
 8011550:	4b30      	ldr	r3, [pc, #192]	; (8011614 <_dtoa_r+0x624>)
 8011552:	2200      	movs	r2, #0
 8011554:	4650      	mov	r0, sl
 8011556:	4659      	mov	r1, fp
 8011558:	f7ef f85e 	bl	8000618 <__aeabi_dmul>
 801155c:	4b2d      	ldr	r3, [pc, #180]	; (8011614 <_dtoa_r+0x624>)
 801155e:	4682      	mov	sl, r0
 8011560:	468b      	mov	fp, r1
 8011562:	4640      	mov	r0, r8
 8011564:	4649      	mov	r1, r9
 8011566:	2200      	movs	r2, #0
 8011568:	f7ef f856 	bl	8000618 <__aeabi_dmul>
 801156c:	4680      	mov	r8, r0
 801156e:	4689      	mov	r9, r1
 8011570:	e7c6      	b.n	8011500 <_dtoa_r+0x510>
 8011572:	4650      	mov	r0, sl
 8011574:	4659      	mov	r1, fp
 8011576:	f7ef f84f 	bl	8000618 <__aeabi_dmul>
 801157a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801157c:	9d01      	ldr	r5, [sp, #4]
 801157e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011580:	4682      	mov	sl, r0
 8011582:	468b      	mov	fp, r1
 8011584:	4649      	mov	r1, r9
 8011586:	4640      	mov	r0, r8
 8011588:	f7ef faf6 	bl	8000b78 <__aeabi_d2iz>
 801158c:	4606      	mov	r6, r0
 801158e:	f7ee ffd9 	bl	8000544 <__aeabi_i2d>
 8011592:	3630      	adds	r6, #48	; 0x30
 8011594:	4602      	mov	r2, r0
 8011596:	460b      	mov	r3, r1
 8011598:	4640      	mov	r0, r8
 801159a:	4649      	mov	r1, r9
 801159c:	f7ee fe84 	bl	80002a8 <__aeabi_dsub>
 80115a0:	f805 6b01 	strb.w	r6, [r5], #1
 80115a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115a6:	429d      	cmp	r5, r3
 80115a8:	4680      	mov	r8, r0
 80115aa:	4689      	mov	r9, r1
 80115ac:	f04f 0200 	mov.w	r2, #0
 80115b0:	d124      	bne.n	80115fc <_dtoa_r+0x60c>
 80115b2:	4b1b      	ldr	r3, [pc, #108]	; (8011620 <_dtoa_r+0x630>)
 80115b4:	4650      	mov	r0, sl
 80115b6:	4659      	mov	r1, fp
 80115b8:	f7ee fe78 	bl	80002ac <__adddf3>
 80115bc:	4602      	mov	r2, r0
 80115be:	460b      	mov	r3, r1
 80115c0:	4640      	mov	r0, r8
 80115c2:	4649      	mov	r1, r9
 80115c4:	f7ef fab8 	bl	8000b38 <__aeabi_dcmpgt>
 80115c8:	2800      	cmp	r0, #0
 80115ca:	d173      	bne.n	80116b4 <_dtoa_r+0x6c4>
 80115cc:	4652      	mov	r2, sl
 80115ce:	465b      	mov	r3, fp
 80115d0:	4913      	ldr	r1, [pc, #76]	; (8011620 <_dtoa_r+0x630>)
 80115d2:	2000      	movs	r0, #0
 80115d4:	f7ee fe68 	bl	80002a8 <__aeabi_dsub>
 80115d8:	4602      	mov	r2, r0
 80115da:	460b      	mov	r3, r1
 80115dc:	4640      	mov	r0, r8
 80115de:	4649      	mov	r1, r9
 80115e0:	f7ef fa8c 	bl	8000afc <__aeabi_dcmplt>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f43f af35 	beq.w	8011454 <_dtoa_r+0x464>
 80115ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80115ec:	1e6b      	subs	r3, r5, #1
 80115ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80115f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80115f4:	2b30      	cmp	r3, #48	; 0x30
 80115f6:	d0f8      	beq.n	80115ea <_dtoa_r+0x5fa>
 80115f8:	9700      	str	r7, [sp, #0]
 80115fa:	e049      	b.n	8011690 <_dtoa_r+0x6a0>
 80115fc:	4b05      	ldr	r3, [pc, #20]	; (8011614 <_dtoa_r+0x624>)
 80115fe:	f7ef f80b 	bl	8000618 <__aeabi_dmul>
 8011602:	4680      	mov	r8, r0
 8011604:	4689      	mov	r9, r1
 8011606:	e7bd      	b.n	8011584 <_dtoa_r+0x594>
 8011608:	08015c48 	.word	0x08015c48
 801160c:	08015c20 	.word	0x08015c20
 8011610:	3ff00000 	.word	0x3ff00000
 8011614:	40240000 	.word	0x40240000
 8011618:	401c0000 	.word	0x401c0000
 801161c:	40140000 	.word	0x40140000
 8011620:	3fe00000 	.word	0x3fe00000
 8011624:	9d01      	ldr	r5, [sp, #4]
 8011626:	4656      	mov	r6, sl
 8011628:	465f      	mov	r7, fp
 801162a:	4642      	mov	r2, r8
 801162c:	464b      	mov	r3, r9
 801162e:	4630      	mov	r0, r6
 8011630:	4639      	mov	r1, r7
 8011632:	f7ef f91b 	bl	800086c <__aeabi_ddiv>
 8011636:	f7ef fa9f 	bl	8000b78 <__aeabi_d2iz>
 801163a:	4682      	mov	sl, r0
 801163c:	f7ee ff82 	bl	8000544 <__aeabi_i2d>
 8011640:	4642      	mov	r2, r8
 8011642:	464b      	mov	r3, r9
 8011644:	f7ee ffe8 	bl	8000618 <__aeabi_dmul>
 8011648:	4602      	mov	r2, r0
 801164a:	460b      	mov	r3, r1
 801164c:	4630      	mov	r0, r6
 801164e:	4639      	mov	r1, r7
 8011650:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8011654:	f7ee fe28 	bl	80002a8 <__aeabi_dsub>
 8011658:	f805 6b01 	strb.w	r6, [r5], #1
 801165c:	9e01      	ldr	r6, [sp, #4]
 801165e:	9f03      	ldr	r7, [sp, #12]
 8011660:	1bae      	subs	r6, r5, r6
 8011662:	42b7      	cmp	r7, r6
 8011664:	4602      	mov	r2, r0
 8011666:	460b      	mov	r3, r1
 8011668:	d135      	bne.n	80116d6 <_dtoa_r+0x6e6>
 801166a:	f7ee fe1f 	bl	80002ac <__adddf3>
 801166e:	4642      	mov	r2, r8
 8011670:	464b      	mov	r3, r9
 8011672:	4606      	mov	r6, r0
 8011674:	460f      	mov	r7, r1
 8011676:	f7ef fa5f 	bl	8000b38 <__aeabi_dcmpgt>
 801167a:	b9d0      	cbnz	r0, 80116b2 <_dtoa_r+0x6c2>
 801167c:	4642      	mov	r2, r8
 801167e:	464b      	mov	r3, r9
 8011680:	4630      	mov	r0, r6
 8011682:	4639      	mov	r1, r7
 8011684:	f7ef fa30 	bl	8000ae8 <__aeabi_dcmpeq>
 8011688:	b110      	cbz	r0, 8011690 <_dtoa_r+0x6a0>
 801168a:	f01a 0f01 	tst.w	sl, #1
 801168e:	d110      	bne.n	80116b2 <_dtoa_r+0x6c2>
 8011690:	4620      	mov	r0, r4
 8011692:	ee18 1a10 	vmov	r1, s16
 8011696:	f000 fe67 	bl	8012368 <_Bfree>
 801169a:	2300      	movs	r3, #0
 801169c:	9800      	ldr	r0, [sp, #0]
 801169e:	702b      	strb	r3, [r5, #0]
 80116a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116a2:	3001      	adds	r0, #1
 80116a4:	6018      	str	r0, [r3, #0]
 80116a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f43f acf1 	beq.w	8011090 <_dtoa_r+0xa0>
 80116ae:	601d      	str	r5, [r3, #0]
 80116b0:	e4ee      	b.n	8011090 <_dtoa_r+0xa0>
 80116b2:	9f00      	ldr	r7, [sp, #0]
 80116b4:	462b      	mov	r3, r5
 80116b6:	461d      	mov	r5, r3
 80116b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80116bc:	2a39      	cmp	r2, #57	; 0x39
 80116be:	d106      	bne.n	80116ce <_dtoa_r+0x6de>
 80116c0:	9a01      	ldr	r2, [sp, #4]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d1f7      	bne.n	80116b6 <_dtoa_r+0x6c6>
 80116c6:	9901      	ldr	r1, [sp, #4]
 80116c8:	2230      	movs	r2, #48	; 0x30
 80116ca:	3701      	adds	r7, #1
 80116cc:	700a      	strb	r2, [r1, #0]
 80116ce:	781a      	ldrb	r2, [r3, #0]
 80116d0:	3201      	adds	r2, #1
 80116d2:	701a      	strb	r2, [r3, #0]
 80116d4:	e790      	b.n	80115f8 <_dtoa_r+0x608>
 80116d6:	4ba6      	ldr	r3, [pc, #664]	; (8011970 <_dtoa_r+0x980>)
 80116d8:	2200      	movs	r2, #0
 80116da:	f7ee ff9d 	bl	8000618 <__aeabi_dmul>
 80116de:	2200      	movs	r2, #0
 80116e0:	2300      	movs	r3, #0
 80116e2:	4606      	mov	r6, r0
 80116e4:	460f      	mov	r7, r1
 80116e6:	f7ef f9ff 	bl	8000ae8 <__aeabi_dcmpeq>
 80116ea:	2800      	cmp	r0, #0
 80116ec:	d09d      	beq.n	801162a <_dtoa_r+0x63a>
 80116ee:	e7cf      	b.n	8011690 <_dtoa_r+0x6a0>
 80116f0:	9a08      	ldr	r2, [sp, #32]
 80116f2:	2a00      	cmp	r2, #0
 80116f4:	f000 80d7 	beq.w	80118a6 <_dtoa_r+0x8b6>
 80116f8:	9a06      	ldr	r2, [sp, #24]
 80116fa:	2a01      	cmp	r2, #1
 80116fc:	f300 80ba 	bgt.w	8011874 <_dtoa_r+0x884>
 8011700:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011702:	2a00      	cmp	r2, #0
 8011704:	f000 80b2 	beq.w	801186c <_dtoa_r+0x87c>
 8011708:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801170c:	9e07      	ldr	r6, [sp, #28]
 801170e:	9d04      	ldr	r5, [sp, #16]
 8011710:	9a04      	ldr	r2, [sp, #16]
 8011712:	441a      	add	r2, r3
 8011714:	9204      	str	r2, [sp, #16]
 8011716:	9a05      	ldr	r2, [sp, #20]
 8011718:	2101      	movs	r1, #1
 801171a:	441a      	add	r2, r3
 801171c:	4620      	mov	r0, r4
 801171e:	9205      	str	r2, [sp, #20]
 8011720:	f000 ff24 	bl	801256c <__i2b>
 8011724:	4607      	mov	r7, r0
 8011726:	2d00      	cmp	r5, #0
 8011728:	dd0c      	ble.n	8011744 <_dtoa_r+0x754>
 801172a:	9b05      	ldr	r3, [sp, #20]
 801172c:	2b00      	cmp	r3, #0
 801172e:	dd09      	ble.n	8011744 <_dtoa_r+0x754>
 8011730:	42ab      	cmp	r3, r5
 8011732:	9a04      	ldr	r2, [sp, #16]
 8011734:	bfa8      	it	ge
 8011736:	462b      	movge	r3, r5
 8011738:	1ad2      	subs	r2, r2, r3
 801173a:	9204      	str	r2, [sp, #16]
 801173c:	9a05      	ldr	r2, [sp, #20]
 801173e:	1aed      	subs	r5, r5, r3
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	9305      	str	r3, [sp, #20]
 8011744:	9b07      	ldr	r3, [sp, #28]
 8011746:	b31b      	cbz	r3, 8011790 <_dtoa_r+0x7a0>
 8011748:	9b08      	ldr	r3, [sp, #32]
 801174a:	2b00      	cmp	r3, #0
 801174c:	f000 80af 	beq.w	80118ae <_dtoa_r+0x8be>
 8011750:	2e00      	cmp	r6, #0
 8011752:	dd13      	ble.n	801177c <_dtoa_r+0x78c>
 8011754:	4639      	mov	r1, r7
 8011756:	4632      	mov	r2, r6
 8011758:	4620      	mov	r0, r4
 801175a:	f000 ffc7 	bl	80126ec <__pow5mult>
 801175e:	ee18 2a10 	vmov	r2, s16
 8011762:	4601      	mov	r1, r0
 8011764:	4607      	mov	r7, r0
 8011766:	4620      	mov	r0, r4
 8011768:	f000 ff16 	bl	8012598 <__multiply>
 801176c:	ee18 1a10 	vmov	r1, s16
 8011770:	4680      	mov	r8, r0
 8011772:	4620      	mov	r0, r4
 8011774:	f000 fdf8 	bl	8012368 <_Bfree>
 8011778:	ee08 8a10 	vmov	s16, r8
 801177c:	9b07      	ldr	r3, [sp, #28]
 801177e:	1b9a      	subs	r2, r3, r6
 8011780:	d006      	beq.n	8011790 <_dtoa_r+0x7a0>
 8011782:	ee18 1a10 	vmov	r1, s16
 8011786:	4620      	mov	r0, r4
 8011788:	f000 ffb0 	bl	80126ec <__pow5mult>
 801178c:	ee08 0a10 	vmov	s16, r0
 8011790:	2101      	movs	r1, #1
 8011792:	4620      	mov	r0, r4
 8011794:	f000 feea 	bl	801256c <__i2b>
 8011798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801179a:	2b00      	cmp	r3, #0
 801179c:	4606      	mov	r6, r0
 801179e:	f340 8088 	ble.w	80118b2 <_dtoa_r+0x8c2>
 80117a2:	461a      	mov	r2, r3
 80117a4:	4601      	mov	r1, r0
 80117a6:	4620      	mov	r0, r4
 80117a8:	f000 ffa0 	bl	80126ec <__pow5mult>
 80117ac:	9b06      	ldr	r3, [sp, #24]
 80117ae:	2b01      	cmp	r3, #1
 80117b0:	4606      	mov	r6, r0
 80117b2:	f340 8081 	ble.w	80118b8 <_dtoa_r+0x8c8>
 80117b6:	f04f 0800 	mov.w	r8, #0
 80117ba:	6933      	ldr	r3, [r6, #16]
 80117bc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80117c0:	6918      	ldr	r0, [r3, #16]
 80117c2:	f000 fe83 	bl	80124cc <__hi0bits>
 80117c6:	f1c0 0020 	rsb	r0, r0, #32
 80117ca:	9b05      	ldr	r3, [sp, #20]
 80117cc:	4418      	add	r0, r3
 80117ce:	f010 001f 	ands.w	r0, r0, #31
 80117d2:	f000 8092 	beq.w	80118fa <_dtoa_r+0x90a>
 80117d6:	f1c0 0320 	rsb	r3, r0, #32
 80117da:	2b04      	cmp	r3, #4
 80117dc:	f340 808a 	ble.w	80118f4 <_dtoa_r+0x904>
 80117e0:	f1c0 001c 	rsb	r0, r0, #28
 80117e4:	9b04      	ldr	r3, [sp, #16]
 80117e6:	4403      	add	r3, r0
 80117e8:	9304      	str	r3, [sp, #16]
 80117ea:	9b05      	ldr	r3, [sp, #20]
 80117ec:	4403      	add	r3, r0
 80117ee:	4405      	add	r5, r0
 80117f0:	9305      	str	r3, [sp, #20]
 80117f2:	9b04      	ldr	r3, [sp, #16]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dd07      	ble.n	8011808 <_dtoa_r+0x818>
 80117f8:	ee18 1a10 	vmov	r1, s16
 80117fc:	461a      	mov	r2, r3
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 ffce 	bl	80127a0 <__lshift>
 8011804:	ee08 0a10 	vmov	s16, r0
 8011808:	9b05      	ldr	r3, [sp, #20]
 801180a:	2b00      	cmp	r3, #0
 801180c:	dd05      	ble.n	801181a <_dtoa_r+0x82a>
 801180e:	4631      	mov	r1, r6
 8011810:	461a      	mov	r2, r3
 8011812:	4620      	mov	r0, r4
 8011814:	f000 ffc4 	bl	80127a0 <__lshift>
 8011818:	4606      	mov	r6, r0
 801181a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801181c:	2b00      	cmp	r3, #0
 801181e:	d06e      	beq.n	80118fe <_dtoa_r+0x90e>
 8011820:	ee18 0a10 	vmov	r0, s16
 8011824:	4631      	mov	r1, r6
 8011826:	f001 f82b 	bl	8012880 <__mcmp>
 801182a:	2800      	cmp	r0, #0
 801182c:	da67      	bge.n	80118fe <_dtoa_r+0x90e>
 801182e:	9b00      	ldr	r3, [sp, #0]
 8011830:	3b01      	subs	r3, #1
 8011832:	ee18 1a10 	vmov	r1, s16
 8011836:	9300      	str	r3, [sp, #0]
 8011838:	220a      	movs	r2, #10
 801183a:	2300      	movs	r3, #0
 801183c:	4620      	mov	r0, r4
 801183e:	f000 fdb5 	bl	80123ac <__multadd>
 8011842:	9b08      	ldr	r3, [sp, #32]
 8011844:	ee08 0a10 	vmov	s16, r0
 8011848:	2b00      	cmp	r3, #0
 801184a:	f000 81b1 	beq.w	8011bb0 <_dtoa_r+0xbc0>
 801184e:	2300      	movs	r3, #0
 8011850:	4639      	mov	r1, r7
 8011852:	220a      	movs	r2, #10
 8011854:	4620      	mov	r0, r4
 8011856:	f000 fda9 	bl	80123ac <__multadd>
 801185a:	9b02      	ldr	r3, [sp, #8]
 801185c:	2b00      	cmp	r3, #0
 801185e:	4607      	mov	r7, r0
 8011860:	f300 808e 	bgt.w	8011980 <_dtoa_r+0x990>
 8011864:	9b06      	ldr	r3, [sp, #24]
 8011866:	2b02      	cmp	r3, #2
 8011868:	dc51      	bgt.n	801190e <_dtoa_r+0x91e>
 801186a:	e089      	b.n	8011980 <_dtoa_r+0x990>
 801186c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801186e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011872:	e74b      	b.n	801170c <_dtoa_r+0x71c>
 8011874:	9b03      	ldr	r3, [sp, #12]
 8011876:	1e5e      	subs	r6, r3, #1
 8011878:	9b07      	ldr	r3, [sp, #28]
 801187a:	42b3      	cmp	r3, r6
 801187c:	bfbf      	itttt	lt
 801187e:	9b07      	ldrlt	r3, [sp, #28]
 8011880:	9607      	strlt	r6, [sp, #28]
 8011882:	1af2      	sublt	r2, r6, r3
 8011884:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8011886:	bfb6      	itet	lt
 8011888:	189b      	addlt	r3, r3, r2
 801188a:	1b9e      	subge	r6, r3, r6
 801188c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801188e:	9b03      	ldr	r3, [sp, #12]
 8011890:	bfb8      	it	lt
 8011892:	2600      	movlt	r6, #0
 8011894:	2b00      	cmp	r3, #0
 8011896:	bfb7      	itett	lt
 8011898:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801189c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80118a0:	1a9d      	sublt	r5, r3, r2
 80118a2:	2300      	movlt	r3, #0
 80118a4:	e734      	b.n	8011710 <_dtoa_r+0x720>
 80118a6:	9e07      	ldr	r6, [sp, #28]
 80118a8:	9d04      	ldr	r5, [sp, #16]
 80118aa:	9f08      	ldr	r7, [sp, #32]
 80118ac:	e73b      	b.n	8011726 <_dtoa_r+0x736>
 80118ae:	9a07      	ldr	r2, [sp, #28]
 80118b0:	e767      	b.n	8011782 <_dtoa_r+0x792>
 80118b2:	9b06      	ldr	r3, [sp, #24]
 80118b4:	2b01      	cmp	r3, #1
 80118b6:	dc18      	bgt.n	80118ea <_dtoa_r+0x8fa>
 80118b8:	f1ba 0f00 	cmp.w	sl, #0
 80118bc:	d115      	bne.n	80118ea <_dtoa_r+0x8fa>
 80118be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118c2:	b993      	cbnz	r3, 80118ea <_dtoa_r+0x8fa>
 80118c4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118c8:	0d1b      	lsrs	r3, r3, #20
 80118ca:	051b      	lsls	r3, r3, #20
 80118cc:	b183      	cbz	r3, 80118f0 <_dtoa_r+0x900>
 80118ce:	9b04      	ldr	r3, [sp, #16]
 80118d0:	3301      	adds	r3, #1
 80118d2:	9304      	str	r3, [sp, #16]
 80118d4:	9b05      	ldr	r3, [sp, #20]
 80118d6:	3301      	adds	r3, #1
 80118d8:	9305      	str	r3, [sp, #20]
 80118da:	f04f 0801 	mov.w	r8, #1
 80118de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f47f af6a 	bne.w	80117ba <_dtoa_r+0x7ca>
 80118e6:	2001      	movs	r0, #1
 80118e8:	e76f      	b.n	80117ca <_dtoa_r+0x7da>
 80118ea:	f04f 0800 	mov.w	r8, #0
 80118ee:	e7f6      	b.n	80118de <_dtoa_r+0x8ee>
 80118f0:	4698      	mov	r8, r3
 80118f2:	e7f4      	b.n	80118de <_dtoa_r+0x8ee>
 80118f4:	f43f af7d 	beq.w	80117f2 <_dtoa_r+0x802>
 80118f8:	4618      	mov	r0, r3
 80118fa:	301c      	adds	r0, #28
 80118fc:	e772      	b.n	80117e4 <_dtoa_r+0x7f4>
 80118fe:	9b03      	ldr	r3, [sp, #12]
 8011900:	2b00      	cmp	r3, #0
 8011902:	dc37      	bgt.n	8011974 <_dtoa_r+0x984>
 8011904:	9b06      	ldr	r3, [sp, #24]
 8011906:	2b02      	cmp	r3, #2
 8011908:	dd34      	ble.n	8011974 <_dtoa_r+0x984>
 801190a:	9b03      	ldr	r3, [sp, #12]
 801190c:	9302      	str	r3, [sp, #8]
 801190e:	9b02      	ldr	r3, [sp, #8]
 8011910:	b96b      	cbnz	r3, 801192e <_dtoa_r+0x93e>
 8011912:	4631      	mov	r1, r6
 8011914:	2205      	movs	r2, #5
 8011916:	4620      	mov	r0, r4
 8011918:	f000 fd48 	bl	80123ac <__multadd>
 801191c:	4601      	mov	r1, r0
 801191e:	4606      	mov	r6, r0
 8011920:	ee18 0a10 	vmov	r0, s16
 8011924:	f000 ffac 	bl	8012880 <__mcmp>
 8011928:	2800      	cmp	r0, #0
 801192a:	f73f adbb 	bgt.w	80114a4 <_dtoa_r+0x4b4>
 801192e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011930:	9d01      	ldr	r5, [sp, #4]
 8011932:	43db      	mvns	r3, r3
 8011934:	9300      	str	r3, [sp, #0]
 8011936:	f04f 0800 	mov.w	r8, #0
 801193a:	4631      	mov	r1, r6
 801193c:	4620      	mov	r0, r4
 801193e:	f000 fd13 	bl	8012368 <_Bfree>
 8011942:	2f00      	cmp	r7, #0
 8011944:	f43f aea4 	beq.w	8011690 <_dtoa_r+0x6a0>
 8011948:	f1b8 0f00 	cmp.w	r8, #0
 801194c:	d005      	beq.n	801195a <_dtoa_r+0x96a>
 801194e:	45b8      	cmp	r8, r7
 8011950:	d003      	beq.n	801195a <_dtoa_r+0x96a>
 8011952:	4641      	mov	r1, r8
 8011954:	4620      	mov	r0, r4
 8011956:	f000 fd07 	bl	8012368 <_Bfree>
 801195a:	4639      	mov	r1, r7
 801195c:	4620      	mov	r0, r4
 801195e:	f000 fd03 	bl	8012368 <_Bfree>
 8011962:	e695      	b.n	8011690 <_dtoa_r+0x6a0>
 8011964:	2600      	movs	r6, #0
 8011966:	4637      	mov	r7, r6
 8011968:	e7e1      	b.n	801192e <_dtoa_r+0x93e>
 801196a:	9700      	str	r7, [sp, #0]
 801196c:	4637      	mov	r7, r6
 801196e:	e599      	b.n	80114a4 <_dtoa_r+0x4b4>
 8011970:	40240000 	.word	0x40240000
 8011974:	9b08      	ldr	r3, [sp, #32]
 8011976:	2b00      	cmp	r3, #0
 8011978:	f000 80ca 	beq.w	8011b10 <_dtoa_r+0xb20>
 801197c:	9b03      	ldr	r3, [sp, #12]
 801197e:	9302      	str	r3, [sp, #8]
 8011980:	2d00      	cmp	r5, #0
 8011982:	dd05      	ble.n	8011990 <_dtoa_r+0x9a0>
 8011984:	4639      	mov	r1, r7
 8011986:	462a      	mov	r2, r5
 8011988:	4620      	mov	r0, r4
 801198a:	f000 ff09 	bl	80127a0 <__lshift>
 801198e:	4607      	mov	r7, r0
 8011990:	f1b8 0f00 	cmp.w	r8, #0
 8011994:	d05b      	beq.n	8011a4e <_dtoa_r+0xa5e>
 8011996:	6879      	ldr	r1, [r7, #4]
 8011998:	4620      	mov	r0, r4
 801199a:	f000 fca5 	bl	80122e8 <_Balloc>
 801199e:	4605      	mov	r5, r0
 80119a0:	b928      	cbnz	r0, 80119ae <_dtoa_r+0x9be>
 80119a2:	4b87      	ldr	r3, [pc, #540]	; (8011bc0 <_dtoa_r+0xbd0>)
 80119a4:	4602      	mov	r2, r0
 80119a6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80119aa:	f7ff bb3b 	b.w	8011024 <_dtoa_r+0x34>
 80119ae:	693a      	ldr	r2, [r7, #16]
 80119b0:	3202      	adds	r2, #2
 80119b2:	0092      	lsls	r2, r2, #2
 80119b4:	f107 010c 	add.w	r1, r7, #12
 80119b8:	300c      	adds	r0, #12
 80119ba:	f7fd fd2b 	bl	800f414 <memcpy>
 80119be:	2201      	movs	r2, #1
 80119c0:	4629      	mov	r1, r5
 80119c2:	4620      	mov	r0, r4
 80119c4:	f000 feec 	bl	80127a0 <__lshift>
 80119c8:	9b01      	ldr	r3, [sp, #4]
 80119ca:	f103 0901 	add.w	r9, r3, #1
 80119ce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80119d2:	4413      	add	r3, r2
 80119d4:	9305      	str	r3, [sp, #20]
 80119d6:	f00a 0301 	and.w	r3, sl, #1
 80119da:	46b8      	mov	r8, r7
 80119dc:	9304      	str	r3, [sp, #16]
 80119de:	4607      	mov	r7, r0
 80119e0:	4631      	mov	r1, r6
 80119e2:	ee18 0a10 	vmov	r0, s16
 80119e6:	f7ff fa77 	bl	8010ed8 <quorem>
 80119ea:	4641      	mov	r1, r8
 80119ec:	9002      	str	r0, [sp, #8]
 80119ee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80119f2:	ee18 0a10 	vmov	r0, s16
 80119f6:	f000 ff43 	bl	8012880 <__mcmp>
 80119fa:	463a      	mov	r2, r7
 80119fc:	9003      	str	r0, [sp, #12]
 80119fe:	4631      	mov	r1, r6
 8011a00:	4620      	mov	r0, r4
 8011a02:	f000 ff59 	bl	80128b8 <__mdiff>
 8011a06:	68c2      	ldr	r2, [r0, #12]
 8011a08:	f109 3bff 	add.w	fp, r9, #4294967295
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	bb02      	cbnz	r2, 8011a52 <_dtoa_r+0xa62>
 8011a10:	4601      	mov	r1, r0
 8011a12:	ee18 0a10 	vmov	r0, s16
 8011a16:	f000 ff33 	bl	8012880 <__mcmp>
 8011a1a:	4602      	mov	r2, r0
 8011a1c:	4629      	mov	r1, r5
 8011a1e:	4620      	mov	r0, r4
 8011a20:	9207      	str	r2, [sp, #28]
 8011a22:	f000 fca1 	bl	8012368 <_Bfree>
 8011a26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8011a2a:	ea43 0102 	orr.w	r1, r3, r2
 8011a2e:	9b04      	ldr	r3, [sp, #16]
 8011a30:	430b      	orrs	r3, r1
 8011a32:	464d      	mov	r5, r9
 8011a34:	d10f      	bne.n	8011a56 <_dtoa_r+0xa66>
 8011a36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a3a:	d02a      	beq.n	8011a92 <_dtoa_r+0xaa2>
 8011a3c:	9b03      	ldr	r3, [sp, #12]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	dd02      	ble.n	8011a48 <_dtoa_r+0xa58>
 8011a42:	9b02      	ldr	r3, [sp, #8]
 8011a44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8011a48:	f88b a000 	strb.w	sl, [fp]
 8011a4c:	e775      	b.n	801193a <_dtoa_r+0x94a>
 8011a4e:	4638      	mov	r0, r7
 8011a50:	e7ba      	b.n	80119c8 <_dtoa_r+0x9d8>
 8011a52:	2201      	movs	r2, #1
 8011a54:	e7e2      	b.n	8011a1c <_dtoa_r+0xa2c>
 8011a56:	9b03      	ldr	r3, [sp, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	db04      	blt.n	8011a66 <_dtoa_r+0xa76>
 8011a5c:	9906      	ldr	r1, [sp, #24]
 8011a5e:	430b      	orrs	r3, r1
 8011a60:	9904      	ldr	r1, [sp, #16]
 8011a62:	430b      	orrs	r3, r1
 8011a64:	d122      	bne.n	8011aac <_dtoa_r+0xabc>
 8011a66:	2a00      	cmp	r2, #0
 8011a68:	ddee      	ble.n	8011a48 <_dtoa_r+0xa58>
 8011a6a:	ee18 1a10 	vmov	r1, s16
 8011a6e:	2201      	movs	r2, #1
 8011a70:	4620      	mov	r0, r4
 8011a72:	f000 fe95 	bl	80127a0 <__lshift>
 8011a76:	4631      	mov	r1, r6
 8011a78:	ee08 0a10 	vmov	s16, r0
 8011a7c:	f000 ff00 	bl	8012880 <__mcmp>
 8011a80:	2800      	cmp	r0, #0
 8011a82:	dc03      	bgt.n	8011a8c <_dtoa_r+0xa9c>
 8011a84:	d1e0      	bne.n	8011a48 <_dtoa_r+0xa58>
 8011a86:	f01a 0f01 	tst.w	sl, #1
 8011a8a:	d0dd      	beq.n	8011a48 <_dtoa_r+0xa58>
 8011a8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011a90:	d1d7      	bne.n	8011a42 <_dtoa_r+0xa52>
 8011a92:	2339      	movs	r3, #57	; 0x39
 8011a94:	f88b 3000 	strb.w	r3, [fp]
 8011a98:	462b      	mov	r3, r5
 8011a9a:	461d      	mov	r5, r3
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8011aa2:	2a39      	cmp	r2, #57	; 0x39
 8011aa4:	d071      	beq.n	8011b8a <_dtoa_r+0xb9a>
 8011aa6:	3201      	adds	r2, #1
 8011aa8:	701a      	strb	r2, [r3, #0]
 8011aaa:	e746      	b.n	801193a <_dtoa_r+0x94a>
 8011aac:	2a00      	cmp	r2, #0
 8011aae:	dd07      	ble.n	8011ac0 <_dtoa_r+0xad0>
 8011ab0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8011ab4:	d0ed      	beq.n	8011a92 <_dtoa_r+0xaa2>
 8011ab6:	f10a 0301 	add.w	r3, sl, #1
 8011aba:	f88b 3000 	strb.w	r3, [fp]
 8011abe:	e73c      	b.n	801193a <_dtoa_r+0x94a>
 8011ac0:	9b05      	ldr	r3, [sp, #20]
 8011ac2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8011ac6:	4599      	cmp	r9, r3
 8011ac8:	d047      	beq.n	8011b5a <_dtoa_r+0xb6a>
 8011aca:	ee18 1a10 	vmov	r1, s16
 8011ace:	2300      	movs	r3, #0
 8011ad0:	220a      	movs	r2, #10
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	f000 fc6a 	bl	80123ac <__multadd>
 8011ad8:	45b8      	cmp	r8, r7
 8011ada:	ee08 0a10 	vmov	s16, r0
 8011ade:	f04f 0300 	mov.w	r3, #0
 8011ae2:	f04f 020a 	mov.w	r2, #10
 8011ae6:	4641      	mov	r1, r8
 8011ae8:	4620      	mov	r0, r4
 8011aea:	d106      	bne.n	8011afa <_dtoa_r+0xb0a>
 8011aec:	f000 fc5e 	bl	80123ac <__multadd>
 8011af0:	4680      	mov	r8, r0
 8011af2:	4607      	mov	r7, r0
 8011af4:	f109 0901 	add.w	r9, r9, #1
 8011af8:	e772      	b.n	80119e0 <_dtoa_r+0x9f0>
 8011afa:	f000 fc57 	bl	80123ac <__multadd>
 8011afe:	4639      	mov	r1, r7
 8011b00:	4680      	mov	r8, r0
 8011b02:	2300      	movs	r3, #0
 8011b04:	220a      	movs	r2, #10
 8011b06:	4620      	mov	r0, r4
 8011b08:	f000 fc50 	bl	80123ac <__multadd>
 8011b0c:	4607      	mov	r7, r0
 8011b0e:	e7f1      	b.n	8011af4 <_dtoa_r+0xb04>
 8011b10:	9b03      	ldr	r3, [sp, #12]
 8011b12:	9302      	str	r3, [sp, #8]
 8011b14:	9d01      	ldr	r5, [sp, #4]
 8011b16:	ee18 0a10 	vmov	r0, s16
 8011b1a:	4631      	mov	r1, r6
 8011b1c:	f7ff f9dc 	bl	8010ed8 <quorem>
 8011b20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8011b24:	9b01      	ldr	r3, [sp, #4]
 8011b26:	f805 ab01 	strb.w	sl, [r5], #1
 8011b2a:	1aea      	subs	r2, r5, r3
 8011b2c:	9b02      	ldr	r3, [sp, #8]
 8011b2e:	4293      	cmp	r3, r2
 8011b30:	dd09      	ble.n	8011b46 <_dtoa_r+0xb56>
 8011b32:	ee18 1a10 	vmov	r1, s16
 8011b36:	2300      	movs	r3, #0
 8011b38:	220a      	movs	r2, #10
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f000 fc36 	bl	80123ac <__multadd>
 8011b40:	ee08 0a10 	vmov	s16, r0
 8011b44:	e7e7      	b.n	8011b16 <_dtoa_r+0xb26>
 8011b46:	9b02      	ldr	r3, [sp, #8]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	bfc8      	it	gt
 8011b4c:	461d      	movgt	r5, r3
 8011b4e:	9b01      	ldr	r3, [sp, #4]
 8011b50:	bfd8      	it	le
 8011b52:	2501      	movle	r5, #1
 8011b54:	441d      	add	r5, r3
 8011b56:	f04f 0800 	mov.w	r8, #0
 8011b5a:	ee18 1a10 	vmov	r1, s16
 8011b5e:	2201      	movs	r2, #1
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 fe1d 	bl	80127a0 <__lshift>
 8011b66:	4631      	mov	r1, r6
 8011b68:	ee08 0a10 	vmov	s16, r0
 8011b6c:	f000 fe88 	bl	8012880 <__mcmp>
 8011b70:	2800      	cmp	r0, #0
 8011b72:	dc91      	bgt.n	8011a98 <_dtoa_r+0xaa8>
 8011b74:	d102      	bne.n	8011b7c <_dtoa_r+0xb8c>
 8011b76:	f01a 0f01 	tst.w	sl, #1
 8011b7a:	d18d      	bne.n	8011a98 <_dtoa_r+0xaa8>
 8011b7c:	462b      	mov	r3, r5
 8011b7e:	461d      	mov	r5, r3
 8011b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8011b84:	2a30      	cmp	r2, #48	; 0x30
 8011b86:	d0fa      	beq.n	8011b7e <_dtoa_r+0xb8e>
 8011b88:	e6d7      	b.n	801193a <_dtoa_r+0x94a>
 8011b8a:	9a01      	ldr	r2, [sp, #4]
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	d184      	bne.n	8011a9a <_dtoa_r+0xaaa>
 8011b90:	9b00      	ldr	r3, [sp, #0]
 8011b92:	3301      	adds	r3, #1
 8011b94:	9300      	str	r3, [sp, #0]
 8011b96:	2331      	movs	r3, #49	; 0x31
 8011b98:	7013      	strb	r3, [r2, #0]
 8011b9a:	e6ce      	b.n	801193a <_dtoa_r+0x94a>
 8011b9c:	4b09      	ldr	r3, [pc, #36]	; (8011bc4 <_dtoa_r+0xbd4>)
 8011b9e:	f7ff ba95 	b.w	80110cc <_dtoa_r+0xdc>
 8011ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	f47f aa6e 	bne.w	8011086 <_dtoa_r+0x96>
 8011baa:	4b07      	ldr	r3, [pc, #28]	; (8011bc8 <_dtoa_r+0xbd8>)
 8011bac:	f7ff ba8e 	b.w	80110cc <_dtoa_r+0xdc>
 8011bb0:	9b02      	ldr	r3, [sp, #8]
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	dcae      	bgt.n	8011b14 <_dtoa_r+0xb24>
 8011bb6:	9b06      	ldr	r3, [sp, #24]
 8011bb8:	2b02      	cmp	r3, #2
 8011bba:	f73f aea8 	bgt.w	801190e <_dtoa_r+0x91e>
 8011bbe:	e7a9      	b.n	8011b14 <_dtoa_r+0xb24>
 8011bc0:	08015b38 	.word	0x08015b38
 8011bc4:	0801593c 	.word	0x0801593c
 8011bc8:	08015ab9 	.word	0x08015ab9

08011bcc <rshift>:
 8011bcc:	6903      	ldr	r3, [r0, #16]
 8011bce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8011bd2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bd6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8011bda:	f100 0414 	add.w	r4, r0, #20
 8011bde:	dd45      	ble.n	8011c6c <rshift+0xa0>
 8011be0:	f011 011f 	ands.w	r1, r1, #31
 8011be4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8011be8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8011bec:	d10c      	bne.n	8011c08 <rshift+0x3c>
 8011bee:	f100 0710 	add.w	r7, r0, #16
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	42b1      	cmp	r1, r6
 8011bf6:	d334      	bcc.n	8011c62 <rshift+0x96>
 8011bf8:	1a9b      	subs	r3, r3, r2
 8011bfa:	009b      	lsls	r3, r3, #2
 8011bfc:	1eea      	subs	r2, r5, #3
 8011bfe:	4296      	cmp	r6, r2
 8011c00:	bf38      	it	cc
 8011c02:	2300      	movcc	r3, #0
 8011c04:	4423      	add	r3, r4
 8011c06:	e015      	b.n	8011c34 <rshift+0x68>
 8011c08:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8011c0c:	f1c1 0820 	rsb	r8, r1, #32
 8011c10:	40cf      	lsrs	r7, r1
 8011c12:	f105 0e04 	add.w	lr, r5, #4
 8011c16:	46a1      	mov	r9, r4
 8011c18:	4576      	cmp	r6, lr
 8011c1a:	46f4      	mov	ip, lr
 8011c1c:	d815      	bhi.n	8011c4a <rshift+0x7e>
 8011c1e:	1a9a      	subs	r2, r3, r2
 8011c20:	0092      	lsls	r2, r2, #2
 8011c22:	3a04      	subs	r2, #4
 8011c24:	3501      	adds	r5, #1
 8011c26:	42ae      	cmp	r6, r5
 8011c28:	bf38      	it	cc
 8011c2a:	2200      	movcc	r2, #0
 8011c2c:	18a3      	adds	r3, r4, r2
 8011c2e:	50a7      	str	r7, [r4, r2]
 8011c30:	b107      	cbz	r7, 8011c34 <rshift+0x68>
 8011c32:	3304      	adds	r3, #4
 8011c34:	1b1a      	subs	r2, r3, r4
 8011c36:	42a3      	cmp	r3, r4
 8011c38:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8011c3c:	bf08      	it	eq
 8011c3e:	2300      	moveq	r3, #0
 8011c40:	6102      	str	r2, [r0, #16]
 8011c42:	bf08      	it	eq
 8011c44:	6143      	streq	r3, [r0, #20]
 8011c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011c4a:	f8dc c000 	ldr.w	ip, [ip]
 8011c4e:	fa0c fc08 	lsl.w	ip, ip, r8
 8011c52:	ea4c 0707 	orr.w	r7, ip, r7
 8011c56:	f849 7b04 	str.w	r7, [r9], #4
 8011c5a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011c5e:	40cf      	lsrs	r7, r1
 8011c60:	e7da      	b.n	8011c18 <rshift+0x4c>
 8011c62:	f851 cb04 	ldr.w	ip, [r1], #4
 8011c66:	f847 cf04 	str.w	ip, [r7, #4]!
 8011c6a:	e7c3      	b.n	8011bf4 <rshift+0x28>
 8011c6c:	4623      	mov	r3, r4
 8011c6e:	e7e1      	b.n	8011c34 <rshift+0x68>

08011c70 <__hexdig_fun>:
 8011c70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8011c74:	2b09      	cmp	r3, #9
 8011c76:	d802      	bhi.n	8011c7e <__hexdig_fun+0xe>
 8011c78:	3820      	subs	r0, #32
 8011c7a:	b2c0      	uxtb	r0, r0
 8011c7c:	4770      	bx	lr
 8011c7e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8011c82:	2b05      	cmp	r3, #5
 8011c84:	d801      	bhi.n	8011c8a <__hexdig_fun+0x1a>
 8011c86:	3847      	subs	r0, #71	; 0x47
 8011c88:	e7f7      	b.n	8011c7a <__hexdig_fun+0xa>
 8011c8a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8011c8e:	2b05      	cmp	r3, #5
 8011c90:	d801      	bhi.n	8011c96 <__hexdig_fun+0x26>
 8011c92:	3827      	subs	r0, #39	; 0x27
 8011c94:	e7f1      	b.n	8011c7a <__hexdig_fun+0xa>
 8011c96:	2000      	movs	r0, #0
 8011c98:	4770      	bx	lr
	...

08011c9c <__gethex>:
 8011c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ca0:	ed2d 8b02 	vpush	{d8}
 8011ca4:	b089      	sub	sp, #36	; 0x24
 8011ca6:	ee08 0a10 	vmov	s16, r0
 8011caa:	9304      	str	r3, [sp, #16]
 8011cac:	4bb4      	ldr	r3, [pc, #720]	; (8011f80 <__gethex+0x2e4>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	9301      	str	r3, [sp, #4]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	468b      	mov	fp, r1
 8011cb6:	4690      	mov	r8, r2
 8011cb8:	f7ee fa9a 	bl	80001f0 <strlen>
 8011cbc:	9b01      	ldr	r3, [sp, #4]
 8011cbe:	f8db 2000 	ldr.w	r2, [fp]
 8011cc2:	4403      	add	r3, r0
 8011cc4:	4682      	mov	sl, r0
 8011cc6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8011cca:	9305      	str	r3, [sp, #20]
 8011ccc:	1c93      	adds	r3, r2, #2
 8011cce:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8011cd2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8011cd6:	32fe      	adds	r2, #254	; 0xfe
 8011cd8:	18d1      	adds	r1, r2, r3
 8011cda:	461f      	mov	r7, r3
 8011cdc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8011ce0:	9100      	str	r1, [sp, #0]
 8011ce2:	2830      	cmp	r0, #48	; 0x30
 8011ce4:	d0f8      	beq.n	8011cd8 <__gethex+0x3c>
 8011ce6:	f7ff ffc3 	bl	8011c70 <__hexdig_fun>
 8011cea:	4604      	mov	r4, r0
 8011cec:	2800      	cmp	r0, #0
 8011cee:	d13a      	bne.n	8011d66 <__gethex+0xca>
 8011cf0:	9901      	ldr	r1, [sp, #4]
 8011cf2:	4652      	mov	r2, sl
 8011cf4:	4638      	mov	r0, r7
 8011cf6:	f001 fa23 	bl	8013140 <strncmp>
 8011cfa:	4605      	mov	r5, r0
 8011cfc:	2800      	cmp	r0, #0
 8011cfe:	d168      	bne.n	8011dd2 <__gethex+0x136>
 8011d00:	f817 000a 	ldrb.w	r0, [r7, sl]
 8011d04:	eb07 060a 	add.w	r6, r7, sl
 8011d08:	f7ff ffb2 	bl	8011c70 <__hexdig_fun>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d062      	beq.n	8011dd6 <__gethex+0x13a>
 8011d10:	4633      	mov	r3, r6
 8011d12:	7818      	ldrb	r0, [r3, #0]
 8011d14:	2830      	cmp	r0, #48	; 0x30
 8011d16:	461f      	mov	r7, r3
 8011d18:	f103 0301 	add.w	r3, r3, #1
 8011d1c:	d0f9      	beq.n	8011d12 <__gethex+0x76>
 8011d1e:	f7ff ffa7 	bl	8011c70 <__hexdig_fun>
 8011d22:	2301      	movs	r3, #1
 8011d24:	fab0 f480 	clz	r4, r0
 8011d28:	0964      	lsrs	r4, r4, #5
 8011d2a:	4635      	mov	r5, r6
 8011d2c:	9300      	str	r3, [sp, #0]
 8011d2e:	463a      	mov	r2, r7
 8011d30:	4616      	mov	r6, r2
 8011d32:	3201      	adds	r2, #1
 8011d34:	7830      	ldrb	r0, [r6, #0]
 8011d36:	f7ff ff9b 	bl	8011c70 <__hexdig_fun>
 8011d3a:	2800      	cmp	r0, #0
 8011d3c:	d1f8      	bne.n	8011d30 <__gethex+0x94>
 8011d3e:	9901      	ldr	r1, [sp, #4]
 8011d40:	4652      	mov	r2, sl
 8011d42:	4630      	mov	r0, r6
 8011d44:	f001 f9fc 	bl	8013140 <strncmp>
 8011d48:	b980      	cbnz	r0, 8011d6c <__gethex+0xd0>
 8011d4a:	b94d      	cbnz	r5, 8011d60 <__gethex+0xc4>
 8011d4c:	eb06 050a 	add.w	r5, r6, sl
 8011d50:	462a      	mov	r2, r5
 8011d52:	4616      	mov	r6, r2
 8011d54:	3201      	adds	r2, #1
 8011d56:	7830      	ldrb	r0, [r6, #0]
 8011d58:	f7ff ff8a 	bl	8011c70 <__hexdig_fun>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	d1f8      	bne.n	8011d52 <__gethex+0xb6>
 8011d60:	1bad      	subs	r5, r5, r6
 8011d62:	00ad      	lsls	r5, r5, #2
 8011d64:	e004      	b.n	8011d70 <__gethex+0xd4>
 8011d66:	2400      	movs	r4, #0
 8011d68:	4625      	mov	r5, r4
 8011d6a:	e7e0      	b.n	8011d2e <__gethex+0x92>
 8011d6c:	2d00      	cmp	r5, #0
 8011d6e:	d1f7      	bne.n	8011d60 <__gethex+0xc4>
 8011d70:	7833      	ldrb	r3, [r6, #0]
 8011d72:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011d76:	2b50      	cmp	r3, #80	; 0x50
 8011d78:	d13b      	bne.n	8011df2 <__gethex+0x156>
 8011d7a:	7873      	ldrb	r3, [r6, #1]
 8011d7c:	2b2b      	cmp	r3, #43	; 0x2b
 8011d7e:	d02c      	beq.n	8011dda <__gethex+0x13e>
 8011d80:	2b2d      	cmp	r3, #45	; 0x2d
 8011d82:	d02e      	beq.n	8011de2 <__gethex+0x146>
 8011d84:	1c71      	adds	r1, r6, #1
 8011d86:	f04f 0900 	mov.w	r9, #0
 8011d8a:	7808      	ldrb	r0, [r1, #0]
 8011d8c:	f7ff ff70 	bl	8011c70 <__hexdig_fun>
 8011d90:	1e43      	subs	r3, r0, #1
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	2b18      	cmp	r3, #24
 8011d96:	d82c      	bhi.n	8011df2 <__gethex+0x156>
 8011d98:	f1a0 0210 	sub.w	r2, r0, #16
 8011d9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8011da0:	f7ff ff66 	bl	8011c70 <__hexdig_fun>
 8011da4:	1e43      	subs	r3, r0, #1
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b18      	cmp	r3, #24
 8011daa:	d91d      	bls.n	8011de8 <__gethex+0x14c>
 8011dac:	f1b9 0f00 	cmp.w	r9, #0
 8011db0:	d000      	beq.n	8011db4 <__gethex+0x118>
 8011db2:	4252      	negs	r2, r2
 8011db4:	4415      	add	r5, r2
 8011db6:	f8cb 1000 	str.w	r1, [fp]
 8011dba:	b1e4      	cbz	r4, 8011df6 <__gethex+0x15a>
 8011dbc:	9b00      	ldr	r3, [sp, #0]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	bf14      	ite	ne
 8011dc2:	2700      	movne	r7, #0
 8011dc4:	2706      	moveq	r7, #6
 8011dc6:	4638      	mov	r0, r7
 8011dc8:	b009      	add	sp, #36	; 0x24
 8011dca:	ecbd 8b02 	vpop	{d8}
 8011dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd2:	463e      	mov	r6, r7
 8011dd4:	4625      	mov	r5, r4
 8011dd6:	2401      	movs	r4, #1
 8011dd8:	e7ca      	b.n	8011d70 <__gethex+0xd4>
 8011dda:	f04f 0900 	mov.w	r9, #0
 8011dde:	1cb1      	adds	r1, r6, #2
 8011de0:	e7d3      	b.n	8011d8a <__gethex+0xee>
 8011de2:	f04f 0901 	mov.w	r9, #1
 8011de6:	e7fa      	b.n	8011dde <__gethex+0x142>
 8011de8:	230a      	movs	r3, #10
 8011dea:	fb03 0202 	mla	r2, r3, r2, r0
 8011dee:	3a10      	subs	r2, #16
 8011df0:	e7d4      	b.n	8011d9c <__gethex+0x100>
 8011df2:	4631      	mov	r1, r6
 8011df4:	e7df      	b.n	8011db6 <__gethex+0x11a>
 8011df6:	1bf3      	subs	r3, r6, r7
 8011df8:	3b01      	subs	r3, #1
 8011dfa:	4621      	mov	r1, r4
 8011dfc:	2b07      	cmp	r3, #7
 8011dfe:	dc0b      	bgt.n	8011e18 <__gethex+0x17c>
 8011e00:	ee18 0a10 	vmov	r0, s16
 8011e04:	f000 fa70 	bl	80122e8 <_Balloc>
 8011e08:	4604      	mov	r4, r0
 8011e0a:	b940      	cbnz	r0, 8011e1e <__gethex+0x182>
 8011e0c:	4b5d      	ldr	r3, [pc, #372]	; (8011f84 <__gethex+0x2e8>)
 8011e0e:	4602      	mov	r2, r0
 8011e10:	21de      	movs	r1, #222	; 0xde
 8011e12:	485d      	ldr	r0, [pc, #372]	; (8011f88 <__gethex+0x2ec>)
 8011e14:	f001 f9b6 	bl	8013184 <__assert_func>
 8011e18:	3101      	adds	r1, #1
 8011e1a:	105b      	asrs	r3, r3, #1
 8011e1c:	e7ee      	b.n	8011dfc <__gethex+0x160>
 8011e1e:	f100 0914 	add.w	r9, r0, #20
 8011e22:	f04f 0b00 	mov.w	fp, #0
 8011e26:	f1ca 0301 	rsb	r3, sl, #1
 8011e2a:	f8cd 9008 	str.w	r9, [sp, #8]
 8011e2e:	f8cd b000 	str.w	fp, [sp]
 8011e32:	9306      	str	r3, [sp, #24]
 8011e34:	42b7      	cmp	r7, r6
 8011e36:	d340      	bcc.n	8011eba <__gethex+0x21e>
 8011e38:	9802      	ldr	r0, [sp, #8]
 8011e3a:	9b00      	ldr	r3, [sp, #0]
 8011e3c:	f840 3b04 	str.w	r3, [r0], #4
 8011e40:	eba0 0009 	sub.w	r0, r0, r9
 8011e44:	1080      	asrs	r0, r0, #2
 8011e46:	0146      	lsls	r6, r0, #5
 8011e48:	6120      	str	r0, [r4, #16]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f000 fb3e 	bl	80124cc <__hi0bits>
 8011e50:	1a30      	subs	r0, r6, r0
 8011e52:	f8d8 6000 	ldr.w	r6, [r8]
 8011e56:	42b0      	cmp	r0, r6
 8011e58:	dd63      	ble.n	8011f22 <__gethex+0x286>
 8011e5a:	1b87      	subs	r7, r0, r6
 8011e5c:	4639      	mov	r1, r7
 8011e5e:	4620      	mov	r0, r4
 8011e60:	f000 fee2 	bl	8012c28 <__any_on>
 8011e64:	4682      	mov	sl, r0
 8011e66:	b1a8      	cbz	r0, 8011e94 <__gethex+0x1f8>
 8011e68:	1e7b      	subs	r3, r7, #1
 8011e6a:	1159      	asrs	r1, r3, #5
 8011e6c:	f003 021f 	and.w	r2, r3, #31
 8011e70:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011e74:	f04f 0a01 	mov.w	sl, #1
 8011e78:	fa0a f202 	lsl.w	r2, sl, r2
 8011e7c:	420a      	tst	r2, r1
 8011e7e:	d009      	beq.n	8011e94 <__gethex+0x1f8>
 8011e80:	4553      	cmp	r3, sl
 8011e82:	dd05      	ble.n	8011e90 <__gethex+0x1f4>
 8011e84:	1eb9      	subs	r1, r7, #2
 8011e86:	4620      	mov	r0, r4
 8011e88:	f000 fece 	bl	8012c28 <__any_on>
 8011e8c:	2800      	cmp	r0, #0
 8011e8e:	d145      	bne.n	8011f1c <__gethex+0x280>
 8011e90:	f04f 0a02 	mov.w	sl, #2
 8011e94:	4639      	mov	r1, r7
 8011e96:	4620      	mov	r0, r4
 8011e98:	f7ff fe98 	bl	8011bcc <rshift>
 8011e9c:	443d      	add	r5, r7
 8011e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011ea2:	42ab      	cmp	r3, r5
 8011ea4:	da4c      	bge.n	8011f40 <__gethex+0x2a4>
 8011ea6:	ee18 0a10 	vmov	r0, s16
 8011eaa:	4621      	mov	r1, r4
 8011eac:	f000 fa5c 	bl	8012368 <_Bfree>
 8011eb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	6013      	str	r3, [r2, #0]
 8011eb6:	27a3      	movs	r7, #163	; 0xa3
 8011eb8:	e785      	b.n	8011dc6 <__gethex+0x12a>
 8011eba:	1e73      	subs	r3, r6, #1
 8011ebc:	9a05      	ldr	r2, [sp, #20]
 8011ebe:	9303      	str	r3, [sp, #12]
 8011ec0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	d019      	beq.n	8011efc <__gethex+0x260>
 8011ec8:	f1bb 0f20 	cmp.w	fp, #32
 8011ecc:	d107      	bne.n	8011ede <__gethex+0x242>
 8011ece:	9b02      	ldr	r3, [sp, #8]
 8011ed0:	9a00      	ldr	r2, [sp, #0]
 8011ed2:	f843 2b04 	str.w	r2, [r3], #4
 8011ed6:	9302      	str	r3, [sp, #8]
 8011ed8:	2300      	movs	r3, #0
 8011eda:	9300      	str	r3, [sp, #0]
 8011edc:	469b      	mov	fp, r3
 8011ede:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8011ee2:	f7ff fec5 	bl	8011c70 <__hexdig_fun>
 8011ee6:	9b00      	ldr	r3, [sp, #0]
 8011ee8:	f000 000f 	and.w	r0, r0, #15
 8011eec:	fa00 f00b 	lsl.w	r0, r0, fp
 8011ef0:	4303      	orrs	r3, r0
 8011ef2:	9300      	str	r3, [sp, #0]
 8011ef4:	f10b 0b04 	add.w	fp, fp, #4
 8011ef8:	9b03      	ldr	r3, [sp, #12]
 8011efa:	e00d      	b.n	8011f18 <__gethex+0x27c>
 8011efc:	9b03      	ldr	r3, [sp, #12]
 8011efe:	9a06      	ldr	r2, [sp, #24]
 8011f00:	4413      	add	r3, r2
 8011f02:	42bb      	cmp	r3, r7
 8011f04:	d3e0      	bcc.n	8011ec8 <__gethex+0x22c>
 8011f06:	4618      	mov	r0, r3
 8011f08:	9901      	ldr	r1, [sp, #4]
 8011f0a:	9307      	str	r3, [sp, #28]
 8011f0c:	4652      	mov	r2, sl
 8011f0e:	f001 f917 	bl	8013140 <strncmp>
 8011f12:	9b07      	ldr	r3, [sp, #28]
 8011f14:	2800      	cmp	r0, #0
 8011f16:	d1d7      	bne.n	8011ec8 <__gethex+0x22c>
 8011f18:	461e      	mov	r6, r3
 8011f1a:	e78b      	b.n	8011e34 <__gethex+0x198>
 8011f1c:	f04f 0a03 	mov.w	sl, #3
 8011f20:	e7b8      	b.n	8011e94 <__gethex+0x1f8>
 8011f22:	da0a      	bge.n	8011f3a <__gethex+0x29e>
 8011f24:	1a37      	subs	r7, r6, r0
 8011f26:	4621      	mov	r1, r4
 8011f28:	ee18 0a10 	vmov	r0, s16
 8011f2c:	463a      	mov	r2, r7
 8011f2e:	f000 fc37 	bl	80127a0 <__lshift>
 8011f32:	1bed      	subs	r5, r5, r7
 8011f34:	4604      	mov	r4, r0
 8011f36:	f100 0914 	add.w	r9, r0, #20
 8011f3a:	f04f 0a00 	mov.w	sl, #0
 8011f3e:	e7ae      	b.n	8011e9e <__gethex+0x202>
 8011f40:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8011f44:	42a8      	cmp	r0, r5
 8011f46:	dd72      	ble.n	801202e <__gethex+0x392>
 8011f48:	1b45      	subs	r5, r0, r5
 8011f4a:	42ae      	cmp	r6, r5
 8011f4c:	dc36      	bgt.n	8011fbc <__gethex+0x320>
 8011f4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d02a      	beq.n	8011fac <__gethex+0x310>
 8011f56:	2b03      	cmp	r3, #3
 8011f58:	d02c      	beq.n	8011fb4 <__gethex+0x318>
 8011f5a:	2b01      	cmp	r3, #1
 8011f5c:	d11c      	bne.n	8011f98 <__gethex+0x2fc>
 8011f5e:	42ae      	cmp	r6, r5
 8011f60:	d11a      	bne.n	8011f98 <__gethex+0x2fc>
 8011f62:	2e01      	cmp	r6, #1
 8011f64:	d112      	bne.n	8011f8c <__gethex+0x2f0>
 8011f66:	9a04      	ldr	r2, [sp, #16]
 8011f68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011f6c:	6013      	str	r3, [r2, #0]
 8011f6e:	2301      	movs	r3, #1
 8011f70:	6123      	str	r3, [r4, #16]
 8011f72:	f8c9 3000 	str.w	r3, [r9]
 8011f76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f78:	2762      	movs	r7, #98	; 0x62
 8011f7a:	601c      	str	r4, [r3, #0]
 8011f7c:	e723      	b.n	8011dc6 <__gethex+0x12a>
 8011f7e:	bf00      	nop
 8011f80:	08015bb0 	.word	0x08015bb0
 8011f84:	08015b38 	.word	0x08015b38
 8011f88:	08015b49 	.word	0x08015b49
 8011f8c:	1e71      	subs	r1, r6, #1
 8011f8e:	4620      	mov	r0, r4
 8011f90:	f000 fe4a 	bl	8012c28 <__any_on>
 8011f94:	2800      	cmp	r0, #0
 8011f96:	d1e6      	bne.n	8011f66 <__gethex+0x2ca>
 8011f98:	ee18 0a10 	vmov	r0, s16
 8011f9c:	4621      	mov	r1, r4
 8011f9e:	f000 f9e3 	bl	8012368 <_Bfree>
 8011fa2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	6013      	str	r3, [r2, #0]
 8011fa8:	2750      	movs	r7, #80	; 0x50
 8011faa:	e70c      	b.n	8011dc6 <__gethex+0x12a>
 8011fac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d1f2      	bne.n	8011f98 <__gethex+0x2fc>
 8011fb2:	e7d8      	b.n	8011f66 <__gethex+0x2ca>
 8011fb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d1d5      	bne.n	8011f66 <__gethex+0x2ca>
 8011fba:	e7ed      	b.n	8011f98 <__gethex+0x2fc>
 8011fbc:	1e6f      	subs	r7, r5, #1
 8011fbe:	f1ba 0f00 	cmp.w	sl, #0
 8011fc2:	d131      	bne.n	8012028 <__gethex+0x38c>
 8011fc4:	b127      	cbz	r7, 8011fd0 <__gethex+0x334>
 8011fc6:	4639      	mov	r1, r7
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f000 fe2d 	bl	8012c28 <__any_on>
 8011fce:	4682      	mov	sl, r0
 8011fd0:	117b      	asrs	r3, r7, #5
 8011fd2:	2101      	movs	r1, #1
 8011fd4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011fd8:	f007 071f 	and.w	r7, r7, #31
 8011fdc:	fa01 f707 	lsl.w	r7, r1, r7
 8011fe0:	421f      	tst	r7, r3
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	4620      	mov	r0, r4
 8011fe6:	bf18      	it	ne
 8011fe8:	f04a 0a02 	orrne.w	sl, sl, #2
 8011fec:	1b76      	subs	r6, r6, r5
 8011fee:	f7ff fded 	bl	8011bcc <rshift>
 8011ff2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8011ff6:	2702      	movs	r7, #2
 8011ff8:	f1ba 0f00 	cmp.w	sl, #0
 8011ffc:	d048      	beq.n	8012090 <__gethex+0x3f4>
 8011ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012002:	2b02      	cmp	r3, #2
 8012004:	d015      	beq.n	8012032 <__gethex+0x396>
 8012006:	2b03      	cmp	r3, #3
 8012008:	d017      	beq.n	801203a <__gethex+0x39e>
 801200a:	2b01      	cmp	r3, #1
 801200c:	d109      	bne.n	8012022 <__gethex+0x386>
 801200e:	f01a 0f02 	tst.w	sl, #2
 8012012:	d006      	beq.n	8012022 <__gethex+0x386>
 8012014:	f8d9 0000 	ldr.w	r0, [r9]
 8012018:	ea4a 0a00 	orr.w	sl, sl, r0
 801201c:	f01a 0f01 	tst.w	sl, #1
 8012020:	d10e      	bne.n	8012040 <__gethex+0x3a4>
 8012022:	f047 0710 	orr.w	r7, r7, #16
 8012026:	e033      	b.n	8012090 <__gethex+0x3f4>
 8012028:	f04f 0a01 	mov.w	sl, #1
 801202c:	e7d0      	b.n	8011fd0 <__gethex+0x334>
 801202e:	2701      	movs	r7, #1
 8012030:	e7e2      	b.n	8011ff8 <__gethex+0x35c>
 8012032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012034:	f1c3 0301 	rsb	r3, r3, #1
 8012038:	9315      	str	r3, [sp, #84]	; 0x54
 801203a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801203c:	2b00      	cmp	r3, #0
 801203e:	d0f0      	beq.n	8012022 <__gethex+0x386>
 8012040:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012044:	f104 0314 	add.w	r3, r4, #20
 8012048:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801204c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012050:	f04f 0c00 	mov.w	ip, #0
 8012054:	4618      	mov	r0, r3
 8012056:	f853 2b04 	ldr.w	r2, [r3], #4
 801205a:	f1b2 3fff 	cmp.w	r2, #4294967295
 801205e:	d01c      	beq.n	801209a <__gethex+0x3fe>
 8012060:	3201      	adds	r2, #1
 8012062:	6002      	str	r2, [r0, #0]
 8012064:	2f02      	cmp	r7, #2
 8012066:	f104 0314 	add.w	r3, r4, #20
 801206a:	d13f      	bne.n	80120ec <__gethex+0x450>
 801206c:	f8d8 2000 	ldr.w	r2, [r8]
 8012070:	3a01      	subs	r2, #1
 8012072:	42b2      	cmp	r2, r6
 8012074:	d10a      	bne.n	801208c <__gethex+0x3f0>
 8012076:	1171      	asrs	r1, r6, #5
 8012078:	2201      	movs	r2, #1
 801207a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801207e:	f006 061f 	and.w	r6, r6, #31
 8012082:	fa02 f606 	lsl.w	r6, r2, r6
 8012086:	421e      	tst	r6, r3
 8012088:	bf18      	it	ne
 801208a:	4617      	movne	r7, r2
 801208c:	f047 0720 	orr.w	r7, r7, #32
 8012090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012092:	601c      	str	r4, [r3, #0]
 8012094:	9b04      	ldr	r3, [sp, #16]
 8012096:	601d      	str	r5, [r3, #0]
 8012098:	e695      	b.n	8011dc6 <__gethex+0x12a>
 801209a:	4299      	cmp	r1, r3
 801209c:	f843 cc04 	str.w	ip, [r3, #-4]
 80120a0:	d8d8      	bhi.n	8012054 <__gethex+0x3b8>
 80120a2:	68a3      	ldr	r3, [r4, #8]
 80120a4:	459b      	cmp	fp, r3
 80120a6:	db19      	blt.n	80120dc <__gethex+0x440>
 80120a8:	6861      	ldr	r1, [r4, #4]
 80120aa:	ee18 0a10 	vmov	r0, s16
 80120ae:	3101      	adds	r1, #1
 80120b0:	f000 f91a 	bl	80122e8 <_Balloc>
 80120b4:	4681      	mov	r9, r0
 80120b6:	b918      	cbnz	r0, 80120c0 <__gethex+0x424>
 80120b8:	4b1a      	ldr	r3, [pc, #104]	; (8012124 <__gethex+0x488>)
 80120ba:	4602      	mov	r2, r0
 80120bc:	2184      	movs	r1, #132	; 0x84
 80120be:	e6a8      	b.n	8011e12 <__gethex+0x176>
 80120c0:	6922      	ldr	r2, [r4, #16]
 80120c2:	3202      	adds	r2, #2
 80120c4:	f104 010c 	add.w	r1, r4, #12
 80120c8:	0092      	lsls	r2, r2, #2
 80120ca:	300c      	adds	r0, #12
 80120cc:	f7fd f9a2 	bl	800f414 <memcpy>
 80120d0:	4621      	mov	r1, r4
 80120d2:	ee18 0a10 	vmov	r0, s16
 80120d6:	f000 f947 	bl	8012368 <_Bfree>
 80120da:	464c      	mov	r4, r9
 80120dc:	6923      	ldr	r3, [r4, #16]
 80120de:	1c5a      	adds	r2, r3, #1
 80120e0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80120e4:	6122      	str	r2, [r4, #16]
 80120e6:	2201      	movs	r2, #1
 80120e8:	615a      	str	r2, [r3, #20]
 80120ea:	e7bb      	b.n	8012064 <__gethex+0x3c8>
 80120ec:	6922      	ldr	r2, [r4, #16]
 80120ee:	455a      	cmp	r2, fp
 80120f0:	dd0b      	ble.n	801210a <__gethex+0x46e>
 80120f2:	2101      	movs	r1, #1
 80120f4:	4620      	mov	r0, r4
 80120f6:	f7ff fd69 	bl	8011bcc <rshift>
 80120fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80120fe:	3501      	adds	r5, #1
 8012100:	42ab      	cmp	r3, r5
 8012102:	f6ff aed0 	blt.w	8011ea6 <__gethex+0x20a>
 8012106:	2701      	movs	r7, #1
 8012108:	e7c0      	b.n	801208c <__gethex+0x3f0>
 801210a:	f016 061f 	ands.w	r6, r6, #31
 801210e:	d0fa      	beq.n	8012106 <__gethex+0x46a>
 8012110:	4453      	add	r3, sl
 8012112:	f1c6 0620 	rsb	r6, r6, #32
 8012116:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801211a:	f000 f9d7 	bl	80124cc <__hi0bits>
 801211e:	42b0      	cmp	r0, r6
 8012120:	dbe7      	blt.n	80120f2 <__gethex+0x456>
 8012122:	e7f0      	b.n	8012106 <__gethex+0x46a>
 8012124:	08015b38 	.word	0x08015b38

08012128 <L_shift>:
 8012128:	f1c2 0208 	rsb	r2, r2, #8
 801212c:	0092      	lsls	r2, r2, #2
 801212e:	b570      	push	{r4, r5, r6, lr}
 8012130:	f1c2 0620 	rsb	r6, r2, #32
 8012134:	6843      	ldr	r3, [r0, #4]
 8012136:	6804      	ldr	r4, [r0, #0]
 8012138:	fa03 f506 	lsl.w	r5, r3, r6
 801213c:	432c      	orrs	r4, r5
 801213e:	40d3      	lsrs	r3, r2
 8012140:	6004      	str	r4, [r0, #0]
 8012142:	f840 3f04 	str.w	r3, [r0, #4]!
 8012146:	4288      	cmp	r0, r1
 8012148:	d3f4      	bcc.n	8012134 <L_shift+0xc>
 801214a:	bd70      	pop	{r4, r5, r6, pc}

0801214c <__match>:
 801214c:	b530      	push	{r4, r5, lr}
 801214e:	6803      	ldr	r3, [r0, #0]
 8012150:	3301      	adds	r3, #1
 8012152:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012156:	b914      	cbnz	r4, 801215e <__match+0x12>
 8012158:	6003      	str	r3, [r0, #0]
 801215a:	2001      	movs	r0, #1
 801215c:	bd30      	pop	{r4, r5, pc}
 801215e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012162:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8012166:	2d19      	cmp	r5, #25
 8012168:	bf98      	it	ls
 801216a:	3220      	addls	r2, #32
 801216c:	42a2      	cmp	r2, r4
 801216e:	d0f0      	beq.n	8012152 <__match+0x6>
 8012170:	2000      	movs	r0, #0
 8012172:	e7f3      	b.n	801215c <__match+0x10>

08012174 <__hexnan>:
 8012174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012178:	680b      	ldr	r3, [r1, #0]
 801217a:	115e      	asrs	r6, r3, #5
 801217c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012180:	f013 031f 	ands.w	r3, r3, #31
 8012184:	b087      	sub	sp, #28
 8012186:	bf18      	it	ne
 8012188:	3604      	addne	r6, #4
 801218a:	2500      	movs	r5, #0
 801218c:	1f37      	subs	r7, r6, #4
 801218e:	4690      	mov	r8, r2
 8012190:	6802      	ldr	r2, [r0, #0]
 8012192:	9301      	str	r3, [sp, #4]
 8012194:	4682      	mov	sl, r0
 8012196:	f846 5c04 	str.w	r5, [r6, #-4]
 801219a:	46b9      	mov	r9, r7
 801219c:	463c      	mov	r4, r7
 801219e:	9502      	str	r5, [sp, #8]
 80121a0:	46ab      	mov	fp, r5
 80121a2:	7851      	ldrb	r1, [r2, #1]
 80121a4:	1c53      	adds	r3, r2, #1
 80121a6:	9303      	str	r3, [sp, #12]
 80121a8:	b341      	cbz	r1, 80121fc <__hexnan+0x88>
 80121aa:	4608      	mov	r0, r1
 80121ac:	9205      	str	r2, [sp, #20]
 80121ae:	9104      	str	r1, [sp, #16]
 80121b0:	f7ff fd5e 	bl	8011c70 <__hexdig_fun>
 80121b4:	2800      	cmp	r0, #0
 80121b6:	d14f      	bne.n	8012258 <__hexnan+0xe4>
 80121b8:	9904      	ldr	r1, [sp, #16]
 80121ba:	9a05      	ldr	r2, [sp, #20]
 80121bc:	2920      	cmp	r1, #32
 80121be:	d818      	bhi.n	80121f2 <__hexnan+0x7e>
 80121c0:	9b02      	ldr	r3, [sp, #8]
 80121c2:	459b      	cmp	fp, r3
 80121c4:	dd13      	ble.n	80121ee <__hexnan+0x7a>
 80121c6:	454c      	cmp	r4, r9
 80121c8:	d206      	bcs.n	80121d8 <__hexnan+0x64>
 80121ca:	2d07      	cmp	r5, #7
 80121cc:	dc04      	bgt.n	80121d8 <__hexnan+0x64>
 80121ce:	462a      	mov	r2, r5
 80121d0:	4649      	mov	r1, r9
 80121d2:	4620      	mov	r0, r4
 80121d4:	f7ff ffa8 	bl	8012128 <L_shift>
 80121d8:	4544      	cmp	r4, r8
 80121da:	d950      	bls.n	801227e <__hexnan+0x10a>
 80121dc:	2300      	movs	r3, #0
 80121de:	f1a4 0904 	sub.w	r9, r4, #4
 80121e2:	f844 3c04 	str.w	r3, [r4, #-4]
 80121e6:	f8cd b008 	str.w	fp, [sp, #8]
 80121ea:	464c      	mov	r4, r9
 80121ec:	461d      	mov	r5, r3
 80121ee:	9a03      	ldr	r2, [sp, #12]
 80121f0:	e7d7      	b.n	80121a2 <__hexnan+0x2e>
 80121f2:	2929      	cmp	r1, #41	; 0x29
 80121f4:	d156      	bne.n	80122a4 <__hexnan+0x130>
 80121f6:	3202      	adds	r2, #2
 80121f8:	f8ca 2000 	str.w	r2, [sl]
 80121fc:	f1bb 0f00 	cmp.w	fp, #0
 8012200:	d050      	beq.n	80122a4 <__hexnan+0x130>
 8012202:	454c      	cmp	r4, r9
 8012204:	d206      	bcs.n	8012214 <__hexnan+0xa0>
 8012206:	2d07      	cmp	r5, #7
 8012208:	dc04      	bgt.n	8012214 <__hexnan+0xa0>
 801220a:	462a      	mov	r2, r5
 801220c:	4649      	mov	r1, r9
 801220e:	4620      	mov	r0, r4
 8012210:	f7ff ff8a 	bl	8012128 <L_shift>
 8012214:	4544      	cmp	r4, r8
 8012216:	d934      	bls.n	8012282 <__hexnan+0x10e>
 8012218:	f1a8 0204 	sub.w	r2, r8, #4
 801221c:	4623      	mov	r3, r4
 801221e:	f853 1b04 	ldr.w	r1, [r3], #4
 8012222:	f842 1f04 	str.w	r1, [r2, #4]!
 8012226:	429f      	cmp	r7, r3
 8012228:	d2f9      	bcs.n	801221e <__hexnan+0xaa>
 801222a:	1b3b      	subs	r3, r7, r4
 801222c:	f023 0303 	bic.w	r3, r3, #3
 8012230:	3304      	adds	r3, #4
 8012232:	3401      	adds	r4, #1
 8012234:	3e03      	subs	r6, #3
 8012236:	42b4      	cmp	r4, r6
 8012238:	bf88      	it	hi
 801223a:	2304      	movhi	r3, #4
 801223c:	4443      	add	r3, r8
 801223e:	2200      	movs	r2, #0
 8012240:	f843 2b04 	str.w	r2, [r3], #4
 8012244:	429f      	cmp	r7, r3
 8012246:	d2fb      	bcs.n	8012240 <__hexnan+0xcc>
 8012248:	683b      	ldr	r3, [r7, #0]
 801224a:	b91b      	cbnz	r3, 8012254 <__hexnan+0xe0>
 801224c:	4547      	cmp	r7, r8
 801224e:	d127      	bne.n	80122a0 <__hexnan+0x12c>
 8012250:	2301      	movs	r3, #1
 8012252:	603b      	str	r3, [r7, #0]
 8012254:	2005      	movs	r0, #5
 8012256:	e026      	b.n	80122a6 <__hexnan+0x132>
 8012258:	3501      	adds	r5, #1
 801225a:	2d08      	cmp	r5, #8
 801225c:	f10b 0b01 	add.w	fp, fp, #1
 8012260:	dd06      	ble.n	8012270 <__hexnan+0xfc>
 8012262:	4544      	cmp	r4, r8
 8012264:	d9c3      	bls.n	80121ee <__hexnan+0x7a>
 8012266:	2300      	movs	r3, #0
 8012268:	f844 3c04 	str.w	r3, [r4, #-4]
 801226c:	2501      	movs	r5, #1
 801226e:	3c04      	subs	r4, #4
 8012270:	6822      	ldr	r2, [r4, #0]
 8012272:	f000 000f 	and.w	r0, r0, #15
 8012276:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801227a:	6022      	str	r2, [r4, #0]
 801227c:	e7b7      	b.n	80121ee <__hexnan+0x7a>
 801227e:	2508      	movs	r5, #8
 8012280:	e7b5      	b.n	80121ee <__hexnan+0x7a>
 8012282:	9b01      	ldr	r3, [sp, #4]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d0df      	beq.n	8012248 <__hexnan+0xd4>
 8012288:	f04f 32ff 	mov.w	r2, #4294967295
 801228c:	f1c3 0320 	rsb	r3, r3, #32
 8012290:	fa22 f303 	lsr.w	r3, r2, r3
 8012294:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8012298:	401a      	ands	r2, r3
 801229a:	f846 2c04 	str.w	r2, [r6, #-4]
 801229e:	e7d3      	b.n	8012248 <__hexnan+0xd4>
 80122a0:	3f04      	subs	r7, #4
 80122a2:	e7d1      	b.n	8012248 <__hexnan+0xd4>
 80122a4:	2004      	movs	r0, #4
 80122a6:	b007      	add	sp, #28
 80122a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080122ac <_localeconv_r>:
 80122ac:	4800      	ldr	r0, [pc, #0]	; (80122b0 <_localeconv_r+0x4>)
 80122ae:	4770      	bx	lr
 80122b0:	200002d4 	.word	0x200002d4

080122b4 <malloc>:
 80122b4:	4b02      	ldr	r3, [pc, #8]	; (80122c0 <malloc+0xc>)
 80122b6:	4601      	mov	r1, r0
 80122b8:	6818      	ldr	r0, [r3, #0]
 80122ba:	f000 bd59 	b.w	8012d70 <_malloc_r>
 80122be:	bf00      	nop
 80122c0:	2000017c 	.word	0x2000017c

080122c4 <__ascii_mbtowc>:
 80122c4:	b082      	sub	sp, #8
 80122c6:	b901      	cbnz	r1, 80122ca <__ascii_mbtowc+0x6>
 80122c8:	a901      	add	r1, sp, #4
 80122ca:	b142      	cbz	r2, 80122de <__ascii_mbtowc+0x1a>
 80122cc:	b14b      	cbz	r3, 80122e2 <__ascii_mbtowc+0x1e>
 80122ce:	7813      	ldrb	r3, [r2, #0]
 80122d0:	600b      	str	r3, [r1, #0]
 80122d2:	7812      	ldrb	r2, [r2, #0]
 80122d4:	1e10      	subs	r0, r2, #0
 80122d6:	bf18      	it	ne
 80122d8:	2001      	movne	r0, #1
 80122da:	b002      	add	sp, #8
 80122dc:	4770      	bx	lr
 80122de:	4610      	mov	r0, r2
 80122e0:	e7fb      	b.n	80122da <__ascii_mbtowc+0x16>
 80122e2:	f06f 0001 	mvn.w	r0, #1
 80122e6:	e7f8      	b.n	80122da <__ascii_mbtowc+0x16>

080122e8 <_Balloc>:
 80122e8:	b570      	push	{r4, r5, r6, lr}
 80122ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80122ec:	4604      	mov	r4, r0
 80122ee:	460d      	mov	r5, r1
 80122f0:	b976      	cbnz	r6, 8012310 <_Balloc+0x28>
 80122f2:	2010      	movs	r0, #16
 80122f4:	f7ff ffde 	bl	80122b4 <malloc>
 80122f8:	4602      	mov	r2, r0
 80122fa:	6260      	str	r0, [r4, #36]	; 0x24
 80122fc:	b920      	cbnz	r0, 8012308 <_Balloc+0x20>
 80122fe:	4b18      	ldr	r3, [pc, #96]	; (8012360 <_Balloc+0x78>)
 8012300:	4818      	ldr	r0, [pc, #96]	; (8012364 <_Balloc+0x7c>)
 8012302:	2166      	movs	r1, #102	; 0x66
 8012304:	f000 ff3e 	bl	8013184 <__assert_func>
 8012308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801230c:	6006      	str	r6, [r0, #0]
 801230e:	60c6      	str	r6, [r0, #12]
 8012310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012312:	68f3      	ldr	r3, [r6, #12]
 8012314:	b183      	cbz	r3, 8012338 <_Balloc+0x50>
 8012316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012318:	68db      	ldr	r3, [r3, #12]
 801231a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801231e:	b9b8      	cbnz	r0, 8012350 <_Balloc+0x68>
 8012320:	2101      	movs	r1, #1
 8012322:	fa01 f605 	lsl.w	r6, r1, r5
 8012326:	1d72      	adds	r2, r6, #5
 8012328:	0092      	lsls	r2, r2, #2
 801232a:	4620      	mov	r0, r4
 801232c:	f000 fc9d 	bl	8012c6a <_calloc_r>
 8012330:	b160      	cbz	r0, 801234c <_Balloc+0x64>
 8012332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012336:	e00e      	b.n	8012356 <_Balloc+0x6e>
 8012338:	2221      	movs	r2, #33	; 0x21
 801233a:	2104      	movs	r1, #4
 801233c:	4620      	mov	r0, r4
 801233e:	f000 fc94 	bl	8012c6a <_calloc_r>
 8012342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012344:	60f0      	str	r0, [r6, #12]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	2b00      	cmp	r3, #0
 801234a:	d1e4      	bne.n	8012316 <_Balloc+0x2e>
 801234c:	2000      	movs	r0, #0
 801234e:	bd70      	pop	{r4, r5, r6, pc}
 8012350:	6802      	ldr	r2, [r0, #0]
 8012352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012356:	2300      	movs	r3, #0
 8012358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801235c:	e7f7      	b.n	801234e <_Balloc+0x66>
 801235e:	bf00      	nop
 8012360:	08015ac6 	.word	0x08015ac6
 8012364:	08015bc4 	.word	0x08015bc4

08012368 <_Bfree>:
 8012368:	b570      	push	{r4, r5, r6, lr}
 801236a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801236c:	4605      	mov	r5, r0
 801236e:	460c      	mov	r4, r1
 8012370:	b976      	cbnz	r6, 8012390 <_Bfree+0x28>
 8012372:	2010      	movs	r0, #16
 8012374:	f7ff ff9e 	bl	80122b4 <malloc>
 8012378:	4602      	mov	r2, r0
 801237a:	6268      	str	r0, [r5, #36]	; 0x24
 801237c:	b920      	cbnz	r0, 8012388 <_Bfree+0x20>
 801237e:	4b09      	ldr	r3, [pc, #36]	; (80123a4 <_Bfree+0x3c>)
 8012380:	4809      	ldr	r0, [pc, #36]	; (80123a8 <_Bfree+0x40>)
 8012382:	218a      	movs	r1, #138	; 0x8a
 8012384:	f000 fefe 	bl	8013184 <__assert_func>
 8012388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801238c:	6006      	str	r6, [r0, #0]
 801238e:	60c6      	str	r6, [r0, #12]
 8012390:	b13c      	cbz	r4, 80123a2 <_Bfree+0x3a>
 8012392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8012394:	6862      	ldr	r2, [r4, #4]
 8012396:	68db      	ldr	r3, [r3, #12]
 8012398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801239c:	6021      	str	r1, [r4, #0]
 801239e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80123a2:	bd70      	pop	{r4, r5, r6, pc}
 80123a4:	08015ac6 	.word	0x08015ac6
 80123a8:	08015bc4 	.word	0x08015bc4

080123ac <__multadd>:
 80123ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80123b0:	690d      	ldr	r5, [r1, #16]
 80123b2:	4607      	mov	r7, r0
 80123b4:	460c      	mov	r4, r1
 80123b6:	461e      	mov	r6, r3
 80123b8:	f101 0c14 	add.w	ip, r1, #20
 80123bc:	2000      	movs	r0, #0
 80123be:	f8dc 3000 	ldr.w	r3, [ip]
 80123c2:	b299      	uxth	r1, r3
 80123c4:	fb02 6101 	mla	r1, r2, r1, r6
 80123c8:	0c1e      	lsrs	r6, r3, #16
 80123ca:	0c0b      	lsrs	r3, r1, #16
 80123cc:	fb02 3306 	mla	r3, r2, r6, r3
 80123d0:	b289      	uxth	r1, r1
 80123d2:	3001      	adds	r0, #1
 80123d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80123d8:	4285      	cmp	r5, r0
 80123da:	f84c 1b04 	str.w	r1, [ip], #4
 80123de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80123e2:	dcec      	bgt.n	80123be <__multadd+0x12>
 80123e4:	b30e      	cbz	r6, 801242a <__multadd+0x7e>
 80123e6:	68a3      	ldr	r3, [r4, #8]
 80123e8:	42ab      	cmp	r3, r5
 80123ea:	dc19      	bgt.n	8012420 <__multadd+0x74>
 80123ec:	6861      	ldr	r1, [r4, #4]
 80123ee:	4638      	mov	r0, r7
 80123f0:	3101      	adds	r1, #1
 80123f2:	f7ff ff79 	bl	80122e8 <_Balloc>
 80123f6:	4680      	mov	r8, r0
 80123f8:	b928      	cbnz	r0, 8012406 <__multadd+0x5a>
 80123fa:	4602      	mov	r2, r0
 80123fc:	4b0c      	ldr	r3, [pc, #48]	; (8012430 <__multadd+0x84>)
 80123fe:	480d      	ldr	r0, [pc, #52]	; (8012434 <__multadd+0x88>)
 8012400:	21b5      	movs	r1, #181	; 0xb5
 8012402:	f000 febf 	bl	8013184 <__assert_func>
 8012406:	6922      	ldr	r2, [r4, #16]
 8012408:	3202      	adds	r2, #2
 801240a:	f104 010c 	add.w	r1, r4, #12
 801240e:	0092      	lsls	r2, r2, #2
 8012410:	300c      	adds	r0, #12
 8012412:	f7fc ffff 	bl	800f414 <memcpy>
 8012416:	4621      	mov	r1, r4
 8012418:	4638      	mov	r0, r7
 801241a:	f7ff ffa5 	bl	8012368 <_Bfree>
 801241e:	4644      	mov	r4, r8
 8012420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012424:	3501      	adds	r5, #1
 8012426:	615e      	str	r6, [r3, #20]
 8012428:	6125      	str	r5, [r4, #16]
 801242a:	4620      	mov	r0, r4
 801242c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012430:	08015b38 	.word	0x08015b38
 8012434:	08015bc4 	.word	0x08015bc4

08012438 <__s2b>:
 8012438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801243c:	460c      	mov	r4, r1
 801243e:	4615      	mov	r5, r2
 8012440:	461f      	mov	r7, r3
 8012442:	2209      	movs	r2, #9
 8012444:	3308      	adds	r3, #8
 8012446:	4606      	mov	r6, r0
 8012448:	fb93 f3f2 	sdiv	r3, r3, r2
 801244c:	2100      	movs	r1, #0
 801244e:	2201      	movs	r2, #1
 8012450:	429a      	cmp	r2, r3
 8012452:	db09      	blt.n	8012468 <__s2b+0x30>
 8012454:	4630      	mov	r0, r6
 8012456:	f7ff ff47 	bl	80122e8 <_Balloc>
 801245a:	b940      	cbnz	r0, 801246e <__s2b+0x36>
 801245c:	4602      	mov	r2, r0
 801245e:	4b19      	ldr	r3, [pc, #100]	; (80124c4 <__s2b+0x8c>)
 8012460:	4819      	ldr	r0, [pc, #100]	; (80124c8 <__s2b+0x90>)
 8012462:	21ce      	movs	r1, #206	; 0xce
 8012464:	f000 fe8e 	bl	8013184 <__assert_func>
 8012468:	0052      	lsls	r2, r2, #1
 801246a:	3101      	adds	r1, #1
 801246c:	e7f0      	b.n	8012450 <__s2b+0x18>
 801246e:	9b08      	ldr	r3, [sp, #32]
 8012470:	6143      	str	r3, [r0, #20]
 8012472:	2d09      	cmp	r5, #9
 8012474:	f04f 0301 	mov.w	r3, #1
 8012478:	6103      	str	r3, [r0, #16]
 801247a:	dd16      	ble.n	80124aa <__s2b+0x72>
 801247c:	f104 0909 	add.w	r9, r4, #9
 8012480:	46c8      	mov	r8, r9
 8012482:	442c      	add	r4, r5
 8012484:	f818 3b01 	ldrb.w	r3, [r8], #1
 8012488:	4601      	mov	r1, r0
 801248a:	3b30      	subs	r3, #48	; 0x30
 801248c:	220a      	movs	r2, #10
 801248e:	4630      	mov	r0, r6
 8012490:	f7ff ff8c 	bl	80123ac <__multadd>
 8012494:	45a0      	cmp	r8, r4
 8012496:	d1f5      	bne.n	8012484 <__s2b+0x4c>
 8012498:	f1a5 0408 	sub.w	r4, r5, #8
 801249c:	444c      	add	r4, r9
 801249e:	1b2d      	subs	r5, r5, r4
 80124a0:	1963      	adds	r3, r4, r5
 80124a2:	42bb      	cmp	r3, r7
 80124a4:	db04      	blt.n	80124b0 <__s2b+0x78>
 80124a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80124aa:	340a      	adds	r4, #10
 80124ac:	2509      	movs	r5, #9
 80124ae:	e7f6      	b.n	801249e <__s2b+0x66>
 80124b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80124b4:	4601      	mov	r1, r0
 80124b6:	3b30      	subs	r3, #48	; 0x30
 80124b8:	220a      	movs	r2, #10
 80124ba:	4630      	mov	r0, r6
 80124bc:	f7ff ff76 	bl	80123ac <__multadd>
 80124c0:	e7ee      	b.n	80124a0 <__s2b+0x68>
 80124c2:	bf00      	nop
 80124c4:	08015b38 	.word	0x08015b38
 80124c8:	08015bc4 	.word	0x08015bc4

080124cc <__hi0bits>:
 80124cc:	0c03      	lsrs	r3, r0, #16
 80124ce:	041b      	lsls	r3, r3, #16
 80124d0:	b9d3      	cbnz	r3, 8012508 <__hi0bits+0x3c>
 80124d2:	0400      	lsls	r0, r0, #16
 80124d4:	2310      	movs	r3, #16
 80124d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80124da:	bf04      	itt	eq
 80124dc:	0200      	lsleq	r0, r0, #8
 80124de:	3308      	addeq	r3, #8
 80124e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80124e4:	bf04      	itt	eq
 80124e6:	0100      	lsleq	r0, r0, #4
 80124e8:	3304      	addeq	r3, #4
 80124ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80124ee:	bf04      	itt	eq
 80124f0:	0080      	lsleq	r0, r0, #2
 80124f2:	3302      	addeq	r3, #2
 80124f4:	2800      	cmp	r0, #0
 80124f6:	db05      	blt.n	8012504 <__hi0bits+0x38>
 80124f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80124fc:	f103 0301 	add.w	r3, r3, #1
 8012500:	bf08      	it	eq
 8012502:	2320      	moveq	r3, #32
 8012504:	4618      	mov	r0, r3
 8012506:	4770      	bx	lr
 8012508:	2300      	movs	r3, #0
 801250a:	e7e4      	b.n	80124d6 <__hi0bits+0xa>

0801250c <__lo0bits>:
 801250c:	6803      	ldr	r3, [r0, #0]
 801250e:	f013 0207 	ands.w	r2, r3, #7
 8012512:	4601      	mov	r1, r0
 8012514:	d00b      	beq.n	801252e <__lo0bits+0x22>
 8012516:	07da      	lsls	r2, r3, #31
 8012518:	d423      	bmi.n	8012562 <__lo0bits+0x56>
 801251a:	0798      	lsls	r0, r3, #30
 801251c:	bf49      	itett	mi
 801251e:	085b      	lsrmi	r3, r3, #1
 8012520:	089b      	lsrpl	r3, r3, #2
 8012522:	2001      	movmi	r0, #1
 8012524:	600b      	strmi	r3, [r1, #0]
 8012526:	bf5c      	itt	pl
 8012528:	600b      	strpl	r3, [r1, #0]
 801252a:	2002      	movpl	r0, #2
 801252c:	4770      	bx	lr
 801252e:	b298      	uxth	r0, r3
 8012530:	b9a8      	cbnz	r0, 801255e <__lo0bits+0x52>
 8012532:	0c1b      	lsrs	r3, r3, #16
 8012534:	2010      	movs	r0, #16
 8012536:	b2da      	uxtb	r2, r3
 8012538:	b90a      	cbnz	r2, 801253e <__lo0bits+0x32>
 801253a:	3008      	adds	r0, #8
 801253c:	0a1b      	lsrs	r3, r3, #8
 801253e:	071a      	lsls	r2, r3, #28
 8012540:	bf04      	itt	eq
 8012542:	091b      	lsreq	r3, r3, #4
 8012544:	3004      	addeq	r0, #4
 8012546:	079a      	lsls	r2, r3, #30
 8012548:	bf04      	itt	eq
 801254a:	089b      	lsreq	r3, r3, #2
 801254c:	3002      	addeq	r0, #2
 801254e:	07da      	lsls	r2, r3, #31
 8012550:	d403      	bmi.n	801255a <__lo0bits+0x4e>
 8012552:	085b      	lsrs	r3, r3, #1
 8012554:	f100 0001 	add.w	r0, r0, #1
 8012558:	d005      	beq.n	8012566 <__lo0bits+0x5a>
 801255a:	600b      	str	r3, [r1, #0]
 801255c:	4770      	bx	lr
 801255e:	4610      	mov	r0, r2
 8012560:	e7e9      	b.n	8012536 <__lo0bits+0x2a>
 8012562:	2000      	movs	r0, #0
 8012564:	4770      	bx	lr
 8012566:	2020      	movs	r0, #32
 8012568:	4770      	bx	lr
	...

0801256c <__i2b>:
 801256c:	b510      	push	{r4, lr}
 801256e:	460c      	mov	r4, r1
 8012570:	2101      	movs	r1, #1
 8012572:	f7ff feb9 	bl	80122e8 <_Balloc>
 8012576:	4602      	mov	r2, r0
 8012578:	b928      	cbnz	r0, 8012586 <__i2b+0x1a>
 801257a:	4b05      	ldr	r3, [pc, #20]	; (8012590 <__i2b+0x24>)
 801257c:	4805      	ldr	r0, [pc, #20]	; (8012594 <__i2b+0x28>)
 801257e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8012582:	f000 fdff 	bl	8013184 <__assert_func>
 8012586:	2301      	movs	r3, #1
 8012588:	6144      	str	r4, [r0, #20]
 801258a:	6103      	str	r3, [r0, #16]
 801258c:	bd10      	pop	{r4, pc}
 801258e:	bf00      	nop
 8012590:	08015b38 	.word	0x08015b38
 8012594:	08015bc4 	.word	0x08015bc4

08012598 <__multiply>:
 8012598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801259c:	4691      	mov	r9, r2
 801259e:	690a      	ldr	r2, [r1, #16]
 80125a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80125a4:	429a      	cmp	r2, r3
 80125a6:	bfb8      	it	lt
 80125a8:	460b      	movlt	r3, r1
 80125aa:	460c      	mov	r4, r1
 80125ac:	bfbc      	itt	lt
 80125ae:	464c      	movlt	r4, r9
 80125b0:	4699      	movlt	r9, r3
 80125b2:	6927      	ldr	r7, [r4, #16]
 80125b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80125b8:	68a3      	ldr	r3, [r4, #8]
 80125ba:	6861      	ldr	r1, [r4, #4]
 80125bc:	eb07 060a 	add.w	r6, r7, sl
 80125c0:	42b3      	cmp	r3, r6
 80125c2:	b085      	sub	sp, #20
 80125c4:	bfb8      	it	lt
 80125c6:	3101      	addlt	r1, #1
 80125c8:	f7ff fe8e 	bl	80122e8 <_Balloc>
 80125cc:	b930      	cbnz	r0, 80125dc <__multiply+0x44>
 80125ce:	4602      	mov	r2, r0
 80125d0:	4b44      	ldr	r3, [pc, #272]	; (80126e4 <__multiply+0x14c>)
 80125d2:	4845      	ldr	r0, [pc, #276]	; (80126e8 <__multiply+0x150>)
 80125d4:	f240 115d 	movw	r1, #349	; 0x15d
 80125d8:	f000 fdd4 	bl	8013184 <__assert_func>
 80125dc:	f100 0514 	add.w	r5, r0, #20
 80125e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80125e4:	462b      	mov	r3, r5
 80125e6:	2200      	movs	r2, #0
 80125e8:	4543      	cmp	r3, r8
 80125ea:	d321      	bcc.n	8012630 <__multiply+0x98>
 80125ec:	f104 0314 	add.w	r3, r4, #20
 80125f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80125f4:	f109 0314 	add.w	r3, r9, #20
 80125f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80125fc:	9202      	str	r2, [sp, #8]
 80125fe:	1b3a      	subs	r2, r7, r4
 8012600:	3a15      	subs	r2, #21
 8012602:	f022 0203 	bic.w	r2, r2, #3
 8012606:	3204      	adds	r2, #4
 8012608:	f104 0115 	add.w	r1, r4, #21
 801260c:	428f      	cmp	r7, r1
 801260e:	bf38      	it	cc
 8012610:	2204      	movcc	r2, #4
 8012612:	9201      	str	r2, [sp, #4]
 8012614:	9a02      	ldr	r2, [sp, #8]
 8012616:	9303      	str	r3, [sp, #12]
 8012618:	429a      	cmp	r2, r3
 801261a:	d80c      	bhi.n	8012636 <__multiply+0x9e>
 801261c:	2e00      	cmp	r6, #0
 801261e:	dd03      	ble.n	8012628 <__multiply+0x90>
 8012620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012624:	2b00      	cmp	r3, #0
 8012626:	d05a      	beq.n	80126de <__multiply+0x146>
 8012628:	6106      	str	r6, [r0, #16]
 801262a:	b005      	add	sp, #20
 801262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012630:	f843 2b04 	str.w	r2, [r3], #4
 8012634:	e7d8      	b.n	80125e8 <__multiply+0x50>
 8012636:	f8b3 a000 	ldrh.w	sl, [r3]
 801263a:	f1ba 0f00 	cmp.w	sl, #0
 801263e:	d024      	beq.n	801268a <__multiply+0xf2>
 8012640:	f104 0e14 	add.w	lr, r4, #20
 8012644:	46a9      	mov	r9, r5
 8012646:	f04f 0c00 	mov.w	ip, #0
 801264a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801264e:	f8d9 1000 	ldr.w	r1, [r9]
 8012652:	fa1f fb82 	uxth.w	fp, r2
 8012656:	b289      	uxth	r1, r1
 8012658:	fb0a 110b 	mla	r1, sl, fp, r1
 801265c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012660:	f8d9 2000 	ldr.w	r2, [r9]
 8012664:	4461      	add	r1, ip
 8012666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801266a:	fb0a c20b 	mla	r2, sl, fp, ip
 801266e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012672:	b289      	uxth	r1, r1
 8012674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012678:	4577      	cmp	r7, lr
 801267a:	f849 1b04 	str.w	r1, [r9], #4
 801267e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012682:	d8e2      	bhi.n	801264a <__multiply+0xb2>
 8012684:	9a01      	ldr	r2, [sp, #4]
 8012686:	f845 c002 	str.w	ip, [r5, r2]
 801268a:	9a03      	ldr	r2, [sp, #12]
 801268c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012690:	3304      	adds	r3, #4
 8012692:	f1b9 0f00 	cmp.w	r9, #0
 8012696:	d020      	beq.n	80126da <__multiply+0x142>
 8012698:	6829      	ldr	r1, [r5, #0]
 801269a:	f104 0c14 	add.w	ip, r4, #20
 801269e:	46ae      	mov	lr, r5
 80126a0:	f04f 0a00 	mov.w	sl, #0
 80126a4:	f8bc b000 	ldrh.w	fp, [ip]
 80126a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80126ac:	fb09 220b 	mla	r2, r9, fp, r2
 80126b0:	4492      	add	sl, r2
 80126b2:	b289      	uxth	r1, r1
 80126b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80126b8:	f84e 1b04 	str.w	r1, [lr], #4
 80126bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80126c0:	f8be 1000 	ldrh.w	r1, [lr]
 80126c4:	0c12      	lsrs	r2, r2, #16
 80126c6:	fb09 1102 	mla	r1, r9, r2, r1
 80126ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80126ce:	4567      	cmp	r7, ip
 80126d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80126d4:	d8e6      	bhi.n	80126a4 <__multiply+0x10c>
 80126d6:	9a01      	ldr	r2, [sp, #4]
 80126d8:	50a9      	str	r1, [r5, r2]
 80126da:	3504      	adds	r5, #4
 80126dc:	e79a      	b.n	8012614 <__multiply+0x7c>
 80126de:	3e01      	subs	r6, #1
 80126e0:	e79c      	b.n	801261c <__multiply+0x84>
 80126e2:	bf00      	nop
 80126e4:	08015b38 	.word	0x08015b38
 80126e8:	08015bc4 	.word	0x08015bc4

080126ec <__pow5mult>:
 80126ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80126f0:	4615      	mov	r5, r2
 80126f2:	f012 0203 	ands.w	r2, r2, #3
 80126f6:	4606      	mov	r6, r0
 80126f8:	460f      	mov	r7, r1
 80126fa:	d007      	beq.n	801270c <__pow5mult+0x20>
 80126fc:	4c25      	ldr	r4, [pc, #148]	; (8012794 <__pow5mult+0xa8>)
 80126fe:	3a01      	subs	r2, #1
 8012700:	2300      	movs	r3, #0
 8012702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012706:	f7ff fe51 	bl	80123ac <__multadd>
 801270a:	4607      	mov	r7, r0
 801270c:	10ad      	asrs	r5, r5, #2
 801270e:	d03d      	beq.n	801278c <__pow5mult+0xa0>
 8012710:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012712:	b97c      	cbnz	r4, 8012734 <__pow5mult+0x48>
 8012714:	2010      	movs	r0, #16
 8012716:	f7ff fdcd 	bl	80122b4 <malloc>
 801271a:	4602      	mov	r2, r0
 801271c:	6270      	str	r0, [r6, #36]	; 0x24
 801271e:	b928      	cbnz	r0, 801272c <__pow5mult+0x40>
 8012720:	4b1d      	ldr	r3, [pc, #116]	; (8012798 <__pow5mult+0xac>)
 8012722:	481e      	ldr	r0, [pc, #120]	; (801279c <__pow5mult+0xb0>)
 8012724:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8012728:	f000 fd2c 	bl	8013184 <__assert_func>
 801272c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012730:	6004      	str	r4, [r0, #0]
 8012732:	60c4      	str	r4, [r0, #12]
 8012734:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801273c:	b94c      	cbnz	r4, 8012752 <__pow5mult+0x66>
 801273e:	f240 2171 	movw	r1, #625	; 0x271
 8012742:	4630      	mov	r0, r6
 8012744:	f7ff ff12 	bl	801256c <__i2b>
 8012748:	2300      	movs	r3, #0
 801274a:	f8c8 0008 	str.w	r0, [r8, #8]
 801274e:	4604      	mov	r4, r0
 8012750:	6003      	str	r3, [r0, #0]
 8012752:	f04f 0900 	mov.w	r9, #0
 8012756:	07eb      	lsls	r3, r5, #31
 8012758:	d50a      	bpl.n	8012770 <__pow5mult+0x84>
 801275a:	4639      	mov	r1, r7
 801275c:	4622      	mov	r2, r4
 801275e:	4630      	mov	r0, r6
 8012760:	f7ff ff1a 	bl	8012598 <__multiply>
 8012764:	4639      	mov	r1, r7
 8012766:	4680      	mov	r8, r0
 8012768:	4630      	mov	r0, r6
 801276a:	f7ff fdfd 	bl	8012368 <_Bfree>
 801276e:	4647      	mov	r7, r8
 8012770:	106d      	asrs	r5, r5, #1
 8012772:	d00b      	beq.n	801278c <__pow5mult+0xa0>
 8012774:	6820      	ldr	r0, [r4, #0]
 8012776:	b938      	cbnz	r0, 8012788 <__pow5mult+0x9c>
 8012778:	4622      	mov	r2, r4
 801277a:	4621      	mov	r1, r4
 801277c:	4630      	mov	r0, r6
 801277e:	f7ff ff0b 	bl	8012598 <__multiply>
 8012782:	6020      	str	r0, [r4, #0]
 8012784:	f8c0 9000 	str.w	r9, [r0]
 8012788:	4604      	mov	r4, r0
 801278a:	e7e4      	b.n	8012756 <__pow5mult+0x6a>
 801278c:	4638      	mov	r0, r7
 801278e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012792:	bf00      	nop
 8012794:	08015d10 	.word	0x08015d10
 8012798:	08015ac6 	.word	0x08015ac6
 801279c:	08015bc4 	.word	0x08015bc4

080127a0 <__lshift>:
 80127a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127a4:	460c      	mov	r4, r1
 80127a6:	6849      	ldr	r1, [r1, #4]
 80127a8:	6923      	ldr	r3, [r4, #16]
 80127aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80127ae:	68a3      	ldr	r3, [r4, #8]
 80127b0:	4607      	mov	r7, r0
 80127b2:	4691      	mov	r9, r2
 80127b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80127b8:	f108 0601 	add.w	r6, r8, #1
 80127bc:	42b3      	cmp	r3, r6
 80127be:	db0b      	blt.n	80127d8 <__lshift+0x38>
 80127c0:	4638      	mov	r0, r7
 80127c2:	f7ff fd91 	bl	80122e8 <_Balloc>
 80127c6:	4605      	mov	r5, r0
 80127c8:	b948      	cbnz	r0, 80127de <__lshift+0x3e>
 80127ca:	4602      	mov	r2, r0
 80127cc:	4b2a      	ldr	r3, [pc, #168]	; (8012878 <__lshift+0xd8>)
 80127ce:	482b      	ldr	r0, [pc, #172]	; (801287c <__lshift+0xdc>)
 80127d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80127d4:	f000 fcd6 	bl	8013184 <__assert_func>
 80127d8:	3101      	adds	r1, #1
 80127da:	005b      	lsls	r3, r3, #1
 80127dc:	e7ee      	b.n	80127bc <__lshift+0x1c>
 80127de:	2300      	movs	r3, #0
 80127e0:	f100 0114 	add.w	r1, r0, #20
 80127e4:	f100 0210 	add.w	r2, r0, #16
 80127e8:	4618      	mov	r0, r3
 80127ea:	4553      	cmp	r3, sl
 80127ec:	db37      	blt.n	801285e <__lshift+0xbe>
 80127ee:	6920      	ldr	r0, [r4, #16]
 80127f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80127f4:	f104 0314 	add.w	r3, r4, #20
 80127f8:	f019 091f 	ands.w	r9, r9, #31
 80127fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012800:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012804:	d02f      	beq.n	8012866 <__lshift+0xc6>
 8012806:	f1c9 0e20 	rsb	lr, r9, #32
 801280a:	468a      	mov	sl, r1
 801280c:	f04f 0c00 	mov.w	ip, #0
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	fa02 f209 	lsl.w	r2, r2, r9
 8012816:	ea42 020c 	orr.w	r2, r2, ip
 801281a:	f84a 2b04 	str.w	r2, [sl], #4
 801281e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012822:	4298      	cmp	r0, r3
 8012824:	fa22 fc0e 	lsr.w	ip, r2, lr
 8012828:	d8f2      	bhi.n	8012810 <__lshift+0x70>
 801282a:	1b03      	subs	r3, r0, r4
 801282c:	3b15      	subs	r3, #21
 801282e:	f023 0303 	bic.w	r3, r3, #3
 8012832:	3304      	adds	r3, #4
 8012834:	f104 0215 	add.w	r2, r4, #21
 8012838:	4290      	cmp	r0, r2
 801283a:	bf38      	it	cc
 801283c:	2304      	movcc	r3, #4
 801283e:	f841 c003 	str.w	ip, [r1, r3]
 8012842:	f1bc 0f00 	cmp.w	ip, #0
 8012846:	d001      	beq.n	801284c <__lshift+0xac>
 8012848:	f108 0602 	add.w	r6, r8, #2
 801284c:	3e01      	subs	r6, #1
 801284e:	4638      	mov	r0, r7
 8012850:	612e      	str	r6, [r5, #16]
 8012852:	4621      	mov	r1, r4
 8012854:	f7ff fd88 	bl	8012368 <_Bfree>
 8012858:	4628      	mov	r0, r5
 801285a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801285e:	f842 0f04 	str.w	r0, [r2, #4]!
 8012862:	3301      	adds	r3, #1
 8012864:	e7c1      	b.n	80127ea <__lshift+0x4a>
 8012866:	3904      	subs	r1, #4
 8012868:	f853 2b04 	ldr.w	r2, [r3], #4
 801286c:	f841 2f04 	str.w	r2, [r1, #4]!
 8012870:	4298      	cmp	r0, r3
 8012872:	d8f9      	bhi.n	8012868 <__lshift+0xc8>
 8012874:	e7ea      	b.n	801284c <__lshift+0xac>
 8012876:	bf00      	nop
 8012878:	08015b38 	.word	0x08015b38
 801287c:	08015bc4 	.word	0x08015bc4

08012880 <__mcmp>:
 8012880:	b530      	push	{r4, r5, lr}
 8012882:	6902      	ldr	r2, [r0, #16]
 8012884:	690c      	ldr	r4, [r1, #16]
 8012886:	1b12      	subs	r2, r2, r4
 8012888:	d10e      	bne.n	80128a8 <__mcmp+0x28>
 801288a:	f100 0314 	add.w	r3, r0, #20
 801288e:	3114      	adds	r1, #20
 8012890:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8012894:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8012898:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801289c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80128a0:	42a5      	cmp	r5, r4
 80128a2:	d003      	beq.n	80128ac <__mcmp+0x2c>
 80128a4:	d305      	bcc.n	80128b2 <__mcmp+0x32>
 80128a6:	2201      	movs	r2, #1
 80128a8:	4610      	mov	r0, r2
 80128aa:	bd30      	pop	{r4, r5, pc}
 80128ac:	4283      	cmp	r3, r0
 80128ae:	d3f3      	bcc.n	8012898 <__mcmp+0x18>
 80128b0:	e7fa      	b.n	80128a8 <__mcmp+0x28>
 80128b2:	f04f 32ff 	mov.w	r2, #4294967295
 80128b6:	e7f7      	b.n	80128a8 <__mcmp+0x28>

080128b8 <__mdiff>:
 80128b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128bc:	460c      	mov	r4, r1
 80128be:	4606      	mov	r6, r0
 80128c0:	4611      	mov	r1, r2
 80128c2:	4620      	mov	r0, r4
 80128c4:	4690      	mov	r8, r2
 80128c6:	f7ff ffdb 	bl	8012880 <__mcmp>
 80128ca:	1e05      	subs	r5, r0, #0
 80128cc:	d110      	bne.n	80128f0 <__mdiff+0x38>
 80128ce:	4629      	mov	r1, r5
 80128d0:	4630      	mov	r0, r6
 80128d2:	f7ff fd09 	bl	80122e8 <_Balloc>
 80128d6:	b930      	cbnz	r0, 80128e6 <__mdiff+0x2e>
 80128d8:	4b3a      	ldr	r3, [pc, #232]	; (80129c4 <__mdiff+0x10c>)
 80128da:	4602      	mov	r2, r0
 80128dc:	f240 2132 	movw	r1, #562	; 0x232
 80128e0:	4839      	ldr	r0, [pc, #228]	; (80129c8 <__mdiff+0x110>)
 80128e2:	f000 fc4f 	bl	8013184 <__assert_func>
 80128e6:	2301      	movs	r3, #1
 80128e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80128ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f0:	bfa4      	itt	ge
 80128f2:	4643      	movge	r3, r8
 80128f4:	46a0      	movge	r8, r4
 80128f6:	4630      	mov	r0, r6
 80128f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80128fc:	bfa6      	itte	ge
 80128fe:	461c      	movge	r4, r3
 8012900:	2500      	movge	r5, #0
 8012902:	2501      	movlt	r5, #1
 8012904:	f7ff fcf0 	bl	80122e8 <_Balloc>
 8012908:	b920      	cbnz	r0, 8012914 <__mdiff+0x5c>
 801290a:	4b2e      	ldr	r3, [pc, #184]	; (80129c4 <__mdiff+0x10c>)
 801290c:	4602      	mov	r2, r0
 801290e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8012912:	e7e5      	b.n	80128e0 <__mdiff+0x28>
 8012914:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012918:	6926      	ldr	r6, [r4, #16]
 801291a:	60c5      	str	r5, [r0, #12]
 801291c:	f104 0914 	add.w	r9, r4, #20
 8012920:	f108 0514 	add.w	r5, r8, #20
 8012924:	f100 0e14 	add.w	lr, r0, #20
 8012928:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801292c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8012930:	f108 0210 	add.w	r2, r8, #16
 8012934:	46f2      	mov	sl, lr
 8012936:	2100      	movs	r1, #0
 8012938:	f859 3b04 	ldr.w	r3, [r9], #4
 801293c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8012940:	fa1f f883 	uxth.w	r8, r3
 8012944:	fa11 f18b 	uxtah	r1, r1, fp
 8012948:	0c1b      	lsrs	r3, r3, #16
 801294a:	eba1 0808 	sub.w	r8, r1, r8
 801294e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8012952:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8012956:	fa1f f888 	uxth.w	r8, r8
 801295a:	1419      	asrs	r1, r3, #16
 801295c:	454e      	cmp	r6, r9
 801295e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8012962:	f84a 3b04 	str.w	r3, [sl], #4
 8012966:	d8e7      	bhi.n	8012938 <__mdiff+0x80>
 8012968:	1b33      	subs	r3, r6, r4
 801296a:	3b15      	subs	r3, #21
 801296c:	f023 0303 	bic.w	r3, r3, #3
 8012970:	3304      	adds	r3, #4
 8012972:	3415      	adds	r4, #21
 8012974:	42a6      	cmp	r6, r4
 8012976:	bf38      	it	cc
 8012978:	2304      	movcc	r3, #4
 801297a:	441d      	add	r5, r3
 801297c:	4473      	add	r3, lr
 801297e:	469e      	mov	lr, r3
 8012980:	462e      	mov	r6, r5
 8012982:	4566      	cmp	r6, ip
 8012984:	d30e      	bcc.n	80129a4 <__mdiff+0xec>
 8012986:	f10c 0203 	add.w	r2, ip, #3
 801298a:	1b52      	subs	r2, r2, r5
 801298c:	f022 0203 	bic.w	r2, r2, #3
 8012990:	3d03      	subs	r5, #3
 8012992:	45ac      	cmp	ip, r5
 8012994:	bf38      	it	cc
 8012996:	2200      	movcc	r2, #0
 8012998:	441a      	add	r2, r3
 801299a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801299e:	b17b      	cbz	r3, 80129c0 <__mdiff+0x108>
 80129a0:	6107      	str	r7, [r0, #16]
 80129a2:	e7a3      	b.n	80128ec <__mdiff+0x34>
 80129a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80129a8:	fa11 f288 	uxtah	r2, r1, r8
 80129ac:	1414      	asrs	r4, r2, #16
 80129ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80129b2:	b292      	uxth	r2, r2
 80129b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80129b8:	f84e 2b04 	str.w	r2, [lr], #4
 80129bc:	1421      	asrs	r1, r4, #16
 80129be:	e7e0      	b.n	8012982 <__mdiff+0xca>
 80129c0:	3f01      	subs	r7, #1
 80129c2:	e7ea      	b.n	801299a <__mdiff+0xe2>
 80129c4:	08015b38 	.word	0x08015b38
 80129c8:	08015bc4 	.word	0x08015bc4

080129cc <__ulp>:
 80129cc:	b082      	sub	sp, #8
 80129ce:	ed8d 0b00 	vstr	d0, [sp]
 80129d2:	9b01      	ldr	r3, [sp, #4]
 80129d4:	4912      	ldr	r1, [pc, #72]	; (8012a20 <__ulp+0x54>)
 80129d6:	4019      	ands	r1, r3
 80129d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80129dc:	2900      	cmp	r1, #0
 80129de:	dd05      	ble.n	80129ec <__ulp+0x20>
 80129e0:	2200      	movs	r2, #0
 80129e2:	460b      	mov	r3, r1
 80129e4:	ec43 2b10 	vmov	d0, r2, r3
 80129e8:	b002      	add	sp, #8
 80129ea:	4770      	bx	lr
 80129ec:	4249      	negs	r1, r1
 80129ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80129f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 80129f6:	f04f 0200 	mov.w	r2, #0
 80129fa:	f04f 0300 	mov.w	r3, #0
 80129fe:	da04      	bge.n	8012a0a <__ulp+0x3e>
 8012a00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8012a04:	fa41 f300 	asr.w	r3, r1, r0
 8012a08:	e7ec      	b.n	80129e4 <__ulp+0x18>
 8012a0a:	f1a0 0114 	sub.w	r1, r0, #20
 8012a0e:	291e      	cmp	r1, #30
 8012a10:	bfda      	itte	le
 8012a12:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8012a16:	fa20 f101 	lsrle.w	r1, r0, r1
 8012a1a:	2101      	movgt	r1, #1
 8012a1c:	460a      	mov	r2, r1
 8012a1e:	e7e1      	b.n	80129e4 <__ulp+0x18>
 8012a20:	7ff00000 	.word	0x7ff00000

08012a24 <__b2d>:
 8012a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a26:	6905      	ldr	r5, [r0, #16]
 8012a28:	f100 0714 	add.w	r7, r0, #20
 8012a2c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8012a30:	1f2e      	subs	r6, r5, #4
 8012a32:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8012a36:	4620      	mov	r0, r4
 8012a38:	f7ff fd48 	bl	80124cc <__hi0bits>
 8012a3c:	f1c0 0320 	rsb	r3, r0, #32
 8012a40:	280a      	cmp	r0, #10
 8012a42:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8012ac0 <__b2d+0x9c>
 8012a46:	600b      	str	r3, [r1, #0]
 8012a48:	dc14      	bgt.n	8012a74 <__b2d+0x50>
 8012a4a:	f1c0 0e0b 	rsb	lr, r0, #11
 8012a4e:	fa24 f10e 	lsr.w	r1, r4, lr
 8012a52:	42b7      	cmp	r7, r6
 8012a54:	ea41 030c 	orr.w	r3, r1, ip
 8012a58:	bf34      	ite	cc
 8012a5a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012a5e:	2100      	movcs	r1, #0
 8012a60:	3015      	adds	r0, #21
 8012a62:	fa04 f000 	lsl.w	r0, r4, r0
 8012a66:	fa21 f10e 	lsr.w	r1, r1, lr
 8012a6a:	ea40 0201 	orr.w	r2, r0, r1
 8012a6e:	ec43 2b10 	vmov	d0, r2, r3
 8012a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a74:	42b7      	cmp	r7, r6
 8012a76:	bf3a      	itte	cc
 8012a78:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8012a7c:	f1a5 0608 	subcc.w	r6, r5, #8
 8012a80:	2100      	movcs	r1, #0
 8012a82:	380b      	subs	r0, #11
 8012a84:	d017      	beq.n	8012ab6 <__b2d+0x92>
 8012a86:	f1c0 0c20 	rsb	ip, r0, #32
 8012a8a:	fa04 f500 	lsl.w	r5, r4, r0
 8012a8e:	42be      	cmp	r6, r7
 8012a90:	fa21 f40c 	lsr.w	r4, r1, ip
 8012a94:	ea45 0504 	orr.w	r5, r5, r4
 8012a98:	bf8c      	ite	hi
 8012a9a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8012a9e:	2400      	movls	r4, #0
 8012aa0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8012aa4:	fa01 f000 	lsl.w	r0, r1, r0
 8012aa8:	fa24 f40c 	lsr.w	r4, r4, ip
 8012aac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012ab0:	ea40 0204 	orr.w	r2, r0, r4
 8012ab4:	e7db      	b.n	8012a6e <__b2d+0x4a>
 8012ab6:	ea44 030c 	orr.w	r3, r4, ip
 8012aba:	460a      	mov	r2, r1
 8012abc:	e7d7      	b.n	8012a6e <__b2d+0x4a>
 8012abe:	bf00      	nop
 8012ac0:	3ff00000 	.word	0x3ff00000

08012ac4 <__d2b>:
 8012ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012ac8:	4689      	mov	r9, r1
 8012aca:	2101      	movs	r1, #1
 8012acc:	ec57 6b10 	vmov	r6, r7, d0
 8012ad0:	4690      	mov	r8, r2
 8012ad2:	f7ff fc09 	bl	80122e8 <_Balloc>
 8012ad6:	4604      	mov	r4, r0
 8012ad8:	b930      	cbnz	r0, 8012ae8 <__d2b+0x24>
 8012ada:	4602      	mov	r2, r0
 8012adc:	4b25      	ldr	r3, [pc, #148]	; (8012b74 <__d2b+0xb0>)
 8012ade:	4826      	ldr	r0, [pc, #152]	; (8012b78 <__d2b+0xb4>)
 8012ae0:	f240 310a 	movw	r1, #778	; 0x30a
 8012ae4:	f000 fb4e 	bl	8013184 <__assert_func>
 8012ae8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8012aec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012af0:	bb35      	cbnz	r5, 8012b40 <__d2b+0x7c>
 8012af2:	2e00      	cmp	r6, #0
 8012af4:	9301      	str	r3, [sp, #4]
 8012af6:	d028      	beq.n	8012b4a <__d2b+0x86>
 8012af8:	4668      	mov	r0, sp
 8012afa:	9600      	str	r6, [sp, #0]
 8012afc:	f7ff fd06 	bl	801250c <__lo0bits>
 8012b00:	9900      	ldr	r1, [sp, #0]
 8012b02:	b300      	cbz	r0, 8012b46 <__d2b+0x82>
 8012b04:	9a01      	ldr	r2, [sp, #4]
 8012b06:	f1c0 0320 	rsb	r3, r0, #32
 8012b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8012b0e:	430b      	orrs	r3, r1
 8012b10:	40c2      	lsrs	r2, r0
 8012b12:	6163      	str	r3, [r4, #20]
 8012b14:	9201      	str	r2, [sp, #4]
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	61a3      	str	r3, [r4, #24]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	bf14      	ite	ne
 8012b1e:	2202      	movne	r2, #2
 8012b20:	2201      	moveq	r2, #1
 8012b22:	6122      	str	r2, [r4, #16]
 8012b24:	b1d5      	cbz	r5, 8012b5c <__d2b+0x98>
 8012b26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8012b2a:	4405      	add	r5, r0
 8012b2c:	f8c9 5000 	str.w	r5, [r9]
 8012b30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012b34:	f8c8 0000 	str.w	r0, [r8]
 8012b38:	4620      	mov	r0, r4
 8012b3a:	b003      	add	sp, #12
 8012b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012b44:	e7d5      	b.n	8012af2 <__d2b+0x2e>
 8012b46:	6161      	str	r1, [r4, #20]
 8012b48:	e7e5      	b.n	8012b16 <__d2b+0x52>
 8012b4a:	a801      	add	r0, sp, #4
 8012b4c:	f7ff fcde 	bl	801250c <__lo0bits>
 8012b50:	9b01      	ldr	r3, [sp, #4]
 8012b52:	6163      	str	r3, [r4, #20]
 8012b54:	2201      	movs	r2, #1
 8012b56:	6122      	str	r2, [r4, #16]
 8012b58:	3020      	adds	r0, #32
 8012b5a:	e7e3      	b.n	8012b24 <__d2b+0x60>
 8012b5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8012b60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012b64:	f8c9 0000 	str.w	r0, [r9]
 8012b68:	6918      	ldr	r0, [r3, #16]
 8012b6a:	f7ff fcaf 	bl	80124cc <__hi0bits>
 8012b6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8012b72:	e7df      	b.n	8012b34 <__d2b+0x70>
 8012b74:	08015b38 	.word	0x08015b38
 8012b78:	08015bc4 	.word	0x08015bc4

08012b7c <__ratio>:
 8012b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b80:	4688      	mov	r8, r1
 8012b82:	4669      	mov	r1, sp
 8012b84:	4681      	mov	r9, r0
 8012b86:	f7ff ff4d 	bl	8012a24 <__b2d>
 8012b8a:	a901      	add	r1, sp, #4
 8012b8c:	4640      	mov	r0, r8
 8012b8e:	ec55 4b10 	vmov	r4, r5, d0
 8012b92:	f7ff ff47 	bl	8012a24 <__b2d>
 8012b96:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012b9a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8012b9e:	eba3 0c02 	sub.w	ip, r3, r2
 8012ba2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012ba6:	1a9b      	subs	r3, r3, r2
 8012ba8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8012bac:	ec51 0b10 	vmov	r0, r1, d0
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	bfd6      	itet	le
 8012bb4:	460a      	movle	r2, r1
 8012bb6:	462a      	movgt	r2, r5
 8012bb8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8012bbc:	468b      	mov	fp, r1
 8012bbe:	462f      	mov	r7, r5
 8012bc0:	bfd4      	ite	le
 8012bc2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8012bc6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8012bca:	4620      	mov	r0, r4
 8012bcc:	ee10 2a10 	vmov	r2, s0
 8012bd0:	465b      	mov	r3, fp
 8012bd2:	4639      	mov	r1, r7
 8012bd4:	f7ed fe4a 	bl	800086c <__aeabi_ddiv>
 8012bd8:	ec41 0b10 	vmov	d0, r0, r1
 8012bdc:	b003      	add	sp, #12
 8012bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012be2 <__copybits>:
 8012be2:	3901      	subs	r1, #1
 8012be4:	b570      	push	{r4, r5, r6, lr}
 8012be6:	1149      	asrs	r1, r1, #5
 8012be8:	6914      	ldr	r4, [r2, #16]
 8012bea:	3101      	adds	r1, #1
 8012bec:	f102 0314 	add.w	r3, r2, #20
 8012bf0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8012bf4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8012bf8:	1f05      	subs	r5, r0, #4
 8012bfa:	42a3      	cmp	r3, r4
 8012bfc:	d30c      	bcc.n	8012c18 <__copybits+0x36>
 8012bfe:	1aa3      	subs	r3, r4, r2
 8012c00:	3b11      	subs	r3, #17
 8012c02:	f023 0303 	bic.w	r3, r3, #3
 8012c06:	3211      	adds	r2, #17
 8012c08:	42a2      	cmp	r2, r4
 8012c0a:	bf88      	it	hi
 8012c0c:	2300      	movhi	r3, #0
 8012c0e:	4418      	add	r0, r3
 8012c10:	2300      	movs	r3, #0
 8012c12:	4288      	cmp	r0, r1
 8012c14:	d305      	bcc.n	8012c22 <__copybits+0x40>
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
 8012c18:	f853 6b04 	ldr.w	r6, [r3], #4
 8012c1c:	f845 6f04 	str.w	r6, [r5, #4]!
 8012c20:	e7eb      	b.n	8012bfa <__copybits+0x18>
 8012c22:	f840 3b04 	str.w	r3, [r0], #4
 8012c26:	e7f4      	b.n	8012c12 <__copybits+0x30>

08012c28 <__any_on>:
 8012c28:	f100 0214 	add.w	r2, r0, #20
 8012c2c:	6900      	ldr	r0, [r0, #16]
 8012c2e:	114b      	asrs	r3, r1, #5
 8012c30:	4298      	cmp	r0, r3
 8012c32:	b510      	push	{r4, lr}
 8012c34:	db11      	blt.n	8012c5a <__any_on+0x32>
 8012c36:	dd0a      	ble.n	8012c4e <__any_on+0x26>
 8012c38:	f011 011f 	ands.w	r1, r1, #31
 8012c3c:	d007      	beq.n	8012c4e <__any_on+0x26>
 8012c3e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8012c42:	fa24 f001 	lsr.w	r0, r4, r1
 8012c46:	fa00 f101 	lsl.w	r1, r0, r1
 8012c4a:	428c      	cmp	r4, r1
 8012c4c:	d10b      	bne.n	8012c66 <__any_on+0x3e>
 8012c4e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d803      	bhi.n	8012c5e <__any_on+0x36>
 8012c56:	2000      	movs	r0, #0
 8012c58:	bd10      	pop	{r4, pc}
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	e7f7      	b.n	8012c4e <__any_on+0x26>
 8012c5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8012c62:	2900      	cmp	r1, #0
 8012c64:	d0f5      	beq.n	8012c52 <__any_on+0x2a>
 8012c66:	2001      	movs	r0, #1
 8012c68:	e7f6      	b.n	8012c58 <__any_on+0x30>

08012c6a <_calloc_r>:
 8012c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c6c:	fba1 2402 	umull	r2, r4, r1, r2
 8012c70:	b94c      	cbnz	r4, 8012c86 <_calloc_r+0x1c>
 8012c72:	4611      	mov	r1, r2
 8012c74:	9201      	str	r2, [sp, #4]
 8012c76:	f000 f87b 	bl	8012d70 <_malloc_r>
 8012c7a:	9a01      	ldr	r2, [sp, #4]
 8012c7c:	4605      	mov	r5, r0
 8012c7e:	b930      	cbnz	r0, 8012c8e <_calloc_r+0x24>
 8012c80:	4628      	mov	r0, r5
 8012c82:	b003      	add	sp, #12
 8012c84:	bd30      	pop	{r4, r5, pc}
 8012c86:	220c      	movs	r2, #12
 8012c88:	6002      	str	r2, [r0, #0]
 8012c8a:	2500      	movs	r5, #0
 8012c8c:	e7f8      	b.n	8012c80 <_calloc_r+0x16>
 8012c8e:	4621      	mov	r1, r4
 8012c90:	f7fc fbce 	bl	800f430 <memset>
 8012c94:	e7f4      	b.n	8012c80 <_calloc_r+0x16>
	...

08012c98 <_free_r>:
 8012c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012c9a:	2900      	cmp	r1, #0
 8012c9c:	d044      	beq.n	8012d28 <_free_r+0x90>
 8012c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012ca2:	9001      	str	r0, [sp, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8012caa:	bfb8      	it	lt
 8012cac:	18e4      	addlt	r4, r4, r3
 8012cae:	f000 fab3 	bl	8013218 <__malloc_lock>
 8012cb2:	4a1e      	ldr	r2, [pc, #120]	; (8012d2c <_free_r+0x94>)
 8012cb4:	9801      	ldr	r0, [sp, #4]
 8012cb6:	6813      	ldr	r3, [r2, #0]
 8012cb8:	b933      	cbnz	r3, 8012cc8 <_free_r+0x30>
 8012cba:	6063      	str	r3, [r4, #4]
 8012cbc:	6014      	str	r4, [r2, #0]
 8012cbe:	b003      	add	sp, #12
 8012cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012cc4:	f000 baae 	b.w	8013224 <__malloc_unlock>
 8012cc8:	42a3      	cmp	r3, r4
 8012cca:	d908      	bls.n	8012cde <_free_r+0x46>
 8012ccc:	6825      	ldr	r5, [r4, #0]
 8012cce:	1961      	adds	r1, r4, r5
 8012cd0:	428b      	cmp	r3, r1
 8012cd2:	bf01      	itttt	eq
 8012cd4:	6819      	ldreq	r1, [r3, #0]
 8012cd6:	685b      	ldreq	r3, [r3, #4]
 8012cd8:	1949      	addeq	r1, r1, r5
 8012cda:	6021      	streq	r1, [r4, #0]
 8012cdc:	e7ed      	b.n	8012cba <_free_r+0x22>
 8012cde:	461a      	mov	r2, r3
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	b10b      	cbz	r3, 8012ce8 <_free_r+0x50>
 8012ce4:	42a3      	cmp	r3, r4
 8012ce6:	d9fa      	bls.n	8012cde <_free_r+0x46>
 8012ce8:	6811      	ldr	r1, [r2, #0]
 8012cea:	1855      	adds	r5, r2, r1
 8012cec:	42a5      	cmp	r5, r4
 8012cee:	d10b      	bne.n	8012d08 <_free_r+0x70>
 8012cf0:	6824      	ldr	r4, [r4, #0]
 8012cf2:	4421      	add	r1, r4
 8012cf4:	1854      	adds	r4, r2, r1
 8012cf6:	42a3      	cmp	r3, r4
 8012cf8:	6011      	str	r1, [r2, #0]
 8012cfa:	d1e0      	bne.n	8012cbe <_free_r+0x26>
 8012cfc:	681c      	ldr	r4, [r3, #0]
 8012cfe:	685b      	ldr	r3, [r3, #4]
 8012d00:	6053      	str	r3, [r2, #4]
 8012d02:	4421      	add	r1, r4
 8012d04:	6011      	str	r1, [r2, #0]
 8012d06:	e7da      	b.n	8012cbe <_free_r+0x26>
 8012d08:	d902      	bls.n	8012d10 <_free_r+0x78>
 8012d0a:	230c      	movs	r3, #12
 8012d0c:	6003      	str	r3, [r0, #0]
 8012d0e:	e7d6      	b.n	8012cbe <_free_r+0x26>
 8012d10:	6825      	ldr	r5, [r4, #0]
 8012d12:	1961      	adds	r1, r4, r5
 8012d14:	428b      	cmp	r3, r1
 8012d16:	bf04      	itt	eq
 8012d18:	6819      	ldreq	r1, [r3, #0]
 8012d1a:	685b      	ldreq	r3, [r3, #4]
 8012d1c:	6063      	str	r3, [r4, #4]
 8012d1e:	bf04      	itt	eq
 8012d20:	1949      	addeq	r1, r1, r5
 8012d22:	6021      	streq	r1, [r4, #0]
 8012d24:	6054      	str	r4, [r2, #4]
 8012d26:	e7ca      	b.n	8012cbe <_free_r+0x26>
 8012d28:	b003      	add	sp, #12
 8012d2a:	bd30      	pop	{r4, r5, pc}
 8012d2c:	20006ba8 	.word	0x20006ba8

08012d30 <sbrk_aligned>:
 8012d30:	b570      	push	{r4, r5, r6, lr}
 8012d32:	4e0e      	ldr	r6, [pc, #56]	; (8012d6c <sbrk_aligned+0x3c>)
 8012d34:	460c      	mov	r4, r1
 8012d36:	6831      	ldr	r1, [r6, #0]
 8012d38:	4605      	mov	r5, r0
 8012d3a:	b911      	cbnz	r1, 8012d42 <sbrk_aligned+0x12>
 8012d3c:	f000 f9f0 	bl	8013120 <_sbrk_r>
 8012d40:	6030      	str	r0, [r6, #0]
 8012d42:	4621      	mov	r1, r4
 8012d44:	4628      	mov	r0, r5
 8012d46:	f000 f9eb 	bl	8013120 <_sbrk_r>
 8012d4a:	1c43      	adds	r3, r0, #1
 8012d4c:	d00a      	beq.n	8012d64 <sbrk_aligned+0x34>
 8012d4e:	1cc4      	adds	r4, r0, #3
 8012d50:	f024 0403 	bic.w	r4, r4, #3
 8012d54:	42a0      	cmp	r0, r4
 8012d56:	d007      	beq.n	8012d68 <sbrk_aligned+0x38>
 8012d58:	1a21      	subs	r1, r4, r0
 8012d5a:	4628      	mov	r0, r5
 8012d5c:	f000 f9e0 	bl	8013120 <_sbrk_r>
 8012d60:	3001      	adds	r0, #1
 8012d62:	d101      	bne.n	8012d68 <sbrk_aligned+0x38>
 8012d64:	f04f 34ff 	mov.w	r4, #4294967295
 8012d68:	4620      	mov	r0, r4
 8012d6a:	bd70      	pop	{r4, r5, r6, pc}
 8012d6c:	20006bac 	.word	0x20006bac

08012d70 <_malloc_r>:
 8012d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d74:	1ccd      	adds	r5, r1, #3
 8012d76:	f025 0503 	bic.w	r5, r5, #3
 8012d7a:	3508      	adds	r5, #8
 8012d7c:	2d0c      	cmp	r5, #12
 8012d7e:	bf38      	it	cc
 8012d80:	250c      	movcc	r5, #12
 8012d82:	2d00      	cmp	r5, #0
 8012d84:	4607      	mov	r7, r0
 8012d86:	db01      	blt.n	8012d8c <_malloc_r+0x1c>
 8012d88:	42a9      	cmp	r1, r5
 8012d8a:	d905      	bls.n	8012d98 <_malloc_r+0x28>
 8012d8c:	230c      	movs	r3, #12
 8012d8e:	603b      	str	r3, [r7, #0]
 8012d90:	2600      	movs	r6, #0
 8012d92:	4630      	mov	r0, r6
 8012d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d98:	4e2e      	ldr	r6, [pc, #184]	; (8012e54 <_malloc_r+0xe4>)
 8012d9a:	f000 fa3d 	bl	8013218 <__malloc_lock>
 8012d9e:	6833      	ldr	r3, [r6, #0]
 8012da0:	461c      	mov	r4, r3
 8012da2:	bb34      	cbnz	r4, 8012df2 <_malloc_r+0x82>
 8012da4:	4629      	mov	r1, r5
 8012da6:	4638      	mov	r0, r7
 8012da8:	f7ff ffc2 	bl	8012d30 <sbrk_aligned>
 8012dac:	1c43      	adds	r3, r0, #1
 8012dae:	4604      	mov	r4, r0
 8012db0:	d14d      	bne.n	8012e4e <_malloc_r+0xde>
 8012db2:	6834      	ldr	r4, [r6, #0]
 8012db4:	4626      	mov	r6, r4
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	d140      	bne.n	8012e3c <_malloc_r+0xcc>
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	4631      	mov	r1, r6
 8012dbe:	4638      	mov	r0, r7
 8012dc0:	eb04 0803 	add.w	r8, r4, r3
 8012dc4:	f000 f9ac 	bl	8013120 <_sbrk_r>
 8012dc8:	4580      	cmp	r8, r0
 8012dca:	d13a      	bne.n	8012e42 <_malloc_r+0xd2>
 8012dcc:	6821      	ldr	r1, [r4, #0]
 8012dce:	3503      	adds	r5, #3
 8012dd0:	1a6d      	subs	r5, r5, r1
 8012dd2:	f025 0503 	bic.w	r5, r5, #3
 8012dd6:	3508      	adds	r5, #8
 8012dd8:	2d0c      	cmp	r5, #12
 8012dda:	bf38      	it	cc
 8012ddc:	250c      	movcc	r5, #12
 8012dde:	4629      	mov	r1, r5
 8012de0:	4638      	mov	r0, r7
 8012de2:	f7ff ffa5 	bl	8012d30 <sbrk_aligned>
 8012de6:	3001      	adds	r0, #1
 8012de8:	d02b      	beq.n	8012e42 <_malloc_r+0xd2>
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	442b      	add	r3, r5
 8012dee:	6023      	str	r3, [r4, #0]
 8012df0:	e00e      	b.n	8012e10 <_malloc_r+0xa0>
 8012df2:	6822      	ldr	r2, [r4, #0]
 8012df4:	1b52      	subs	r2, r2, r5
 8012df6:	d41e      	bmi.n	8012e36 <_malloc_r+0xc6>
 8012df8:	2a0b      	cmp	r2, #11
 8012dfa:	d916      	bls.n	8012e2a <_malloc_r+0xba>
 8012dfc:	1961      	adds	r1, r4, r5
 8012dfe:	42a3      	cmp	r3, r4
 8012e00:	6025      	str	r5, [r4, #0]
 8012e02:	bf18      	it	ne
 8012e04:	6059      	strne	r1, [r3, #4]
 8012e06:	6863      	ldr	r3, [r4, #4]
 8012e08:	bf08      	it	eq
 8012e0a:	6031      	streq	r1, [r6, #0]
 8012e0c:	5162      	str	r2, [r4, r5]
 8012e0e:	604b      	str	r3, [r1, #4]
 8012e10:	4638      	mov	r0, r7
 8012e12:	f104 060b 	add.w	r6, r4, #11
 8012e16:	f000 fa05 	bl	8013224 <__malloc_unlock>
 8012e1a:	f026 0607 	bic.w	r6, r6, #7
 8012e1e:	1d23      	adds	r3, r4, #4
 8012e20:	1af2      	subs	r2, r6, r3
 8012e22:	d0b6      	beq.n	8012d92 <_malloc_r+0x22>
 8012e24:	1b9b      	subs	r3, r3, r6
 8012e26:	50a3      	str	r3, [r4, r2]
 8012e28:	e7b3      	b.n	8012d92 <_malloc_r+0x22>
 8012e2a:	6862      	ldr	r2, [r4, #4]
 8012e2c:	42a3      	cmp	r3, r4
 8012e2e:	bf0c      	ite	eq
 8012e30:	6032      	streq	r2, [r6, #0]
 8012e32:	605a      	strne	r2, [r3, #4]
 8012e34:	e7ec      	b.n	8012e10 <_malloc_r+0xa0>
 8012e36:	4623      	mov	r3, r4
 8012e38:	6864      	ldr	r4, [r4, #4]
 8012e3a:	e7b2      	b.n	8012da2 <_malloc_r+0x32>
 8012e3c:	4634      	mov	r4, r6
 8012e3e:	6876      	ldr	r6, [r6, #4]
 8012e40:	e7b9      	b.n	8012db6 <_malloc_r+0x46>
 8012e42:	230c      	movs	r3, #12
 8012e44:	603b      	str	r3, [r7, #0]
 8012e46:	4638      	mov	r0, r7
 8012e48:	f000 f9ec 	bl	8013224 <__malloc_unlock>
 8012e4c:	e7a1      	b.n	8012d92 <_malloc_r+0x22>
 8012e4e:	6025      	str	r5, [r4, #0]
 8012e50:	e7de      	b.n	8012e10 <_malloc_r+0xa0>
 8012e52:	bf00      	nop
 8012e54:	20006ba8 	.word	0x20006ba8

08012e58 <__ssputs_r>:
 8012e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e5c:	688e      	ldr	r6, [r1, #8]
 8012e5e:	429e      	cmp	r6, r3
 8012e60:	4682      	mov	sl, r0
 8012e62:	460c      	mov	r4, r1
 8012e64:	4690      	mov	r8, r2
 8012e66:	461f      	mov	r7, r3
 8012e68:	d838      	bhi.n	8012edc <__ssputs_r+0x84>
 8012e6a:	898a      	ldrh	r2, [r1, #12]
 8012e6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e70:	d032      	beq.n	8012ed8 <__ssputs_r+0x80>
 8012e72:	6825      	ldr	r5, [r4, #0]
 8012e74:	6909      	ldr	r1, [r1, #16]
 8012e76:	eba5 0901 	sub.w	r9, r5, r1
 8012e7a:	6965      	ldr	r5, [r4, #20]
 8012e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e84:	3301      	adds	r3, #1
 8012e86:	444b      	add	r3, r9
 8012e88:	106d      	asrs	r5, r5, #1
 8012e8a:	429d      	cmp	r5, r3
 8012e8c:	bf38      	it	cc
 8012e8e:	461d      	movcc	r5, r3
 8012e90:	0553      	lsls	r3, r2, #21
 8012e92:	d531      	bpl.n	8012ef8 <__ssputs_r+0xa0>
 8012e94:	4629      	mov	r1, r5
 8012e96:	f7ff ff6b 	bl	8012d70 <_malloc_r>
 8012e9a:	4606      	mov	r6, r0
 8012e9c:	b950      	cbnz	r0, 8012eb4 <__ssputs_r+0x5c>
 8012e9e:	230c      	movs	r3, #12
 8012ea0:	f8ca 3000 	str.w	r3, [sl]
 8012ea4:	89a3      	ldrh	r3, [r4, #12]
 8012ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eaa:	81a3      	strh	r3, [r4, #12]
 8012eac:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012eb4:	6921      	ldr	r1, [r4, #16]
 8012eb6:	464a      	mov	r2, r9
 8012eb8:	f7fc faac 	bl	800f414 <memcpy>
 8012ebc:	89a3      	ldrh	r3, [r4, #12]
 8012ebe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ec6:	81a3      	strh	r3, [r4, #12]
 8012ec8:	6126      	str	r6, [r4, #16]
 8012eca:	6165      	str	r5, [r4, #20]
 8012ecc:	444e      	add	r6, r9
 8012ece:	eba5 0509 	sub.w	r5, r5, r9
 8012ed2:	6026      	str	r6, [r4, #0]
 8012ed4:	60a5      	str	r5, [r4, #8]
 8012ed6:	463e      	mov	r6, r7
 8012ed8:	42be      	cmp	r6, r7
 8012eda:	d900      	bls.n	8012ede <__ssputs_r+0x86>
 8012edc:	463e      	mov	r6, r7
 8012ede:	6820      	ldr	r0, [r4, #0]
 8012ee0:	4632      	mov	r2, r6
 8012ee2:	4641      	mov	r1, r8
 8012ee4:	f000 f97e 	bl	80131e4 <memmove>
 8012ee8:	68a3      	ldr	r3, [r4, #8]
 8012eea:	1b9b      	subs	r3, r3, r6
 8012eec:	60a3      	str	r3, [r4, #8]
 8012eee:	6823      	ldr	r3, [r4, #0]
 8012ef0:	4433      	add	r3, r6
 8012ef2:	6023      	str	r3, [r4, #0]
 8012ef4:	2000      	movs	r0, #0
 8012ef6:	e7db      	b.n	8012eb0 <__ssputs_r+0x58>
 8012ef8:	462a      	mov	r2, r5
 8012efa:	f000 f999 	bl	8013230 <_realloc_r>
 8012efe:	4606      	mov	r6, r0
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d1e1      	bne.n	8012ec8 <__ssputs_r+0x70>
 8012f04:	6921      	ldr	r1, [r4, #16]
 8012f06:	4650      	mov	r0, sl
 8012f08:	f7ff fec6 	bl	8012c98 <_free_r>
 8012f0c:	e7c7      	b.n	8012e9e <__ssputs_r+0x46>
	...

08012f10 <_svfiprintf_r>:
 8012f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f14:	4698      	mov	r8, r3
 8012f16:	898b      	ldrh	r3, [r1, #12]
 8012f18:	061b      	lsls	r3, r3, #24
 8012f1a:	b09d      	sub	sp, #116	; 0x74
 8012f1c:	4607      	mov	r7, r0
 8012f1e:	460d      	mov	r5, r1
 8012f20:	4614      	mov	r4, r2
 8012f22:	d50e      	bpl.n	8012f42 <_svfiprintf_r+0x32>
 8012f24:	690b      	ldr	r3, [r1, #16]
 8012f26:	b963      	cbnz	r3, 8012f42 <_svfiprintf_r+0x32>
 8012f28:	2140      	movs	r1, #64	; 0x40
 8012f2a:	f7ff ff21 	bl	8012d70 <_malloc_r>
 8012f2e:	6028      	str	r0, [r5, #0]
 8012f30:	6128      	str	r0, [r5, #16]
 8012f32:	b920      	cbnz	r0, 8012f3e <_svfiprintf_r+0x2e>
 8012f34:	230c      	movs	r3, #12
 8012f36:	603b      	str	r3, [r7, #0]
 8012f38:	f04f 30ff 	mov.w	r0, #4294967295
 8012f3c:	e0d1      	b.n	80130e2 <_svfiprintf_r+0x1d2>
 8012f3e:	2340      	movs	r3, #64	; 0x40
 8012f40:	616b      	str	r3, [r5, #20]
 8012f42:	2300      	movs	r3, #0
 8012f44:	9309      	str	r3, [sp, #36]	; 0x24
 8012f46:	2320      	movs	r3, #32
 8012f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f50:	2330      	movs	r3, #48	; 0x30
 8012f52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80130fc <_svfiprintf_r+0x1ec>
 8012f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f5a:	f04f 0901 	mov.w	r9, #1
 8012f5e:	4623      	mov	r3, r4
 8012f60:	469a      	mov	sl, r3
 8012f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f66:	b10a      	cbz	r2, 8012f6c <_svfiprintf_r+0x5c>
 8012f68:	2a25      	cmp	r2, #37	; 0x25
 8012f6a:	d1f9      	bne.n	8012f60 <_svfiprintf_r+0x50>
 8012f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8012f70:	d00b      	beq.n	8012f8a <_svfiprintf_r+0x7a>
 8012f72:	465b      	mov	r3, fp
 8012f74:	4622      	mov	r2, r4
 8012f76:	4629      	mov	r1, r5
 8012f78:	4638      	mov	r0, r7
 8012f7a:	f7ff ff6d 	bl	8012e58 <__ssputs_r>
 8012f7e:	3001      	adds	r0, #1
 8012f80:	f000 80aa 	beq.w	80130d8 <_svfiprintf_r+0x1c8>
 8012f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f86:	445a      	add	r2, fp
 8012f88:	9209      	str	r2, [sp, #36]	; 0x24
 8012f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	f000 80a2 	beq.w	80130d8 <_svfiprintf_r+0x1c8>
 8012f94:	2300      	movs	r3, #0
 8012f96:	f04f 32ff 	mov.w	r2, #4294967295
 8012f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f9e:	f10a 0a01 	add.w	sl, sl, #1
 8012fa2:	9304      	str	r3, [sp, #16]
 8012fa4:	9307      	str	r3, [sp, #28]
 8012fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012faa:	931a      	str	r3, [sp, #104]	; 0x68
 8012fac:	4654      	mov	r4, sl
 8012fae:	2205      	movs	r2, #5
 8012fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb4:	4851      	ldr	r0, [pc, #324]	; (80130fc <_svfiprintf_r+0x1ec>)
 8012fb6:	f7ed f923 	bl	8000200 <memchr>
 8012fba:	9a04      	ldr	r2, [sp, #16]
 8012fbc:	b9d8      	cbnz	r0, 8012ff6 <_svfiprintf_r+0xe6>
 8012fbe:	06d0      	lsls	r0, r2, #27
 8012fc0:	bf44      	itt	mi
 8012fc2:	2320      	movmi	r3, #32
 8012fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fc8:	0711      	lsls	r1, r2, #28
 8012fca:	bf44      	itt	mi
 8012fcc:	232b      	movmi	r3, #43	; 0x2b
 8012fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8012fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8012fd8:	d015      	beq.n	8013006 <_svfiprintf_r+0xf6>
 8012fda:	9a07      	ldr	r2, [sp, #28]
 8012fdc:	4654      	mov	r4, sl
 8012fde:	2000      	movs	r0, #0
 8012fe0:	f04f 0c0a 	mov.w	ip, #10
 8012fe4:	4621      	mov	r1, r4
 8012fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012fea:	3b30      	subs	r3, #48	; 0x30
 8012fec:	2b09      	cmp	r3, #9
 8012fee:	d94e      	bls.n	801308e <_svfiprintf_r+0x17e>
 8012ff0:	b1b0      	cbz	r0, 8013020 <_svfiprintf_r+0x110>
 8012ff2:	9207      	str	r2, [sp, #28]
 8012ff4:	e014      	b.n	8013020 <_svfiprintf_r+0x110>
 8012ff6:	eba0 0308 	sub.w	r3, r0, r8
 8012ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8012ffe:	4313      	orrs	r3, r2
 8013000:	9304      	str	r3, [sp, #16]
 8013002:	46a2      	mov	sl, r4
 8013004:	e7d2      	b.n	8012fac <_svfiprintf_r+0x9c>
 8013006:	9b03      	ldr	r3, [sp, #12]
 8013008:	1d19      	adds	r1, r3, #4
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	9103      	str	r1, [sp, #12]
 801300e:	2b00      	cmp	r3, #0
 8013010:	bfbb      	ittet	lt
 8013012:	425b      	neglt	r3, r3
 8013014:	f042 0202 	orrlt.w	r2, r2, #2
 8013018:	9307      	strge	r3, [sp, #28]
 801301a:	9307      	strlt	r3, [sp, #28]
 801301c:	bfb8      	it	lt
 801301e:	9204      	strlt	r2, [sp, #16]
 8013020:	7823      	ldrb	r3, [r4, #0]
 8013022:	2b2e      	cmp	r3, #46	; 0x2e
 8013024:	d10c      	bne.n	8013040 <_svfiprintf_r+0x130>
 8013026:	7863      	ldrb	r3, [r4, #1]
 8013028:	2b2a      	cmp	r3, #42	; 0x2a
 801302a:	d135      	bne.n	8013098 <_svfiprintf_r+0x188>
 801302c:	9b03      	ldr	r3, [sp, #12]
 801302e:	1d1a      	adds	r2, r3, #4
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	9203      	str	r2, [sp, #12]
 8013034:	2b00      	cmp	r3, #0
 8013036:	bfb8      	it	lt
 8013038:	f04f 33ff 	movlt.w	r3, #4294967295
 801303c:	3402      	adds	r4, #2
 801303e:	9305      	str	r3, [sp, #20]
 8013040:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801310c <_svfiprintf_r+0x1fc>
 8013044:	7821      	ldrb	r1, [r4, #0]
 8013046:	2203      	movs	r2, #3
 8013048:	4650      	mov	r0, sl
 801304a:	f7ed f8d9 	bl	8000200 <memchr>
 801304e:	b140      	cbz	r0, 8013062 <_svfiprintf_r+0x152>
 8013050:	2340      	movs	r3, #64	; 0x40
 8013052:	eba0 000a 	sub.w	r0, r0, sl
 8013056:	fa03 f000 	lsl.w	r0, r3, r0
 801305a:	9b04      	ldr	r3, [sp, #16]
 801305c:	4303      	orrs	r3, r0
 801305e:	3401      	adds	r4, #1
 8013060:	9304      	str	r3, [sp, #16]
 8013062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013066:	4826      	ldr	r0, [pc, #152]	; (8013100 <_svfiprintf_r+0x1f0>)
 8013068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801306c:	2206      	movs	r2, #6
 801306e:	f7ed f8c7 	bl	8000200 <memchr>
 8013072:	2800      	cmp	r0, #0
 8013074:	d038      	beq.n	80130e8 <_svfiprintf_r+0x1d8>
 8013076:	4b23      	ldr	r3, [pc, #140]	; (8013104 <_svfiprintf_r+0x1f4>)
 8013078:	bb1b      	cbnz	r3, 80130c2 <_svfiprintf_r+0x1b2>
 801307a:	9b03      	ldr	r3, [sp, #12]
 801307c:	3307      	adds	r3, #7
 801307e:	f023 0307 	bic.w	r3, r3, #7
 8013082:	3308      	adds	r3, #8
 8013084:	9303      	str	r3, [sp, #12]
 8013086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013088:	4433      	add	r3, r6
 801308a:	9309      	str	r3, [sp, #36]	; 0x24
 801308c:	e767      	b.n	8012f5e <_svfiprintf_r+0x4e>
 801308e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013092:	460c      	mov	r4, r1
 8013094:	2001      	movs	r0, #1
 8013096:	e7a5      	b.n	8012fe4 <_svfiprintf_r+0xd4>
 8013098:	2300      	movs	r3, #0
 801309a:	3401      	adds	r4, #1
 801309c:	9305      	str	r3, [sp, #20]
 801309e:	4619      	mov	r1, r3
 80130a0:	f04f 0c0a 	mov.w	ip, #10
 80130a4:	4620      	mov	r0, r4
 80130a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80130aa:	3a30      	subs	r2, #48	; 0x30
 80130ac:	2a09      	cmp	r2, #9
 80130ae:	d903      	bls.n	80130b8 <_svfiprintf_r+0x1a8>
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d0c5      	beq.n	8013040 <_svfiprintf_r+0x130>
 80130b4:	9105      	str	r1, [sp, #20]
 80130b6:	e7c3      	b.n	8013040 <_svfiprintf_r+0x130>
 80130b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80130bc:	4604      	mov	r4, r0
 80130be:	2301      	movs	r3, #1
 80130c0:	e7f0      	b.n	80130a4 <_svfiprintf_r+0x194>
 80130c2:	ab03      	add	r3, sp, #12
 80130c4:	9300      	str	r3, [sp, #0]
 80130c6:	462a      	mov	r2, r5
 80130c8:	4b0f      	ldr	r3, [pc, #60]	; (8013108 <_svfiprintf_r+0x1f8>)
 80130ca:	a904      	add	r1, sp, #16
 80130cc:	4638      	mov	r0, r7
 80130ce:	f7fc fa57 	bl	800f580 <_printf_float>
 80130d2:	1c42      	adds	r2, r0, #1
 80130d4:	4606      	mov	r6, r0
 80130d6:	d1d6      	bne.n	8013086 <_svfiprintf_r+0x176>
 80130d8:	89ab      	ldrh	r3, [r5, #12]
 80130da:	065b      	lsls	r3, r3, #25
 80130dc:	f53f af2c 	bmi.w	8012f38 <_svfiprintf_r+0x28>
 80130e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80130e2:	b01d      	add	sp, #116	; 0x74
 80130e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e8:	ab03      	add	r3, sp, #12
 80130ea:	9300      	str	r3, [sp, #0]
 80130ec:	462a      	mov	r2, r5
 80130ee:	4b06      	ldr	r3, [pc, #24]	; (8013108 <_svfiprintf_r+0x1f8>)
 80130f0:	a904      	add	r1, sp, #16
 80130f2:	4638      	mov	r0, r7
 80130f4:	f7fc fce8 	bl	800fac8 <_printf_i>
 80130f8:	e7eb      	b.n	80130d2 <_svfiprintf_r+0x1c2>
 80130fa:	bf00      	nop
 80130fc:	08015d1c 	.word	0x08015d1c
 8013100:	08015d26 	.word	0x08015d26
 8013104:	0800f581 	.word	0x0800f581
 8013108:	08012e59 	.word	0x08012e59
 801310c:	08015d22 	.word	0x08015d22

08013110 <nan>:
 8013110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013118 <nan+0x8>
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	00000000 	.word	0x00000000
 801311c:	7ff80000 	.word	0x7ff80000

08013120 <_sbrk_r>:
 8013120:	b538      	push	{r3, r4, r5, lr}
 8013122:	4d06      	ldr	r5, [pc, #24]	; (801313c <_sbrk_r+0x1c>)
 8013124:	2300      	movs	r3, #0
 8013126:	4604      	mov	r4, r0
 8013128:	4608      	mov	r0, r1
 801312a:	602b      	str	r3, [r5, #0]
 801312c:	f7ee fd96 	bl	8001c5c <_sbrk>
 8013130:	1c43      	adds	r3, r0, #1
 8013132:	d102      	bne.n	801313a <_sbrk_r+0x1a>
 8013134:	682b      	ldr	r3, [r5, #0]
 8013136:	b103      	cbz	r3, 801313a <_sbrk_r+0x1a>
 8013138:	6023      	str	r3, [r4, #0]
 801313a:	bd38      	pop	{r3, r4, r5, pc}
 801313c:	20006bb0 	.word	0x20006bb0

08013140 <strncmp>:
 8013140:	b510      	push	{r4, lr}
 8013142:	b17a      	cbz	r2, 8013164 <strncmp+0x24>
 8013144:	4603      	mov	r3, r0
 8013146:	3901      	subs	r1, #1
 8013148:	1884      	adds	r4, r0, r2
 801314a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801314e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8013152:	4290      	cmp	r0, r2
 8013154:	d101      	bne.n	801315a <strncmp+0x1a>
 8013156:	42a3      	cmp	r3, r4
 8013158:	d101      	bne.n	801315e <strncmp+0x1e>
 801315a:	1a80      	subs	r0, r0, r2
 801315c:	bd10      	pop	{r4, pc}
 801315e:	2800      	cmp	r0, #0
 8013160:	d1f3      	bne.n	801314a <strncmp+0xa>
 8013162:	e7fa      	b.n	801315a <strncmp+0x1a>
 8013164:	4610      	mov	r0, r2
 8013166:	e7f9      	b.n	801315c <strncmp+0x1c>

08013168 <__ascii_wctomb>:
 8013168:	b149      	cbz	r1, 801317e <__ascii_wctomb+0x16>
 801316a:	2aff      	cmp	r2, #255	; 0xff
 801316c:	bf85      	ittet	hi
 801316e:	238a      	movhi	r3, #138	; 0x8a
 8013170:	6003      	strhi	r3, [r0, #0]
 8013172:	700a      	strbls	r2, [r1, #0]
 8013174:	f04f 30ff 	movhi.w	r0, #4294967295
 8013178:	bf98      	it	ls
 801317a:	2001      	movls	r0, #1
 801317c:	4770      	bx	lr
 801317e:	4608      	mov	r0, r1
 8013180:	4770      	bx	lr
	...

08013184 <__assert_func>:
 8013184:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013186:	4614      	mov	r4, r2
 8013188:	461a      	mov	r2, r3
 801318a:	4b09      	ldr	r3, [pc, #36]	; (80131b0 <__assert_func+0x2c>)
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4605      	mov	r5, r0
 8013190:	68d8      	ldr	r0, [r3, #12]
 8013192:	b14c      	cbz	r4, 80131a8 <__assert_func+0x24>
 8013194:	4b07      	ldr	r3, [pc, #28]	; (80131b4 <__assert_func+0x30>)
 8013196:	9100      	str	r1, [sp, #0]
 8013198:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801319c:	4906      	ldr	r1, [pc, #24]	; (80131b8 <__assert_func+0x34>)
 801319e:	462b      	mov	r3, r5
 80131a0:	f000 f80e 	bl	80131c0 <fiprintf>
 80131a4:	f000 fa8c 	bl	80136c0 <abort>
 80131a8:	4b04      	ldr	r3, [pc, #16]	; (80131bc <__assert_func+0x38>)
 80131aa:	461c      	mov	r4, r3
 80131ac:	e7f3      	b.n	8013196 <__assert_func+0x12>
 80131ae:	bf00      	nop
 80131b0:	2000017c 	.word	0x2000017c
 80131b4:	08015d2d 	.word	0x08015d2d
 80131b8:	08015d3a 	.word	0x08015d3a
 80131bc:	08015d68 	.word	0x08015d68

080131c0 <fiprintf>:
 80131c0:	b40e      	push	{r1, r2, r3}
 80131c2:	b503      	push	{r0, r1, lr}
 80131c4:	4601      	mov	r1, r0
 80131c6:	ab03      	add	r3, sp, #12
 80131c8:	4805      	ldr	r0, [pc, #20]	; (80131e0 <fiprintf+0x20>)
 80131ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80131ce:	6800      	ldr	r0, [r0, #0]
 80131d0:	9301      	str	r3, [sp, #4]
 80131d2:	f000 f885 	bl	80132e0 <_vfiprintf_r>
 80131d6:	b002      	add	sp, #8
 80131d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80131dc:	b003      	add	sp, #12
 80131de:	4770      	bx	lr
 80131e0:	2000017c 	.word	0x2000017c

080131e4 <memmove>:
 80131e4:	4288      	cmp	r0, r1
 80131e6:	b510      	push	{r4, lr}
 80131e8:	eb01 0402 	add.w	r4, r1, r2
 80131ec:	d902      	bls.n	80131f4 <memmove+0x10>
 80131ee:	4284      	cmp	r4, r0
 80131f0:	4623      	mov	r3, r4
 80131f2:	d807      	bhi.n	8013204 <memmove+0x20>
 80131f4:	1e43      	subs	r3, r0, #1
 80131f6:	42a1      	cmp	r1, r4
 80131f8:	d008      	beq.n	801320c <memmove+0x28>
 80131fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013202:	e7f8      	b.n	80131f6 <memmove+0x12>
 8013204:	4402      	add	r2, r0
 8013206:	4601      	mov	r1, r0
 8013208:	428a      	cmp	r2, r1
 801320a:	d100      	bne.n	801320e <memmove+0x2a>
 801320c:	bd10      	pop	{r4, pc}
 801320e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013216:	e7f7      	b.n	8013208 <memmove+0x24>

08013218 <__malloc_lock>:
 8013218:	4801      	ldr	r0, [pc, #4]	; (8013220 <__malloc_lock+0x8>)
 801321a:	f000 bc11 	b.w	8013a40 <__retarget_lock_acquire_recursive>
 801321e:	bf00      	nop
 8013220:	20006bb4 	.word	0x20006bb4

08013224 <__malloc_unlock>:
 8013224:	4801      	ldr	r0, [pc, #4]	; (801322c <__malloc_unlock+0x8>)
 8013226:	f000 bc0c 	b.w	8013a42 <__retarget_lock_release_recursive>
 801322a:	bf00      	nop
 801322c:	20006bb4 	.word	0x20006bb4

08013230 <_realloc_r>:
 8013230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013234:	4680      	mov	r8, r0
 8013236:	4614      	mov	r4, r2
 8013238:	460e      	mov	r6, r1
 801323a:	b921      	cbnz	r1, 8013246 <_realloc_r+0x16>
 801323c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013240:	4611      	mov	r1, r2
 8013242:	f7ff bd95 	b.w	8012d70 <_malloc_r>
 8013246:	b92a      	cbnz	r2, 8013254 <_realloc_r+0x24>
 8013248:	f7ff fd26 	bl	8012c98 <_free_r>
 801324c:	4625      	mov	r5, r4
 801324e:	4628      	mov	r0, r5
 8013250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013254:	f000 fc5c 	bl	8013b10 <_malloc_usable_size_r>
 8013258:	4284      	cmp	r4, r0
 801325a:	4607      	mov	r7, r0
 801325c:	d802      	bhi.n	8013264 <_realloc_r+0x34>
 801325e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013262:	d812      	bhi.n	801328a <_realloc_r+0x5a>
 8013264:	4621      	mov	r1, r4
 8013266:	4640      	mov	r0, r8
 8013268:	f7ff fd82 	bl	8012d70 <_malloc_r>
 801326c:	4605      	mov	r5, r0
 801326e:	2800      	cmp	r0, #0
 8013270:	d0ed      	beq.n	801324e <_realloc_r+0x1e>
 8013272:	42bc      	cmp	r4, r7
 8013274:	4622      	mov	r2, r4
 8013276:	4631      	mov	r1, r6
 8013278:	bf28      	it	cs
 801327a:	463a      	movcs	r2, r7
 801327c:	f7fc f8ca 	bl	800f414 <memcpy>
 8013280:	4631      	mov	r1, r6
 8013282:	4640      	mov	r0, r8
 8013284:	f7ff fd08 	bl	8012c98 <_free_r>
 8013288:	e7e1      	b.n	801324e <_realloc_r+0x1e>
 801328a:	4635      	mov	r5, r6
 801328c:	e7df      	b.n	801324e <_realloc_r+0x1e>

0801328e <__sfputc_r>:
 801328e:	6893      	ldr	r3, [r2, #8]
 8013290:	3b01      	subs	r3, #1
 8013292:	2b00      	cmp	r3, #0
 8013294:	b410      	push	{r4}
 8013296:	6093      	str	r3, [r2, #8]
 8013298:	da08      	bge.n	80132ac <__sfputc_r+0x1e>
 801329a:	6994      	ldr	r4, [r2, #24]
 801329c:	42a3      	cmp	r3, r4
 801329e:	db01      	blt.n	80132a4 <__sfputc_r+0x16>
 80132a0:	290a      	cmp	r1, #10
 80132a2:	d103      	bne.n	80132ac <__sfputc_r+0x1e>
 80132a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132a8:	f000 b94a 	b.w	8013540 <__swbuf_r>
 80132ac:	6813      	ldr	r3, [r2, #0]
 80132ae:	1c58      	adds	r0, r3, #1
 80132b0:	6010      	str	r0, [r2, #0]
 80132b2:	7019      	strb	r1, [r3, #0]
 80132b4:	4608      	mov	r0, r1
 80132b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80132ba:	4770      	bx	lr

080132bc <__sfputs_r>:
 80132bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	4614      	mov	r4, r2
 80132c4:	18d5      	adds	r5, r2, r3
 80132c6:	42ac      	cmp	r4, r5
 80132c8:	d101      	bne.n	80132ce <__sfputs_r+0x12>
 80132ca:	2000      	movs	r0, #0
 80132cc:	e007      	b.n	80132de <__sfputs_r+0x22>
 80132ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132d2:	463a      	mov	r2, r7
 80132d4:	4630      	mov	r0, r6
 80132d6:	f7ff ffda 	bl	801328e <__sfputc_r>
 80132da:	1c43      	adds	r3, r0, #1
 80132dc:	d1f3      	bne.n	80132c6 <__sfputs_r+0xa>
 80132de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080132e0 <_vfiprintf_r>:
 80132e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132e4:	460d      	mov	r5, r1
 80132e6:	b09d      	sub	sp, #116	; 0x74
 80132e8:	4614      	mov	r4, r2
 80132ea:	4698      	mov	r8, r3
 80132ec:	4606      	mov	r6, r0
 80132ee:	b118      	cbz	r0, 80132f8 <_vfiprintf_r+0x18>
 80132f0:	6983      	ldr	r3, [r0, #24]
 80132f2:	b90b      	cbnz	r3, 80132f8 <_vfiprintf_r+0x18>
 80132f4:	f000 fb06 	bl	8013904 <__sinit>
 80132f8:	4b89      	ldr	r3, [pc, #548]	; (8013520 <_vfiprintf_r+0x240>)
 80132fa:	429d      	cmp	r5, r3
 80132fc:	d11b      	bne.n	8013336 <_vfiprintf_r+0x56>
 80132fe:	6875      	ldr	r5, [r6, #4]
 8013300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013302:	07d9      	lsls	r1, r3, #31
 8013304:	d405      	bmi.n	8013312 <_vfiprintf_r+0x32>
 8013306:	89ab      	ldrh	r3, [r5, #12]
 8013308:	059a      	lsls	r2, r3, #22
 801330a:	d402      	bmi.n	8013312 <_vfiprintf_r+0x32>
 801330c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801330e:	f000 fb97 	bl	8013a40 <__retarget_lock_acquire_recursive>
 8013312:	89ab      	ldrh	r3, [r5, #12]
 8013314:	071b      	lsls	r3, r3, #28
 8013316:	d501      	bpl.n	801331c <_vfiprintf_r+0x3c>
 8013318:	692b      	ldr	r3, [r5, #16]
 801331a:	b9eb      	cbnz	r3, 8013358 <_vfiprintf_r+0x78>
 801331c:	4629      	mov	r1, r5
 801331e:	4630      	mov	r0, r6
 8013320:	f000 f960 	bl	80135e4 <__swsetup_r>
 8013324:	b1c0      	cbz	r0, 8013358 <_vfiprintf_r+0x78>
 8013326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013328:	07dc      	lsls	r4, r3, #31
 801332a:	d50e      	bpl.n	801334a <_vfiprintf_r+0x6a>
 801332c:	f04f 30ff 	mov.w	r0, #4294967295
 8013330:	b01d      	add	sp, #116	; 0x74
 8013332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013336:	4b7b      	ldr	r3, [pc, #492]	; (8013524 <_vfiprintf_r+0x244>)
 8013338:	429d      	cmp	r5, r3
 801333a:	d101      	bne.n	8013340 <_vfiprintf_r+0x60>
 801333c:	68b5      	ldr	r5, [r6, #8]
 801333e:	e7df      	b.n	8013300 <_vfiprintf_r+0x20>
 8013340:	4b79      	ldr	r3, [pc, #484]	; (8013528 <_vfiprintf_r+0x248>)
 8013342:	429d      	cmp	r5, r3
 8013344:	bf08      	it	eq
 8013346:	68f5      	ldreq	r5, [r6, #12]
 8013348:	e7da      	b.n	8013300 <_vfiprintf_r+0x20>
 801334a:	89ab      	ldrh	r3, [r5, #12]
 801334c:	0598      	lsls	r0, r3, #22
 801334e:	d4ed      	bmi.n	801332c <_vfiprintf_r+0x4c>
 8013350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013352:	f000 fb76 	bl	8013a42 <__retarget_lock_release_recursive>
 8013356:	e7e9      	b.n	801332c <_vfiprintf_r+0x4c>
 8013358:	2300      	movs	r3, #0
 801335a:	9309      	str	r3, [sp, #36]	; 0x24
 801335c:	2320      	movs	r3, #32
 801335e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013362:	f8cd 800c 	str.w	r8, [sp, #12]
 8013366:	2330      	movs	r3, #48	; 0x30
 8013368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801352c <_vfiprintf_r+0x24c>
 801336c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013370:	f04f 0901 	mov.w	r9, #1
 8013374:	4623      	mov	r3, r4
 8013376:	469a      	mov	sl, r3
 8013378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801337c:	b10a      	cbz	r2, 8013382 <_vfiprintf_r+0xa2>
 801337e:	2a25      	cmp	r2, #37	; 0x25
 8013380:	d1f9      	bne.n	8013376 <_vfiprintf_r+0x96>
 8013382:	ebba 0b04 	subs.w	fp, sl, r4
 8013386:	d00b      	beq.n	80133a0 <_vfiprintf_r+0xc0>
 8013388:	465b      	mov	r3, fp
 801338a:	4622      	mov	r2, r4
 801338c:	4629      	mov	r1, r5
 801338e:	4630      	mov	r0, r6
 8013390:	f7ff ff94 	bl	80132bc <__sfputs_r>
 8013394:	3001      	adds	r0, #1
 8013396:	f000 80aa 	beq.w	80134ee <_vfiprintf_r+0x20e>
 801339a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801339c:	445a      	add	r2, fp
 801339e:	9209      	str	r2, [sp, #36]	; 0x24
 80133a0:	f89a 3000 	ldrb.w	r3, [sl]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f000 80a2 	beq.w	80134ee <_vfiprintf_r+0x20e>
 80133aa:	2300      	movs	r3, #0
 80133ac:	f04f 32ff 	mov.w	r2, #4294967295
 80133b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80133b4:	f10a 0a01 	add.w	sl, sl, #1
 80133b8:	9304      	str	r3, [sp, #16]
 80133ba:	9307      	str	r3, [sp, #28]
 80133bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80133c0:	931a      	str	r3, [sp, #104]	; 0x68
 80133c2:	4654      	mov	r4, sl
 80133c4:	2205      	movs	r2, #5
 80133c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80133ca:	4858      	ldr	r0, [pc, #352]	; (801352c <_vfiprintf_r+0x24c>)
 80133cc:	f7ec ff18 	bl	8000200 <memchr>
 80133d0:	9a04      	ldr	r2, [sp, #16]
 80133d2:	b9d8      	cbnz	r0, 801340c <_vfiprintf_r+0x12c>
 80133d4:	06d1      	lsls	r1, r2, #27
 80133d6:	bf44      	itt	mi
 80133d8:	2320      	movmi	r3, #32
 80133da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133de:	0713      	lsls	r3, r2, #28
 80133e0:	bf44      	itt	mi
 80133e2:	232b      	movmi	r3, #43	; 0x2b
 80133e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80133e8:	f89a 3000 	ldrb.w	r3, [sl]
 80133ec:	2b2a      	cmp	r3, #42	; 0x2a
 80133ee:	d015      	beq.n	801341c <_vfiprintf_r+0x13c>
 80133f0:	9a07      	ldr	r2, [sp, #28]
 80133f2:	4654      	mov	r4, sl
 80133f4:	2000      	movs	r0, #0
 80133f6:	f04f 0c0a 	mov.w	ip, #10
 80133fa:	4621      	mov	r1, r4
 80133fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013400:	3b30      	subs	r3, #48	; 0x30
 8013402:	2b09      	cmp	r3, #9
 8013404:	d94e      	bls.n	80134a4 <_vfiprintf_r+0x1c4>
 8013406:	b1b0      	cbz	r0, 8013436 <_vfiprintf_r+0x156>
 8013408:	9207      	str	r2, [sp, #28]
 801340a:	e014      	b.n	8013436 <_vfiprintf_r+0x156>
 801340c:	eba0 0308 	sub.w	r3, r0, r8
 8013410:	fa09 f303 	lsl.w	r3, r9, r3
 8013414:	4313      	orrs	r3, r2
 8013416:	9304      	str	r3, [sp, #16]
 8013418:	46a2      	mov	sl, r4
 801341a:	e7d2      	b.n	80133c2 <_vfiprintf_r+0xe2>
 801341c:	9b03      	ldr	r3, [sp, #12]
 801341e:	1d19      	adds	r1, r3, #4
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	9103      	str	r1, [sp, #12]
 8013424:	2b00      	cmp	r3, #0
 8013426:	bfbb      	ittet	lt
 8013428:	425b      	neglt	r3, r3
 801342a:	f042 0202 	orrlt.w	r2, r2, #2
 801342e:	9307      	strge	r3, [sp, #28]
 8013430:	9307      	strlt	r3, [sp, #28]
 8013432:	bfb8      	it	lt
 8013434:	9204      	strlt	r2, [sp, #16]
 8013436:	7823      	ldrb	r3, [r4, #0]
 8013438:	2b2e      	cmp	r3, #46	; 0x2e
 801343a:	d10c      	bne.n	8013456 <_vfiprintf_r+0x176>
 801343c:	7863      	ldrb	r3, [r4, #1]
 801343e:	2b2a      	cmp	r3, #42	; 0x2a
 8013440:	d135      	bne.n	80134ae <_vfiprintf_r+0x1ce>
 8013442:	9b03      	ldr	r3, [sp, #12]
 8013444:	1d1a      	adds	r2, r3, #4
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	9203      	str	r2, [sp, #12]
 801344a:	2b00      	cmp	r3, #0
 801344c:	bfb8      	it	lt
 801344e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013452:	3402      	adds	r4, #2
 8013454:	9305      	str	r3, [sp, #20]
 8013456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801353c <_vfiprintf_r+0x25c>
 801345a:	7821      	ldrb	r1, [r4, #0]
 801345c:	2203      	movs	r2, #3
 801345e:	4650      	mov	r0, sl
 8013460:	f7ec fece 	bl	8000200 <memchr>
 8013464:	b140      	cbz	r0, 8013478 <_vfiprintf_r+0x198>
 8013466:	2340      	movs	r3, #64	; 0x40
 8013468:	eba0 000a 	sub.w	r0, r0, sl
 801346c:	fa03 f000 	lsl.w	r0, r3, r0
 8013470:	9b04      	ldr	r3, [sp, #16]
 8013472:	4303      	orrs	r3, r0
 8013474:	3401      	adds	r4, #1
 8013476:	9304      	str	r3, [sp, #16]
 8013478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801347c:	482c      	ldr	r0, [pc, #176]	; (8013530 <_vfiprintf_r+0x250>)
 801347e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013482:	2206      	movs	r2, #6
 8013484:	f7ec febc 	bl	8000200 <memchr>
 8013488:	2800      	cmp	r0, #0
 801348a:	d03f      	beq.n	801350c <_vfiprintf_r+0x22c>
 801348c:	4b29      	ldr	r3, [pc, #164]	; (8013534 <_vfiprintf_r+0x254>)
 801348e:	bb1b      	cbnz	r3, 80134d8 <_vfiprintf_r+0x1f8>
 8013490:	9b03      	ldr	r3, [sp, #12]
 8013492:	3307      	adds	r3, #7
 8013494:	f023 0307 	bic.w	r3, r3, #7
 8013498:	3308      	adds	r3, #8
 801349a:	9303      	str	r3, [sp, #12]
 801349c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801349e:	443b      	add	r3, r7
 80134a0:	9309      	str	r3, [sp, #36]	; 0x24
 80134a2:	e767      	b.n	8013374 <_vfiprintf_r+0x94>
 80134a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80134a8:	460c      	mov	r4, r1
 80134aa:	2001      	movs	r0, #1
 80134ac:	e7a5      	b.n	80133fa <_vfiprintf_r+0x11a>
 80134ae:	2300      	movs	r3, #0
 80134b0:	3401      	adds	r4, #1
 80134b2:	9305      	str	r3, [sp, #20]
 80134b4:	4619      	mov	r1, r3
 80134b6:	f04f 0c0a 	mov.w	ip, #10
 80134ba:	4620      	mov	r0, r4
 80134bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80134c0:	3a30      	subs	r2, #48	; 0x30
 80134c2:	2a09      	cmp	r2, #9
 80134c4:	d903      	bls.n	80134ce <_vfiprintf_r+0x1ee>
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d0c5      	beq.n	8013456 <_vfiprintf_r+0x176>
 80134ca:	9105      	str	r1, [sp, #20]
 80134cc:	e7c3      	b.n	8013456 <_vfiprintf_r+0x176>
 80134ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80134d2:	4604      	mov	r4, r0
 80134d4:	2301      	movs	r3, #1
 80134d6:	e7f0      	b.n	80134ba <_vfiprintf_r+0x1da>
 80134d8:	ab03      	add	r3, sp, #12
 80134da:	9300      	str	r3, [sp, #0]
 80134dc:	462a      	mov	r2, r5
 80134de:	4b16      	ldr	r3, [pc, #88]	; (8013538 <_vfiprintf_r+0x258>)
 80134e0:	a904      	add	r1, sp, #16
 80134e2:	4630      	mov	r0, r6
 80134e4:	f7fc f84c 	bl	800f580 <_printf_float>
 80134e8:	4607      	mov	r7, r0
 80134ea:	1c78      	adds	r0, r7, #1
 80134ec:	d1d6      	bne.n	801349c <_vfiprintf_r+0x1bc>
 80134ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80134f0:	07d9      	lsls	r1, r3, #31
 80134f2:	d405      	bmi.n	8013500 <_vfiprintf_r+0x220>
 80134f4:	89ab      	ldrh	r3, [r5, #12]
 80134f6:	059a      	lsls	r2, r3, #22
 80134f8:	d402      	bmi.n	8013500 <_vfiprintf_r+0x220>
 80134fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134fc:	f000 faa1 	bl	8013a42 <__retarget_lock_release_recursive>
 8013500:	89ab      	ldrh	r3, [r5, #12]
 8013502:	065b      	lsls	r3, r3, #25
 8013504:	f53f af12 	bmi.w	801332c <_vfiprintf_r+0x4c>
 8013508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801350a:	e711      	b.n	8013330 <_vfiprintf_r+0x50>
 801350c:	ab03      	add	r3, sp, #12
 801350e:	9300      	str	r3, [sp, #0]
 8013510:	462a      	mov	r2, r5
 8013512:	4b09      	ldr	r3, [pc, #36]	; (8013538 <_vfiprintf_r+0x258>)
 8013514:	a904      	add	r1, sp, #16
 8013516:	4630      	mov	r0, r6
 8013518:	f7fc fad6 	bl	800fac8 <_printf_i>
 801351c:	e7e4      	b.n	80134e8 <_vfiprintf_r+0x208>
 801351e:	bf00      	nop
 8013520:	08015d8c 	.word	0x08015d8c
 8013524:	08015dac 	.word	0x08015dac
 8013528:	08015d6c 	.word	0x08015d6c
 801352c:	08015d1c 	.word	0x08015d1c
 8013530:	08015d26 	.word	0x08015d26
 8013534:	0800f581 	.word	0x0800f581
 8013538:	080132bd 	.word	0x080132bd
 801353c:	08015d22 	.word	0x08015d22

08013540 <__swbuf_r>:
 8013540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013542:	460e      	mov	r6, r1
 8013544:	4614      	mov	r4, r2
 8013546:	4605      	mov	r5, r0
 8013548:	b118      	cbz	r0, 8013552 <__swbuf_r+0x12>
 801354a:	6983      	ldr	r3, [r0, #24]
 801354c:	b90b      	cbnz	r3, 8013552 <__swbuf_r+0x12>
 801354e:	f000 f9d9 	bl	8013904 <__sinit>
 8013552:	4b21      	ldr	r3, [pc, #132]	; (80135d8 <__swbuf_r+0x98>)
 8013554:	429c      	cmp	r4, r3
 8013556:	d12b      	bne.n	80135b0 <__swbuf_r+0x70>
 8013558:	686c      	ldr	r4, [r5, #4]
 801355a:	69a3      	ldr	r3, [r4, #24]
 801355c:	60a3      	str	r3, [r4, #8]
 801355e:	89a3      	ldrh	r3, [r4, #12]
 8013560:	071a      	lsls	r2, r3, #28
 8013562:	d52f      	bpl.n	80135c4 <__swbuf_r+0x84>
 8013564:	6923      	ldr	r3, [r4, #16]
 8013566:	b36b      	cbz	r3, 80135c4 <__swbuf_r+0x84>
 8013568:	6923      	ldr	r3, [r4, #16]
 801356a:	6820      	ldr	r0, [r4, #0]
 801356c:	1ac0      	subs	r0, r0, r3
 801356e:	6963      	ldr	r3, [r4, #20]
 8013570:	b2f6      	uxtb	r6, r6
 8013572:	4283      	cmp	r3, r0
 8013574:	4637      	mov	r7, r6
 8013576:	dc04      	bgt.n	8013582 <__swbuf_r+0x42>
 8013578:	4621      	mov	r1, r4
 801357a:	4628      	mov	r0, r5
 801357c:	f000 f92e 	bl	80137dc <_fflush_r>
 8013580:	bb30      	cbnz	r0, 80135d0 <__swbuf_r+0x90>
 8013582:	68a3      	ldr	r3, [r4, #8]
 8013584:	3b01      	subs	r3, #1
 8013586:	60a3      	str	r3, [r4, #8]
 8013588:	6823      	ldr	r3, [r4, #0]
 801358a:	1c5a      	adds	r2, r3, #1
 801358c:	6022      	str	r2, [r4, #0]
 801358e:	701e      	strb	r6, [r3, #0]
 8013590:	6963      	ldr	r3, [r4, #20]
 8013592:	3001      	adds	r0, #1
 8013594:	4283      	cmp	r3, r0
 8013596:	d004      	beq.n	80135a2 <__swbuf_r+0x62>
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	07db      	lsls	r3, r3, #31
 801359c:	d506      	bpl.n	80135ac <__swbuf_r+0x6c>
 801359e:	2e0a      	cmp	r6, #10
 80135a0:	d104      	bne.n	80135ac <__swbuf_r+0x6c>
 80135a2:	4621      	mov	r1, r4
 80135a4:	4628      	mov	r0, r5
 80135a6:	f000 f919 	bl	80137dc <_fflush_r>
 80135aa:	b988      	cbnz	r0, 80135d0 <__swbuf_r+0x90>
 80135ac:	4638      	mov	r0, r7
 80135ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80135b0:	4b0a      	ldr	r3, [pc, #40]	; (80135dc <__swbuf_r+0x9c>)
 80135b2:	429c      	cmp	r4, r3
 80135b4:	d101      	bne.n	80135ba <__swbuf_r+0x7a>
 80135b6:	68ac      	ldr	r4, [r5, #8]
 80135b8:	e7cf      	b.n	801355a <__swbuf_r+0x1a>
 80135ba:	4b09      	ldr	r3, [pc, #36]	; (80135e0 <__swbuf_r+0xa0>)
 80135bc:	429c      	cmp	r4, r3
 80135be:	bf08      	it	eq
 80135c0:	68ec      	ldreq	r4, [r5, #12]
 80135c2:	e7ca      	b.n	801355a <__swbuf_r+0x1a>
 80135c4:	4621      	mov	r1, r4
 80135c6:	4628      	mov	r0, r5
 80135c8:	f000 f80c 	bl	80135e4 <__swsetup_r>
 80135cc:	2800      	cmp	r0, #0
 80135ce:	d0cb      	beq.n	8013568 <__swbuf_r+0x28>
 80135d0:	f04f 37ff 	mov.w	r7, #4294967295
 80135d4:	e7ea      	b.n	80135ac <__swbuf_r+0x6c>
 80135d6:	bf00      	nop
 80135d8:	08015d8c 	.word	0x08015d8c
 80135dc:	08015dac 	.word	0x08015dac
 80135e0:	08015d6c 	.word	0x08015d6c

080135e4 <__swsetup_r>:
 80135e4:	4b32      	ldr	r3, [pc, #200]	; (80136b0 <__swsetup_r+0xcc>)
 80135e6:	b570      	push	{r4, r5, r6, lr}
 80135e8:	681d      	ldr	r5, [r3, #0]
 80135ea:	4606      	mov	r6, r0
 80135ec:	460c      	mov	r4, r1
 80135ee:	b125      	cbz	r5, 80135fa <__swsetup_r+0x16>
 80135f0:	69ab      	ldr	r3, [r5, #24]
 80135f2:	b913      	cbnz	r3, 80135fa <__swsetup_r+0x16>
 80135f4:	4628      	mov	r0, r5
 80135f6:	f000 f985 	bl	8013904 <__sinit>
 80135fa:	4b2e      	ldr	r3, [pc, #184]	; (80136b4 <__swsetup_r+0xd0>)
 80135fc:	429c      	cmp	r4, r3
 80135fe:	d10f      	bne.n	8013620 <__swsetup_r+0x3c>
 8013600:	686c      	ldr	r4, [r5, #4]
 8013602:	89a3      	ldrh	r3, [r4, #12]
 8013604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013608:	0719      	lsls	r1, r3, #28
 801360a:	d42c      	bmi.n	8013666 <__swsetup_r+0x82>
 801360c:	06dd      	lsls	r5, r3, #27
 801360e:	d411      	bmi.n	8013634 <__swsetup_r+0x50>
 8013610:	2309      	movs	r3, #9
 8013612:	6033      	str	r3, [r6, #0]
 8013614:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013618:	81a3      	strh	r3, [r4, #12]
 801361a:	f04f 30ff 	mov.w	r0, #4294967295
 801361e:	e03e      	b.n	801369e <__swsetup_r+0xba>
 8013620:	4b25      	ldr	r3, [pc, #148]	; (80136b8 <__swsetup_r+0xd4>)
 8013622:	429c      	cmp	r4, r3
 8013624:	d101      	bne.n	801362a <__swsetup_r+0x46>
 8013626:	68ac      	ldr	r4, [r5, #8]
 8013628:	e7eb      	b.n	8013602 <__swsetup_r+0x1e>
 801362a:	4b24      	ldr	r3, [pc, #144]	; (80136bc <__swsetup_r+0xd8>)
 801362c:	429c      	cmp	r4, r3
 801362e:	bf08      	it	eq
 8013630:	68ec      	ldreq	r4, [r5, #12]
 8013632:	e7e6      	b.n	8013602 <__swsetup_r+0x1e>
 8013634:	0758      	lsls	r0, r3, #29
 8013636:	d512      	bpl.n	801365e <__swsetup_r+0x7a>
 8013638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801363a:	b141      	cbz	r1, 801364e <__swsetup_r+0x6a>
 801363c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013640:	4299      	cmp	r1, r3
 8013642:	d002      	beq.n	801364a <__swsetup_r+0x66>
 8013644:	4630      	mov	r0, r6
 8013646:	f7ff fb27 	bl	8012c98 <_free_r>
 801364a:	2300      	movs	r3, #0
 801364c:	6363      	str	r3, [r4, #52]	; 0x34
 801364e:	89a3      	ldrh	r3, [r4, #12]
 8013650:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013654:	81a3      	strh	r3, [r4, #12]
 8013656:	2300      	movs	r3, #0
 8013658:	6063      	str	r3, [r4, #4]
 801365a:	6923      	ldr	r3, [r4, #16]
 801365c:	6023      	str	r3, [r4, #0]
 801365e:	89a3      	ldrh	r3, [r4, #12]
 8013660:	f043 0308 	orr.w	r3, r3, #8
 8013664:	81a3      	strh	r3, [r4, #12]
 8013666:	6923      	ldr	r3, [r4, #16]
 8013668:	b94b      	cbnz	r3, 801367e <__swsetup_r+0x9a>
 801366a:	89a3      	ldrh	r3, [r4, #12]
 801366c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013674:	d003      	beq.n	801367e <__swsetup_r+0x9a>
 8013676:	4621      	mov	r1, r4
 8013678:	4630      	mov	r0, r6
 801367a:	f000 fa09 	bl	8013a90 <__smakebuf_r>
 801367e:	89a0      	ldrh	r0, [r4, #12]
 8013680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013684:	f010 0301 	ands.w	r3, r0, #1
 8013688:	d00a      	beq.n	80136a0 <__swsetup_r+0xbc>
 801368a:	2300      	movs	r3, #0
 801368c:	60a3      	str	r3, [r4, #8]
 801368e:	6963      	ldr	r3, [r4, #20]
 8013690:	425b      	negs	r3, r3
 8013692:	61a3      	str	r3, [r4, #24]
 8013694:	6923      	ldr	r3, [r4, #16]
 8013696:	b943      	cbnz	r3, 80136aa <__swsetup_r+0xc6>
 8013698:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801369c:	d1ba      	bne.n	8013614 <__swsetup_r+0x30>
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	0781      	lsls	r1, r0, #30
 80136a2:	bf58      	it	pl
 80136a4:	6963      	ldrpl	r3, [r4, #20]
 80136a6:	60a3      	str	r3, [r4, #8]
 80136a8:	e7f4      	b.n	8013694 <__swsetup_r+0xb0>
 80136aa:	2000      	movs	r0, #0
 80136ac:	e7f7      	b.n	801369e <__swsetup_r+0xba>
 80136ae:	bf00      	nop
 80136b0:	2000017c 	.word	0x2000017c
 80136b4:	08015d8c 	.word	0x08015d8c
 80136b8:	08015dac 	.word	0x08015dac
 80136bc:	08015d6c 	.word	0x08015d6c

080136c0 <abort>:
 80136c0:	b508      	push	{r3, lr}
 80136c2:	2006      	movs	r0, #6
 80136c4:	f000 fa54 	bl	8013b70 <raise>
 80136c8:	2001      	movs	r0, #1
 80136ca:	f7ee fa4f 	bl	8001b6c <_exit>
	...

080136d0 <__sflush_r>:
 80136d0:	898a      	ldrh	r2, [r1, #12]
 80136d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80136d6:	4605      	mov	r5, r0
 80136d8:	0710      	lsls	r0, r2, #28
 80136da:	460c      	mov	r4, r1
 80136dc:	d458      	bmi.n	8013790 <__sflush_r+0xc0>
 80136de:	684b      	ldr	r3, [r1, #4]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	dc05      	bgt.n	80136f0 <__sflush_r+0x20>
 80136e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	dc02      	bgt.n	80136f0 <__sflush_r+0x20>
 80136ea:	2000      	movs	r0, #0
 80136ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80136f2:	2e00      	cmp	r6, #0
 80136f4:	d0f9      	beq.n	80136ea <__sflush_r+0x1a>
 80136f6:	2300      	movs	r3, #0
 80136f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80136fc:	682f      	ldr	r7, [r5, #0]
 80136fe:	602b      	str	r3, [r5, #0]
 8013700:	d032      	beq.n	8013768 <__sflush_r+0x98>
 8013702:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013704:	89a3      	ldrh	r3, [r4, #12]
 8013706:	075a      	lsls	r2, r3, #29
 8013708:	d505      	bpl.n	8013716 <__sflush_r+0x46>
 801370a:	6863      	ldr	r3, [r4, #4]
 801370c:	1ac0      	subs	r0, r0, r3
 801370e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013710:	b10b      	cbz	r3, 8013716 <__sflush_r+0x46>
 8013712:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013714:	1ac0      	subs	r0, r0, r3
 8013716:	2300      	movs	r3, #0
 8013718:	4602      	mov	r2, r0
 801371a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801371c:	6a21      	ldr	r1, [r4, #32]
 801371e:	4628      	mov	r0, r5
 8013720:	47b0      	blx	r6
 8013722:	1c43      	adds	r3, r0, #1
 8013724:	89a3      	ldrh	r3, [r4, #12]
 8013726:	d106      	bne.n	8013736 <__sflush_r+0x66>
 8013728:	6829      	ldr	r1, [r5, #0]
 801372a:	291d      	cmp	r1, #29
 801372c:	d82c      	bhi.n	8013788 <__sflush_r+0xb8>
 801372e:	4a2a      	ldr	r2, [pc, #168]	; (80137d8 <__sflush_r+0x108>)
 8013730:	40ca      	lsrs	r2, r1
 8013732:	07d6      	lsls	r6, r2, #31
 8013734:	d528      	bpl.n	8013788 <__sflush_r+0xb8>
 8013736:	2200      	movs	r2, #0
 8013738:	6062      	str	r2, [r4, #4]
 801373a:	04d9      	lsls	r1, r3, #19
 801373c:	6922      	ldr	r2, [r4, #16]
 801373e:	6022      	str	r2, [r4, #0]
 8013740:	d504      	bpl.n	801374c <__sflush_r+0x7c>
 8013742:	1c42      	adds	r2, r0, #1
 8013744:	d101      	bne.n	801374a <__sflush_r+0x7a>
 8013746:	682b      	ldr	r3, [r5, #0]
 8013748:	b903      	cbnz	r3, 801374c <__sflush_r+0x7c>
 801374a:	6560      	str	r0, [r4, #84]	; 0x54
 801374c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801374e:	602f      	str	r7, [r5, #0]
 8013750:	2900      	cmp	r1, #0
 8013752:	d0ca      	beq.n	80136ea <__sflush_r+0x1a>
 8013754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013758:	4299      	cmp	r1, r3
 801375a:	d002      	beq.n	8013762 <__sflush_r+0x92>
 801375c:	4628      	mov	r0, r5
 801375e:	f7ff fa9b 	bl	8012c98 <_free_r>
 8013762:	2000      	movs	r0, #0
 8013764:	6360      	str	r0, [r4, #52]	; 0x34
 8013766:	e7c1      	b.n	80136ec <__sflush_r+0x1c>
 8013768:	6a21      	ldr	r1, [r4, #32]
 801376a:	2301      	movs	r3, #1
 801376c:	4628      	mov	r0, r5
 801376e:	47b0      	blx	r6
 8013770:	1c41      	adds	r1, r0, #1
 8013772:	d1c7      	bne.n	8013704 <__sflush_r+0x34>
 8013774:	682b      	ldr	r3, [r5, #0]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d0c4      	beq.n	8013704 <__sflush_r+0x34>
 801377a:	2b1d      	cmp	r3, #29
 801377c:	d001      	beq.n	8013782 <__sflush_r+0xb2>
 801377e:	2b16      	cmp	r3, #22
 8013780:	d101      	bne.n	8013786 <__sflush_r+0xb6>
 8013782:	602f      	str	r7, [r5, #0]
 8013784:	e7b1      	b.n	80136ea <__sflush_r+0x1a>
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801378c:	81a3      	strh	r3, [r4, #12]
 801378e:	e7ad      	b.n	80136ec <__sflush_r+0x1c>
 8013790:	690f      	ldr	r7, [r1, #16]
 8013792:	2f00      	cmp	r7, #0
 8013794:	d0a9      	beq.n	80136ea <__sflush_r+0x1a>
 8013796:	0793      	lsls	r3, r2, #30
 8013798:	680e      	ldr	r6, [r1, #0]
 801379a:	bf08      	it	eq
 801379c:	694b      	ldreq	r3, [r1, #20]
 801379e:	600f      	str	r7, [r1, #0]
 80137a0:	bf18      	it	ne
 80137a2:	2300      	movne	r3, #0
 80137a4:	eba6 0807 	sub.w	r8, r6, r7
 80137a8:	608b      	str	r3, [r1, #8]
 80137aa:	f1b8 0f00 	cmp.w	r8, #0
 80137ae:	dd9c      	ble.n	80136ea <__sflush_r+0x1a>
 80137b0:	6a21      	ldr	r1, [r4, #32]
 80137b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80137b4:	4643      	mov	r3, r8
 80137b6:	463a      	mov	r2, r7
 80137b8:	4628      	mov	r0, r5
 80137ba:	47b0      	blx	r6
 80137bc:	2800      	cmp	r0, #0
 80137be:	dc06      	bgt.n	80137ce <__sflush_r+0xfe>
 80137c0:	89a3      	ldrh	r3, [r4, #12]
 80137c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137c6:	81a3      	strh	r3, [r4, #12]
 80137c8:	f04f 30ff 	mov.w	r0, #4294967295
 80137cc:	e78e      	b.n	80136ec <__sflush_r+0x1c>
 80137ce:	4407      	add	r7, r0
 80137d0:	eba8 0800 	sub.w	r8, r8, r0
 80137d4:	e7e9      	b.n	80137aa <__sflush_r+0xda>
 80137d6:	bf00      	nop
 80137d8:	20400001 	.word	0x20400001

080137dc <_fflush_r>:
 80137dc:	b538      	push	{r3, r4, r5, lr}
 80137de:	690b      	ldr	r3, [r1, #16]
 80137e0:	4605      	mov	r5, r0
 80137e2:	460c      	mov	r4, r1
 80137e4:	b913      	cbnz	r3, 80137ec <_fflush_r+0x10>
 80137e6:	2500      	movs	r5, #0
 80137e8:	4628      	mov	r0, r5
 80137ea:	bd38      	pop	{r3, r4, r5, pc}
 80137ec:	b118      	cbz	r0, 80137f6 <_fflush_r+0x1a>
 80137ee:	6983      	ldr	r3, [r0, #24]
 80137f0:	b90b      	cbnz	r3, 80137f6 <_fflush_r+0x1a>
 80137f2:	f000 f887 	bl	8013904 <__sinit>
 80137f6:	4b14      	ldr	r3, [pc, #80]	; (8013848 <_fflush_r+0x6c>)
 80137f8:	429c      	cmp	r4, r3
 80137fa:	d11b      	bne.n	8013834 <_fflush_r+0x58>
 80137fc:	686c      	ldr	r4, [r5, #4]
 80137fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013802:	2b00      	cmp	r3, #0
 8013804:	d0ef      	beq.n	80137e6 <_fflush_r+0xa>
 8013806:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013808:	07d0      	lsls	r0, r2, #31
 801380a:	d404      	bmi.n	8013816 <_fflush_r+0x3a>
 801380c:	0599      	lsls	r1, r3, #22
 801380e:	d402      	bmi.n	8013816 <_fflush_r+0x3a>
 8013810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013812:	f000 f915 	bl	8013a40 <__retarget_lock_acquire_recursive>
 8013816:	4628      	mov	r0, r5
 8013818:	4621      	mov	r1, r4
 801381a:	f7ff ff59 	bl	80136d0 <__sflush_r>
 801381e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013820:	07da      	lsls	r2, r3, #31
 8013822:	4605      	mov	r5, r0
 8013824:	d4e0      	bmi.n	80137e8 <_fflush_r+0xc>
 8013826:	89a3      	ldrh	r3, [r4, #12]
 8013828:	059b      	lsls	r3, r3, #22
 801382a:	d4dd      	bmi.n	80137e8 <_fflush_r+0xc>
 801382c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801382e:	f000 f908 	bl	8013a42 <__retarget_lock_release_recursive>
 8013832:	e7d9      	b.n	80137e8 <_fflush_r+0xc>
 8013834:	4b05      	ldr	r3, [pc, #20]	; (801384c <_fflush_r+0x70>)
 8013836:	429c      	cmp	r4, r3
 8013838:	d101      	bne.n	801383e <_fflush_r+0x62>
 801383a:	68ac      	ldr	r4, [r5, #8]
 801383c:	e7df      	b.n	80137fe <_fflush_r+0x22>
 801383e:	4b04      	ldr	r3, [pc, #16]	; (8013850 <_fflush_r+0x74>)
 8013840:	429c      	cmp	r4, r3
 8013842:	bf08      	it	eq
 8013844:	68ec      	ldreq	r4, [r5, #12]
 8013846:	e7da      	b.n	80137fe <_fflush_r+0x22>
 8013848:	08015d8c 	.word	0x08015d8c
 801384c:	08015dac 	.word	0x08015dac
 8013850:	08015d6c 	.word	0x08015d6c

08013854 <std>:
 8013854:	2300      	movs	r3, #0
 8013856:	b510      	push	{r4, lr}
 8013858:	4604      	mov	r4, r0
 801385a:	e9c0 3300 	strd	r3, r3, [r0]
 801385e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013862:	6083      	str	r3, [r0, #8]
 8013864:	8181      	strh	r1, [r0, #12]
 8013866:	6643      	str	r3, [r0, #100]	; 0x64
 8013868:	81c2      	strh	r2, [r0, #14]
 801386a:	6183      	str	r3, [r0, #24]
 801386c:	4619      	mov	r1, r3
 801386e:	2208      	movs	r2, #8
 8013870:	305c      	adds	r0, #92	; 0x5c
 8013872:	f7fb fddd 	bl	800f430 <memset>
 8013876:	4b05      	ldr	r3, [pc, #20]	; (801388c <std+0x38>)
 8013878:	6263      	str	r3, [r4, #36]	; 0x24
 801387a:	4b05      	ldr	r3, [pc, #20]	; (8013890 <std+0x3c>)
 801387c:	62a3      	str	r3, [r4, #40]	; 0x28
 801387e:	4b05      	ldr	r3, [pc, #20]	; (8013894 <std+0x40>)
 8013880:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013882:	4b05      	ldr	r3, [pc, #20]	; (8013898 <std+0x44>)
 8013884:	6224      	str	r4, [r4, #32]
 8013886:	6323      	str	r3, [r4, #48]	; 0x30
 8013888:	bd10      	pop	{r4, pc}
 801388a:	bf00      	nop
 801388c:	08013ba9 	.word	0x08013ba9
 8013890:	08013bcb 	.word	0x08013bcb
 8013894:	08013c03 	.word	0x08013c03
 8013898:	08013c27 	.word	0x08013c27

0801389c <_cleanup_r>:
 801389c:	4901      	ldr	r1, [pc, #4]	; (80138a4 <_cleanup_r+0x8>)
 801389e:	f000 b8af 	b.w	8013a00 <_fwalk_reent>
 80138a2:	bf00      	nop
 80138a4:	080137dd 	.word	0x080137dd

080138a8 <__sfmoreglue>:
 80138a8:	b570      	push	{r4, r5, r6, lr}
 80138aa:	2268      	movs	r2, #104	; 0x68
 80138ac:	1e4d      	subs	r5, r1, #1
 80138ae:	4355      	muls	r5, r2
 80138b0:	460e      	mov	r6, r1
 80138b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80138b6:	f7ff fa5b 	bl	8012d70 <_malloc_r>
 80138ba:	4604      	mov	r4, r0
 80138bc:	b140      	cbz	r0, 80138d0 <__sfmoreglue+0x28>
 80138be:	2100      	movs	r1, #0
 80138c0:	e9c0 1600 	strd	r1, r6, [r0]
 80138c4:	300c      	adds	r0, #12
 80138c6:	60a0      	str	r0, [r4, #8]
 80138c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80138cc:	f7fb fdb0 	bl	800f430 <memset>
 80138d0:	4620      	mov	r0, r4
 80138d2:	bd70      	pop	{r4, r5, r6, pc}

080138d4 <__sfp_lock_acquire>:
 80138d4:	4801      	ldr	r0, [pc, #4]	; (80138dc <__sfp_lock_acquire+0x8>)
 80138d6:	f000 b8b3 	b.w	8013a40 <__retarget_lock_acquire_recursive>
 80138da:	bf00      	nop
 80138dc:	20006bb5 	.word	0x20006bb5

080138e0 <__sfp_lock_release>:
 80138e0:	4801      	ldr	r0, [pc, #4]	; (80138e8 <__sfp_lock_release+0x8>)
 80138e2:	f000 b8ae 	b.w	8013a42 <__retarget_lock_release_recursive>
 80138e6:	bf00      	nop
 80138e8:	20006bb5 	.word	0x20006bb5

080138ec <__sinit_lock_acquire>:
 80138ec:	4801      	ldr	r0, [pc, #4]	; (80138f4 <__sinit_lock_acquire+0x8>)
 80138ee:	f000 b8a7 	b.w	8013a40 <__retarget_lock_acquire_recursive>
 80138f2:	bf00      	nop
 80138f4:	20006bb6 	.word	0x20006bb6

080138f8 <__sinit_lock_release>:
 80138f8:	4801      	ldr	r0, [pc, #4]	; (8013900 <__sinit_lock_release+0x8>)
 80138fa:	f000 b8a2 	b.w	8013a42 <__retarget_lock_release_recursive>
 80138fe:	bf00      	nop
 8013900:	20006bb6 	.word	0x20006bb6

08013904 <__sinit>:
 8013904:	b510      	push	{r4, lr}
 8013906:	4604      	mov	r4, r0
 8013908:	f7ff fff0 	bl	80138ec <__sinit_lock_acquire>
 801390c:	69a3      	ldr	r3, [r4, #24]
 801390e:	b11b      	cbz	r3, 8013918 <__sinit+0x14>
 8013910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013914:	f7ff bff0 	b.w	80138f8 <__sinit_lock_release>
 8013918:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801391c:	6523      	str	r3, [r4, #80]	; 0x50
 801391e:	4b13      	ldr	r3, [pc, #76]	; (801396c <__sinit+0x68>)
 8013920:	4a13      	ldr	r2, [pc, #76]	; (8013970 <__sinit+0x6c>)
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	62a2      	str	r2, [r4, #40]	; 0x28
 8013926:	42a3      	cmp	r3, r4
 8013928:	bf04      	itt	eq
 801392a:	2301      	moveq	r3, #1
 801392c:	61a3      	streq	r3, [r4, #24]
 801392e:	4620      	mov	r0, r4
 8013930:	f000 f820 	bl	8013974 <__sfp>
 8013934:	6060      	str	r0, [r4, #4]
 8013936:	4620      	mov	r0, r4
 8013938:	f000 f81c 	bl	8013974 <__sfp>
 801393c:	60a0      	str	r0, [r4, #8]
 801393e:	4620      	mov	r0, r4
 8013940:	f000 f818 	bl	8013974 <__sfp>
 8013944:	2200      	movs	r2, #0
 8013946:	60e0      	str	r0, [r4, #12]
 8013948:	2104      	movs	r1, #4
 801394a:	6860      	ldr	r0, [r4, #4]
 801394c:	f7ff ff82 	bl	8013854 <std>
 8013950:	68a0      	ldr	r0, [r4, #8]
 8013952:	2201      	movs	r2, #1
 8013954:	2109      	movs	r1, #9
 8013956:	f7ff ff7d 	bl	8013854 <std>
 801395a:	68e0      	ldr	r0, [r4, #12]
 801395c:	2202      	movs	r2, #2
 801395e:	2112      	movs	r1, #18
 8013960:	f7ff ff78 	bl	8013854 <std>
 8013964:	2301      	movs	r3, #1
 8013966:	61a3      	str	r3, [r4, #24]
 8013968:	e7d2      	b.n	8013910 <__sinit+0xc>
 801396a:	bf00      	nop
 801396c:	08015928 	.word	0x08015928
 8013970:	0801389d 	.word	0x0801389d

08013974 <__sfp>:
 8013974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013976:	4607      	mov	r7, r0
 8013978:	f7ff ffac 	bl	80138d4 <__sfp_lock_acquire>
 801397c:	4b1e      	ldr	r3, [pc, #120]	; (80139f8 <__sfp+0x84>)
 801397e:	681e      	ldr	r6, [r3, #0]
 8013980:	69b3      	ldr	r3, [r6, #24]
 8013982:	b913      	cbnz	r3, 801398a <__sfp+0x16>
 8013984:	4630      	mov	r0, r6
 8013986:	f7ff ffbd 	bl	8013904 <__sinit>
 801398a:	3648      	adds	r6, #72	; 0x48
 801398c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013990:	3b01      	subs	r3, #1
 8013992:	d503      	bpl.n	801399c <__sfp+0x28>
 8013994:	6833      	ldr	r3, [r6, #0]
 8013996:	b30b      	cbz	r3, 80139dc <__sfp+0x68>
 8013998:	6836      	ldr	r6, [r6, #0]
 801399a:	e7f7      	b.n	801398c <__sfp+0x18>
 801399c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80139a0:	b9d5      	cbnz	r5, 80139d8 <__sfp+0x64>
 80139a2:	4b16      	ldr	r3, [pc, #88]	; (80139fc <__sfp+0x88>)
 80139a4:	60e3      	str	r3, [r4, #12]
 80139a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80139aa:	6665      	str	r5, [r4, #100]	; 0x64
 80139ac:	f000 f847 	bl	8013a3e <__retarget_lock_init_recursive>
 80139b0:	f7ff ff96 	bl	80138e0 <__sfp_lock_release>
 80139b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80139b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80139bc:	6025      	str	r5, [r4, #0]
 80139be:	61a5      	str	r5, [r4, #24]
 80139c0:	2208      	movs	r2, #8
 80139c2:	4629      	mov	r1, r5
 80139c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80139c8:	f7fb fd32 	bl	800f430 <memset>
 80139cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80139d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80139d4:	4620      	mov	r0, r4
 80139d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80139d8:	3468      	adds	r4, #104	; 0x68
 80139da:	e7d9      	b.n	8013990 <__sfp+0x1c>
 80139dc:	2104      	movs	r1, #4
 80139de:	4638      	mov	r0, r7
 80139e0:	f7ff ff62 	bl	80138a8 <__sfmoreglue>
 80139e4:	4604      	mov	r4, r0
 80139e6:	6030      	str	r0, [r6, #0]
 80139e8:	2800      	cmp	r0, #0
 80139ea:	d1d5      	bne.n	8013998 <__sfp+0x24>
 80139ec:	f7ff ff78 	bl	80138e0 <__sfp_lock_release>
 80139f0:	230c      	movs	r3, #12
 80139f2:	603b      	str	r3, [r7, #0]
 80139f4:	e7ee      	b.n	80139d4 <__sfp+0x60>
 80139f6:	bf00      	nop
 80139f8:	08015928 	.word	0x08015928
 80139fc:	ffff0001 	.word	0xffff0001

08013a00 <_fwalk_reent>:
 8013a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a04:	4606      	mov	r6, r0
 8013a06:	4688      	mov	r8, r1
 8013a08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013a0c:	2700      	movs	r7, #0
 8013a0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a12:	f1b9 0901 	subs.w	r9, r9, #1
 8013a16:	d505      	bpl.n	8013a24 <_fwalk_reent+0x24>
 8013a18:	6824      	ldr	r4, [r4, #0]
 8013a1a:	2c00      	cmp	r4, #0
 8013a1c:	d1f7      	bne.n	8013a0e <_fwalk_reent+0xe>
 8013a1e:	4638      	mov	r0, r7
 8013a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a24:	89ab      	ldrh	r3, [r5, #12]
 8013a26:	2b01      	cmp	r3, #1
 8013a28:	d907      	bls.n	8013a3a <_fwalk_reent+0x3a>
 8013a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a2e:	3301      	adds	r3, #1
 8013a30:	d003      	beq.n	8013a3a <_fwalk_reent+0x3a>
 8013a32:	4629      	mov	r1, r5
 8013a34:	4630      	mov	r0, r6
 8013a36:	47c0      	blx	r8
 8013a38:	4307      	orrs	r7, r0
 8013a3a:	3568      	adds	r5, #104	; 0x68
 8013a3c:	e7e9      	b.n	8013a12 <_fwalk_reent+0x12>

08013a3e <__retarget_lock_init_recursive>:
 8013a3e:	4770      	bx	lr

08013a40 <__retarget_lock_acquire_recursive>:
 8013a40:	4770      	bx	lr

08013a42 <__retarget_lock_release_recursive>:
 8013a42:	4770      	bx	lr

08013a44 <__swhatbuf_r>:
 8013a44:	b570      	push	{r4, r5, r6, lr}
 8013a46:	460e      	mov	r6, r1
 8013a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a4c:	2900      	cmp	r1, #0
 8013a4e:	b096      	sub	sp, #88	; 0x58
 8013a50:	4614      	mov	r4, r2
 8013a52:	461d      	mov	r5, r3
 8013a54:	da08      	bge.n	8013a68 <__swhatbuf_r+0x24>
 8013a56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	602a      	str	r2, [r5, #0]
 8013a5e:	061a      	lsls	r2, r3, #24
 8013a60:	d410      	bmi.n	8013a84 <__swhatbuf_r+0x40>
 8013a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013a66:	e00e      	b.n	8013a86 <__swhatbuf_r+0x42>
 8013a68:	466a      	mov	r2, sp
 8013a6a:	f000 f903 	bl	8013c74 <_fstat_r>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	dbf1      	blt.n	8013a56 <__swhatbuf_r+0x12>
 8013a72:	9a01      	ldr	r2, [sp, #4]
 8013a74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013a78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013a7c:	425a      	negs	r2, r3
 8013a7e:	415a      	adcs	r2, r3
 8013a80:	602a      	str	r2, [r5, #0]
 8013a82:	e7ee      	b.n	8013a62 <__swhatbuf_r+0x1e>
 8013a84:	2340      	movs	r3, #64	; 0x40
 8013a86:	2000      	movs	r0, #0
 8013a88:	6023      	str	r3, [r4, #0]
 8013a8a:	b016      	add	sp, #88	; 0x58
 8013a8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08013a90 <__smakebuf_r>:
 8013a90:	898b      	ldrh	r3, [r1, #12]
 8013a92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013a94:	079d      	lsls	r5, r3, #30
 8013a96:	4606      	mov	r6, r0
 8013a98:	460c      	mov	r4, r1
 8013a9a:	d507      	bpl.n	8013aac <__smakebuf_r+0x1c>
 8013a9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013aa0:	6023      	str	r3, [r4, #0]
 8013aa2:	6123      	str	r3, [r4, #16]
 8013aa4:	2301      	movs	r3, #1
 8013aa6:	6163      	str	r3, [r4, #20]
 8013aa8:	b002      	add	sp, #8
 8013aaa:	bd70      	pop	{r4, r5, r6, pc}
 8013aac:	ab01      	add	r3, sp, #4
 8013aae:	466a      	mov	r2, sp
 8013ab0:	f7ff ffc8 	bl	8013a44 <__swhatbuf_r>
 8013ab4:	9900      	ldr	r1, [sp, #0]
 8013ab6:	4605      	mov	r5, r0
 8013ab8:	4630      	mov	r0, r6
 8013aba:	f7ff f959 	bl	8012d70 <_malloc_r>
 8013abe:	b948      	cbnz	r0, 8013ad4 <__smakebuf_r+0x44>
 8013ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ac4:	059a      	lsls	r2, r3, #22
 8013ac6:	d4ef      	bmi.n	8013aa8 <__smakebuf_r+0x18>
 8013ac8:	f023 0303 	bic.w	r3, r3, #3
 8013acc:	f043 0302 	orr.w	r3, r3, #2
 8013ad0:	81a3      	strh	r3, [r4, #12]
 8013ad2:	e7e3      	b.n	8013a9c <__smakebuf_r+0xc>
 8013ad4:	4b0d      	ldr	r3, [pc, #52]	; (8013b0c <__smakebuf_r+0x7c>)
 8013ad6:	62b3      	str	r3, [r6, #40]	; 0x28
 8013ad8:	89a3      	ldrh	r3, [r4, #12]
 8013ada:	6020      	str	r0, [r4, #0]
 8013adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013ae0:	81a3      	strh	r3, [r4, #12]
 8013ae2:	9b00      	ldr	r3, [sp, #0]
 8013ae4:	6163      	str	r3, [r4, #20]
 8013ae6:	9b01      	ldr	r3, [sp, #4]
 8013ae8:	6120      	str	r0, [r4, #16]
 8013aea:	b15b      	cbz	r3, 8013b04 <__smakebuf_r+0x74>
 8013aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013af0:	4630      	mov	r0, r6
 8013af2:	f000 f8d1 	bl	8013c98 <_isatty_r>
 8013af6:	b128      	cbz	r0, 8013b04 <__smakebuf_r+0x74>
 8013af8:	89a3      	ldrh	r3, [r4, #12]
 8013afa:	f023 0303 	bic.w	r3, r3, #3
 8013afe:	f043 0301 	orr.w	r3, r3, #1
 8013b02:	81a3      	strh	r3, [r4, #12]
 8013b04:	89a0      	ldrh	r0, [r4, #12]
 8013b06:	4305      	orrs	r5, r0
 8013b08:	81a5      	strh	r5, [r4, #12]
 8013b0a:	e7cd      	b.n	8013aa8 <__smakebuf_r+0x18>
 8013b0c:	0801389d 	.word	0x0801389d

08013b10 <_malloc_usable_size_r>:
 8013b10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b14:	1f18      	subs	r0, r3, #4
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	bfbc      	itt	lt
 8013b1a:	580b      	ldrlt	r3, [r1, r0]
 8013b1c:	18c0      	addlt	r0, r0, r3
 8013b1e:	4770      	bx	lr

08013b20 <_raise_r>:
 8013b20:	291f      	cmp	r1, #31
 8013b22:	b538      	push	{r3, r4, r5, lr}
 8013b24:	4604      	mov	r4, r0
 8013b26:	460d      	mov	r5, r1
 8013b28:	d904      	bls.n	8013b34 <_raise_r+0x14>
 8013b2a:	2316      	movs	r3, #22
 8013b2c:	6003      	str	r3, [r0, #0]
 8013b2e:	f04f 30ff 	mov.w	r0, #4294967295
 8013b32:	bd38      	pop	{r3, r4, r5, pc}
 8013b34:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013b36:	b112      	cbz	r2, 8013b3e <_raise_r+0x1e>
 8013b38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013b3c:	b94b      	cbnz	r3, 8013b52 <_raise_r+0x32>
 8013b3e:	4620      	mov	r0, r4
 8013b40:	f000 f830 	bl	8013ba4 <_getpid_r>
 8013b44:	462a      	mov	r2, r5
 8013b46:	4601      	mov	r1, r0
 8013b48:	4620      	mov	r0, r4
 8013b4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013b4e:	f000 b817 	b.w	8013b80 <_kill_r>
 8013b52:	2b01      	cmp	r3, #1
 8013b54:	d00a      	beq.n	8013b6c <_raise_r+0x4c>
 8013b56:	1c59      	adds	r1, r3, #1
 8013b58:	d103      	bne.n	8013b62 <_raise_r+0x42>
 8013b5a:	2316      	movs	r3, #22
 8013b5c:	6003      	str	r3, [r0, #0]
 8013b5e:	2001      	movs	r0, #1
 8013b60:	e7e7      	b.n	8013b32 <_raise_r+0x12>
 8013b62:	2400      	movs	r4, #0
 8013b64:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013b68:	4628      	mov	r0, r5
 8013b6a:	4798      	blx	r3
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	e7e0      	b.n	8013b32 <_raise_r+0x12>

08013b70 <raise>:
 8013b70:	4b02      	ldr	r3, [pc, #8]	; (8013b7c <raise+0xc>)
 8013b72:	4601      	mov	r1, r0
 8013b74:	6818      	ldr	r0, [r3, #0]
 8013b76:	f7ff bfd3 	b.w	8013b20 <_raise_r>
 8013b7a:	bf00      	nop
 8013b7c:	2000017c 	.word	0x2000017c

08013b80 <_kill_r>:
 8013b80:	b538      	push	{r3, r4, r5, lr}
 8013b82:	4d07      	ldr	r5, [pc, #28]	; (8013ba0 <_kill_r+0x20>)
 8013b84:	2300      	movs	r3, #0
 8013b86:	4604      	mov	r4, r0
 8013b88:	4608      	mov	r0, r1
 8013b8a:	4611      	mov	r1, r2
 8013b8c:	602b      	str	r3, [r5, #0]
 8013b8e:	f7ed ffdd 	bl	8001b4c <_kill>
 8013b92:	1c43      	adds	r3, r0, #1
 8013b94:	d102      	bne.n	8013b9c <_kill_r+0x1c>
 8013b96:	682b      	ldr	r3, [r5, #0]
 8013b98:	b103      	cbz	r3, 8013b9c <_kill_r+0x1c>
 8013b9a:	6023      	str	r3, [r4, #0]
 8013b9c:	bd38      	pop	{r3, r4, r5, pc}
 8013b9e:	bf00      	nop
 8013ba0:	20006bb0 	.word	0x20006bb0

08013ba4 <_getpid_r>:
 8013ba4:	f7ed bfca 	b.w	8001b3c <_getpid>

08013ba8 <__sread>:
 8013ba8:	b510      	push	{r4, lr}
 8013baa:	460c      	mov	r4, r1
 8013bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bb0:	f000 f894 	bl	8013cdc <_read_r>
 8013bb4:	2800      	cmp	r0, #0
 8013bb6:	bfab      	itete	ge
 8013bb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013bba:	89a3      	ldrhlt	r3, [r4, #12]
 8013bbc:	181b      	addge	r3, r3, r0
 8013bbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bc2:	bfac      	ite	ge
 8013bc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bc6:	81a3      	strhlt	r3, [r4, #12]
 8013bc8:	bd10      	pop	{r4, pc}

08013bca <__swrite>:
 8013bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bce:	461f      	mov	r7, r3
 8013bd0:	898b      	ldrh	r3, [r1, #12]
 8013bd2:	05db      	lsls	r3, r3, #23
 8013bd4:	4605      	mov	r5, r0
 8013bd6:	460c      	mov	r4, r1
 8013bd8:	4616      	mov	r6, r2
 8013bda:	d505      	bpl.n	8013be8 <__swrite+0x1e>
 8013bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013be0:	2302      	movs	r3, #2
 8013be2:	2200      	movs	r2, #0
 8013be4:	f000 f868 	bl	8013cb8 <_lseek_r>
 8013be8:	89a3      	ldrh	r3, [r4, #12]
 8013bea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bf2:	81a3      	strh	r3, [r4, #12]
 8013bf4:	4632      	mov	r2, r6
 8013bf6:	463b      	mov	r3, r7
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bfe:	f000 b817 	b.w	8013c30 <_write_r>

08013c02 <__sseek>:
 8013c02:	b510      	push	{r4, lr}
 8013c04:	460c      	mov	r4, r1
 8013c06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c0a:	f000 f855 	bl	8013cb8 <_lseek_r>
 8013c0e:	1c43      	adds	r3, r0, #1
 8013c10:	89a3      	ldrh	r3, [r4, #12]
 8013c12:	bf15      	itete	ne
 8013c14:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c1e:	81a3      	strheq	r3, [r4, #12]
 8013c20:	bf18      	it	ne
 8013c22:	81a3      	strhne	r3, [r4, #12]
 8013c24:	bd10      	pop	{r4, pc}

08013c26 <__sclose>:
 8013c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c2a:	f000 b813 	b.w	8013c54 <_close_r>
	...

08013c30 <_write_r>:
 8013c30:	b538      	push	{r3, r4, r5, lr}
 8013c32:	4d07      	ldr	r5, [pc, #28]	; (8013c50 <_write_r+0x20>)
 8013c34:	4604      	mov	r4, r0
 8013c36:	4608      	mov	r0, r1
 8013c38:	4611      	mov	r1, r2
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	602a      	str	r2, [r5, #0]
 8013c3e:	461a      	mov	r2, r3
 8013c40:	f7ed ffbb 	bl	8001bba <_write>
 8013c44:	1c43      	adds	r3, r0, #1
 8013c46:	d102      	bne.n	8013c4e <_write_r+0x1e>
 8013c48:	682b      	ldr	r3, [r5, #0]
 8013c4a:	b103      	cbz	r3, 8013c4e <_write_r+0x1e>
 8013c4c:	6023      	str	r3, [r4, #0]
 8013c4e:	bd38      	pop	{r3, r4, r5, pc}
 8013c50:	20006bb0 	.word	0x20006bb0

08013c54 <_close_r>:
 8013c54:	b538      	push	{r3, r4, r5, lr}
 8013c56:	4d06      	ldr	r5, [pc, #24]	; (8013c70 <_close_r+0x1c>)
 8013c58:	2300      	movs	r3, #0
 8013c5a:	4604      	mov	r4, r0
 8013c5c:	4608      	mov	r0, r1
 8013c5e:	602b      	str	r3, [r5, #0]
 8013c60:	f7ed ffc7 	bl	8001bf2 <_close>
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	d102      	bne.n	8013c6e <_close_r+0x1a>
 8013c68:	682b      	ldr	r3, [r5, #0]
 8013c6a:	b103      	cbz	r3, 8013c6e <_close_r+0x1a>
 8013c6c:	6023      	str	r3, [r4, #0]
 8013c6e:	bd38      	pop	{r3, r4, r5, pc}
 8013c70:	20006bb0 	.word	0x20006bb0

08013c74 <_fstat_r>:
 8013c74:	b538      	push	{r3, r4, r5, lr}
 8013c76:	4d07      	ldr	r5, [pc, #28]	; (8013c94 <_fstat_r+0x20>)
 8013c78:	2300      	movs	r3, #0
 8013c7a:	4604      	mov	r4, r0
 8013c7c:	4608      	mov	r0, r1
 8013c7e:	4611      	mov	r1, r2
 8013c80:	602b      	str	r3, [r5, #0]
 8013c82:	f7ed ffc2 	bl	8001c0a <_fstat>
 8013c86:	1c43      	adds	r3, r0, #1
 8013c88:	d102      	bne.n	8013c90 <_fstat_r+0x1c>
 8013c8a:	682b      	ldr	r3, [r5, #0]
 8013c8c:	b103      	cbz	r3, 8013c90 <_fstat_r+0x1c>
 8013c8e:	6023      	str	r3, [r4, #0]
 8013c90:	bd38      	pop	{r3, r4, r5, pc}
 8013c92:	bf00      	nop
 8013c94:	20006bb0 	.word	0x20006bb0

08013c98 <_isatty_r>:
 8013c98:	b538      	push	{r3, r4, r5, lr}
 8013c9a:	4d06      	ldr	r5, [pc, #24]	; (8013cb4 <_isatty_r+0x1c>)
 8013c9c:	2300      	movs	r3, #0
 8013c9e:	4604      	mov	r4, r0
 8013ca0:	4608      	mov	r0, r1
 8013ca2:	602b      	str	r3, [r5, #0]
 8013ca4:	f7ed ffc1 	bl	8001c2a <_isatty>
 8013ca8:	1c43      	adds	r3, r0, #1
 8013caa:	d102      	bne.n	8013cb2 <_isatty_r+0x1a>
 8013cac:	682b      	ldr	r3, [r5, #0]
 8013cae:	b103      	cbz	r3, 8013cb2 <_isatty_r+0x1a>
 8013cb0:	6023      	str	r3, [r4, #0]
 8013cb2:	bd38      	pop	{r3, r4, r5, pc}
 8013cb4:	20006bb0 	.word	0x20006bb0

08013cb8 <_lseek_r>:
 8013cb8:	b538      	push	{r3, r4, r5, lr}
 8013cba:	4d07      	ldr	r5, [pc, #28]	; (8013cd8 <_lseek_r+0x20>)
 8013cbc:	4604      	mov	r4, r0
 8013cbe:	4608      	mov	r0, r1
 8013cc0:	4611      	mov	r1, r2
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	602a      	str	r2, [r5, #0]
 8013cc6:	461a      	mov	r2, r3
 8013cc8:	f7ed ffba 	bl	8001c40 <_lseek>
 8013ccc:	1c43      	adds	r3, r0, #1
 8013cce:	d102      	bne.n	8013cd6 <_lseek_r+0x1e>
 8013cd0:	682b      	ldr	r3, [r5, #0]
 8013cd2:	b103      	cbz	r3, 8013cd6 <_lseek_r+0x1e>
 8013cd4:	6023      	str	r3, [r4, #0]
 8013cd6:	bd38      	pop	{r3, r4, r5, pc}
 8013cd8:	20006bb0 	.word	0x20006bb0

08013cdc <_read_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d07      	ldr	r5, [pc, #28]	; (8013cfc <_read_r+0x20>)
 8013ce0:	4604      	mov	r4, r0
 8013ce2:	4608      	mov	r0, r1
 8013ce4:	4611      	mov	r1, r2
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	602a      	str	r2, [r5, #0]
 8013cea:	461a      	mov	r2, r3
 8013cec:	f7ed ff48 	bl	8001b80 <_read>
 8013cf0:	1c43      	adds	r3, r0, #1
 8013cf2:	d102      	bne.n	8013cfa <_read_r+0x1e>
 8013cf4:	682b      	ldr	r3, [r5, #0]
 8013cf6:	b103      	cbz	r3, 8013cfa <_read_r+0x1e>
 8013cf8:	6023      	str	r3, [r4, #0]
 8013cfa:	bd38      	pop	{r3, r4, r5, pc}
 8013cfc:	20006bb0 	.word	0x20006bb0

08013d00 <_init>:
 8013d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d02:	bf00      	nop
 8013d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d06:	bc08      	pop	{r3}
 8013d08:	469e      	mov	lr, r3
 8013d0a:	4770      	bx	lr

08013d0c <_fini>:
 8013d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d0e:	bf00      	nop
 8013d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d12:	bc08      	pop	{r3}
 8013d14:	469e      	mov	lr, r3
 8013d16:	4770      	bx	lr
